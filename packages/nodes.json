[
  {
    "loadMethods": {},
    "label": "Alchemy",
    "name": "alchemy",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Alchemy/alchemy.svg",
    "type": "action",
    "category": "Network Provider",
    "version": 1.1,
    "description": "Perform Alchemy on-chain operations",
    "incoming": 1,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead"
          },
          {
            "label": "Goerli",
            "name": "goerli"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli"
          },
          {
            "label": "Solana Mainnet",
            "name": "solana"
          },
          {
            "label": "Solana Devnet",
            "name": "solana-devnet"
          }
        ]
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi"
          }
        ],
        "default": "alchemyApi"
      }
    ],
    "inputParameters": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "EVM Chain API",
            "name": "chainAPI",
            "description": "API for fetching standard EVM onchain data using Alchemy supported calls",
            "show": {
              "networks.network": [
                "homestead",
                "goerli",
                "matic",
                "maticmum",
                "optimism",
                "optimism-goerli",
                "arbitrum",
                "arbitrum-goerli"
              ]
            }
          },
          {
            "label": "NFT API",
            "name": "nftAPI",
            "description": "API for fetching NFT data, including ownership, metadata attributes, and more.",
            "show": {
              "networks.network": [
                "homestead",
                "goerli",
                "matic",
                "maticmum"
              ]
            }
          },
          {
            "label": "Transaction Receipts API",
            "name": "txReceiptsAPI",
            "description": "API that gets all transaction receipts for a given block by number or block hash.",
            "show": {
              "networks.network": [
                "homestead",
                "goerli",
                "matic",
                "maticmum",
                "arbitrum",
                "arbitrum-goerli"
              ]
            }
          },
          {
            "label": "Token API",
            "name": "tokenAPI",
            "description": "The Token API allows you to easily get token information, minimizing the number of necessary requests.",
            "show": {
              "networks.network": [
                "homestead",
                "goerli",
                "matic",
                "maticmum",
                "optimism",
                "optimism-goerli",
                "arbitrum",
                "arbitrum-goerli"
              ]
            }
          },
          {
            "label": "Solana API",
            "name": "solanaAPI",
            "description": "API for fetching Solana on-chain data using Alchemy supported calls",
            "show": {
              "networks.network": [
                "solana",
                "solana-devnet"
              ]
            }
          }
        ],
        "default": "chainAPI"
      },
      {
        "label": "Chain Category",
        "name": "chainCategory",
        "type": "options",
        "options": [
          {
            "label": "Retrieving Blocks",
            "name": "retrievingBlocks",
            "description": "Retrieve onchain blocks data"
          },
          {
            "label": "EVM/Smart Contract Execution",
            "name": "evmExecution",
            "description": "Execute or submit transaction onto blockchain"
          },
          {
            "label": "Reading Transactions",
            "name": "readingTransactions",
            "description": "Read onchain transactions data"
          },
          {
            "label": "Account Information",
            "name": "accountInformation",
            "description": "Retrieve onchain account information"
          },
          {
            "label": "Event Logs",
            "name": "eventLogs",
            "description": "Fetch onchain logs"
          },
          {
            "label": "Chain Information",
            "name": "chainInformation",
            "description": "Get general selected blockchain information"
          },
          {
            "label": "Retrieving Uncles",
            "name": "retrievingUncles",
            "description": "Retrieve onchain uncles blocks data"
          },
          {
            "label": "Filters",
            "name": "filters",
            "description": "Get block filters and logs, or create new filter"
          }
        ],
        "show": {
          "inputParameters.api": [
            "chainAPI"
          ]
        }
      },
      {
        "label": "Chain Category",
        "name": "chainCategory",
        "type": "options",
        "options": [
          {
            "label": "Reading & Writing Transactions",
            "name": "readWriteTransactions",
            "description": "Read and Write transactins onto Solana chain"
          },
          {
            "label": "Getting Blocks",
            "name": "gettingBlocks",
            "description": "Get Solana blocks data"
          },
          {
            "label": "Account Information",
            "name": "accountInformation",
            "description": "Retrieve Solana onchain account information"
          },
          {
            "label": "Network Information",
            "name": "networkInformation",
            "description": "Get Solana network onchain information"
          },
          {
            "label": "Slot Information",
            "name": "slotInformation",
            "description": "Fetch Solana slot information"
          },
          {
            "label": "Node Information",
            "name": "nodeInformation",
            "description": "Retrieve Solana node onchain information"
          },
          {
            "label": "Token Information",
            "name": "tokenInformation",
            "description": "Fetch Solana onchain token information"
          },
          {
            "label": "Network Inflation",
            "name": "networkInflation",
            "description": "Retrieve Solana network inflation onchain data"
          }
        ],
        "show": {
          "inputParameters.api": [
            "solanaAPI"
          ]
        }
      },
      {
        "label": "Operation",
        "name": "operation",
        "type": "asyncOptions",
        "loadMethod": "getOperations"
      },
      {
        "label": "Owner Address",
        "name": "owner",
        "type": "string",
        "description": "Address for NFT owner (can be in ENS format!)",
        "default": "",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getNFTs"
          ]
        }
      },
      {
        "label": "PageKey",
        "name": "pageKey",
        "type": "string",
        "description": "UUID for pagination. If more results are available, a UUID pageKey will be returned in the response. Pass that UUID into pageKey to fetch the next 100 NFTs.",
        "default": "",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getNFTs"
          ]
        },
        "optional": true
      },
      {
        "label": "Metadata",
        "name": "withMetadata",
        "type": "boolean",
        "description": "If boolean is set to true the query will include metadata for each returned token.",
        "default": true,
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getNFTs"
          ]
        }
      },
      {
        "label": "Contract Address",
        "name": "contractAddress",
        "type": "string",
        "description": "Address of NFT contract",
        "default": "",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getNFTMetadata"
          ]
        }
      },
      {
        "label": "Token Id",
        "name": "tokenId",
        "type": "string",
        "description": "Id for NFT",
        "default": "",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getNFTMetadata"
          ]
        }
      },
      {
        "label": "Token Type",
        "name": "tokenType ",
        "type": "options",
        "description": "\"ERC721\" or \"ERC1155\"; specifies type of token to query for",
        "options": [
          {
            "label": "ERC721",
            "name": "ERC721"
          },
          {
            "label": "ERC1155",
            "name": "ERC1155"
          },
          {
            "label": "",
            "name": ""
          }
        ],
        "default": "",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getNFTMetadata"
          ]
        }
      },
      {
        "label": "Contract Address",
        "name": "contractAddress",
        "type": "string",
        "description": "Contract address for the NFT collection",
        "default": "",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getNFTsForCollection"
          ]
        }
      },
      {
        "label": "Start Token",
        "name": "startToken",
        "type": "string",
        "description": "An offset used for pagination. Can be a hex string, or a decimal.",
        "default": "",
        "optional": true,
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getNFTsForCollection"
          ]
        }
      },
      {
        "label": "Metadata",
        "name": "withMetadata",
        "type": "boolean",
        "description": "If set to true, returns NFT metadata; otherwise will only return tokenIds",
        "default": true,
        "optional": true,
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getNFTsForCollection"
          ]
        }
      },
      {
        "label": "Limit",
        "name": "limit",
        "type": "number",
        "description": "Sets the total number of NFTs returned in the response. Defaults to 100.",
        "default": 100,
        "optional": true,
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getNFTsForCollection"
          ]
        }
      },
      {
        "label": "Token Uri Timeout In Ms",
        "name": "tokenUriTimeoutInMs",
        "type": "number",
        "description": "No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to only access the cache and not live fetch any metadata for cache misses then set this value to 0.",
        "optional": true,
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getNFTsForCollection"
          ]
        }
      },
      {
        "label": "Contract Address",
        "name": "contractAddress",
        "type": "string",
        "description": "Contract address for the NFT collection (ERC721 and ERC1155 supported).",
        "default": "",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getOwnersForCollection"
          ]
        }
      },
      {
        "label": "With Token Balances",
        "name": "withTokenBalances",
        "type": "boolean",
        "description": "If set to true the query will include the token balances per token id for each owner. false by default.",
        "default": false,
        "optional": true,
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getOwnersForCollection"
          ]
        }
      },
      {
        "label": "Block",
        "name": "block",
        "type": "string",
        "description": "The point in time or block number (in hex or decimal) to fetch collection ownership information for.",
        "default": "",
        "optional": true,
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getOwnersForCollection"
          ]
        }
      },
      {
        "label": "PageKey",
        "name": "pageKey",
        "type": "string",
        "description": "used for collections with >50,000 owners. pageKey field can be passed back as request parameter to get the next page of results.",
        "default": "",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getOwnersForCollection"
          ]
        },
        "optional": true
      },
      {
        "label": "Contract Address",
        "name": "contractAddress",
        "type": "string",
        "description": "Contract address for the NFT collection (ERC721 and ERC1155 supported).",
        "default": "",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getOwnersForToken",
            "isSpamContract",
            "reingestContract",
            "getFloorPrice",
            "computeRarity",
            "summarizeNFTAttributes",
            "reportSpamContract"
          ]
        }
      },
      {
        "label": "Token Id",
        "name": "tokenId",
        "type": "string",
        "description": "The ID of the token. Can be in hex or decimal format.",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getOwnersForToken",
            "computeRarity"
          ]
        }
      },
      {
        "label": "Query",
        "name": "query",
        "type": "string",
        "description": "The search string that you want to search for in contract metadata",
        "default": "",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "searchContractMetadata"
          ]
        }
      },
      {
        "label": "Contract Address",
        "name": "contractAddress",
        "type": "string",
        "description": "Contract address for the NFT collection (ERC721 and ERC1155 supported).",
        "default": "",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "isHolderOfCollection"
          ]
        }
      },
      {
        "label": "Wallet",
        "name": "wallet",
        "type": "string",
        "description": "Wallet address to check for collection ownership.",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "isHolderOfCollection"
          ]
        }
      },
      {
        "label": "Owner",
        "name": "owner",
        "type": "string",
        "description": "Address for NFT owner (can be in ENS format!).",
        "placeholder": "vitalk.eth",
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getContractsForOwner"
          ]
        }
      },
      {
        "label": "PageKey",
        "name": "pageKey",
        "type": "string",
        "description": "key for pagination. If more results are available, a pageKey will be returned in the response. Pass back the pageKey as a param to fetch the next page of results.",
        "optional": true,
        "show": {
          "inputParameters.api": [
            "nftAPI"
          ],
          "inputParameters.operation": [
            "getContractsForOwner"
          ]
        }
      },
      {
        "label": "Parameters",
        "name": "parameters",
        "type": "json",
        "placeholder": "[\"param1\", \"param2\"]",
        "optional": true,
        "description": "Operation parameters in array. Ex: [\"param1\", \"param2\"]",
        "show": {
          "inputParameters.api": [
            "chainAPI",
            "txReceiptsAPI",
            "tokenAPI",
            "solanaAPI"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Alchemy/Alchemy.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "Alchemy Trigger",
    "name": "alchemyTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Alchemy/alchemy.svg",
    "type": "trigger",
    "category": "Network Provider",
    "version": 1,
    "description": "Start workflow whenever subscribed event happened",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          },
          {
            "label": "Solana Mainnet",
            "name": "solana",
            "parentGroup": "Solana"
          },
          {
            "label": "Solana Devnet",
            "name": "solana-devnet",
            "parentGroup": "Solana"
          },
          {
            "label": "Solana Testnet",
            "name": "solana-testnet",
            "parentGroup": "Solana"
          }
        ]
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi"
          }
        ],
        "default": "alchemyApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Subscribe Operation",
        "name": "subscribeOperation",
        "type": "asyncOptions",
        "loadMethod": "getSubscribeOperations"
      },
      {
        "label": "Parameters",
        "name": "parameters",
        "type": "json",
        "placeholder": "[\n  \"param1\",\n  \"param2\"\n]",
        "optional": true,
        "description": "Operation parameters in array. Ex: [\"param1\", \"param2\"]"
      },
      {
        "label": "Unsubscribe Operation",
        "name": "unsubscribeOperation",
        "type": "asyncOptions",
        "loadMethod": "getUnsubscribeOperations"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Alchemy/AlchemyTrigger.js"
  },
  {
    "webhookMethods": {},
    "label": "Alchemy Webhook",
    "name": "AlchemyWebhook",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Alchemy/alchemy.svg",
    "type": "webhook",
    "category": "Network Provider",
    "version": 1,
    "description": "Start workflow whenever Alchemy webhook event happened",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "ETH_MAINNET"
          },
          {
            "label": "Goerli",
            "name": "ETH_GOERLI"
          },
          {
            "label": "Polygon Mainnet",
            "name": "MATIC_MAINNET"
          },
          {
            "label": "Polygon Mumbai",
            "name": "MATIC_MUMBAI"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "ARB_MAINNET"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "ARB_GOERLI"
          },
          {
            "label": "Optimism Mainnet",
            "name": "OPT_MAINNET"
          },
          {
            "label": "Optimism Goerli",
            "name": "OPT_GOERLI"
          }
        ],
        "default": "ETH_MAINNET"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi"
          }
        ],
        "default": "alchemyApi"
      }
    ],
    "actions": [
      {
        "label": "Event",
        "name": "webhook_type",
        "type": "options",
        "options": [
          {
            "label": "Mined Transactions",
            "name": "MINED_TRANSACTION",
            "description": "Triggered anytime a transaction sent through your API key gets successfully mined."
          },
          {
            "label": "Dropped Transactions",
            "name": "DROPPED_TRANSACTION",
            "description": "The Dropped Transactions Webhook is used to notify your app anytime a transaction send through your API key gets dropped."
          },
          {
            "label": "Address Activity",
            "name": "ADDRESS_ACTIVITY",
            "description": "The Address Activity Webhook allows you to track all ETH, ERC20 and ERC721 transfer events for as many Ethereum addresses as you'd like."
          }
        ],
        "default": "MINED_TRANSACTION"
      }
    ],
    "inputParameters": [
      {
        "label": "App ID",
        "name": "app_id",
        "type": "string",
        "default": "",
        "description": "App ID can be found within the URL of your specific app. For example, given the URL https://dashboard.alchemyapi.io/apps/xfu8frt3wf94j7h5 your App ID would be xfu8frt3wf94j7h5",
        "show": {
          "actions.webhook_type": [
            "MINED_TRANSACTION",
            "DROPPED_TRANSACTION"
          ]
        }
      },
      {
        "label": "Ethereum Addresses",
        "name": "addresses",
        "type": "string",
        "default": "",
        "description": "Ethereum addresses to track the transfer events",
        "placeholder": "[\"<your-Ethereum-Address>\"]",
        "show": {
          "actions.webhook_type": [
            "ADDRESS_ACTIVITY"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Alchemy/AlchemyWebhook.js"
  },
  {
    "label": "Arbiscan",
    "name": "arbiscan",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Arbiscan/arbiscan.png",
    "type": "action",
    "category": "Block Explorer",
    "version": 1,
    "description": "Perform Arbiscan operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "Get Ether Balance for a Single Address",
            "name": "getEtherBalance",
            "description": "Returns the Ether balance of a given address."
          },
          {
            "label": "Get Ether Balance for Multiple Addresses(separated by a comma)",
            "name": "getEtherBalanceMulti",
            "description": "Returns the Ether balance of the addresses(each address separated by a comma) entered."
          },
          {
            "label": "Get transactions",
            "name": "getTransactions",
            "description": "Returns the list of transactions performed by an address, with optional pagination."
          },
          {
            "label": "Get internal transactions",
            "name": "getInternalTransactions",
            "description": "Returns the list of internal transactions performed by an address, with optional pagination."
          },
          {
            "label": "Get internal transactions by hash",
            "name": "getInternalTransactionsByHash",
            "description": "Returns the list of internal transactions performed within a transaction."
          },
          {
            "label": "Get internal transactions by block",
            "name": "getInternalTransactionsByBlock",
            "description": "Returns the list of internal transactions performed within a block range, with optional pagination."
          },
          {
            "label": "Get Contract ABI",
            "name": "getAbi",
            "description": "Returns the contract Application Binary Interface ( ABI ) of a verified smart contract."
          },
          {
            "label": "Get Contract Source Code",
            "name": "getContractSourceCode",
            "description": "Returns the Solidity source code of a verified smart contract."
          },
          {
            "label": "Check Transaction Receipt Status",
            "name": "getTransactionReceiptStatus",
            "description": "Returns the status code of a transaction execution."
          },
          {
            "label": "Check Contract Execution Status",
            "name": "getContractExecutionStatus",
            "description": "Returns the status code of a contract execution."
          },
          {
            "label": "Get ERC20 Token Supply",
            "name": "getErc20TokenSupply",
            "description": "Returns the total supply of a ERC-20 token. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get ERC20 Token Balance",
            "name": "getErc20TokenBalance",
            "description": "Returns the current balance of a ERC-20 token of an address. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get ETHER Price",
            "name": "getEtherPrice",
            "description": "Returns the latest price of 1 ETHER."
          },
          {
            "label": "Get Total Supply of Ether",
            "name": "getEtherSupply",
            "description": "Returns the current amount of Ether in circulation."
          }
        ],
        "default": "getEtherBalance"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli"
          }
        ],
        "default": "homestead"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Arbiscan API Key",
            "name": "arbiscanApi"
          }
        ],
        "default": "arbiscanApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "The address parameter(s) required",
        "show": {
          "actions.api": [
            "getEtherBalance",
            "getTransactions",
            "getInternalTransactions",
            "getAbi",
            "getContractSourceCode",
            "getErc20TokenBalance"
          ]
        }
      },
      {
        "label": "Start Block",
        "name": "startBlock",
        "type": "number",
        "optional": true,
        "description": "the block number to start searching for transactions",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        },
        "default": 0
      },
      {
        "label": "End Block",
        "name": "endBlock",
        "type": "number",
        "optional": true,
        "description": "the block number to stop searching for transactions",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        }
      },
      {
        "label": "Page",
        "name": "page",
        "type": "number",
        "optional": true,
        "description": "the page number, if pagination is enabled",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        },
        "default": 1
      },
      {
        "label": "Offset",
        "name": "offset",
        "type": "number",
        "optional": true,
        "description": "the number of transactions displayed per page",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        },
        "default": 10
      },
      {
        "label": "Sort By",
        "name": "sortBy",
        "type": "options",
        "optional": true,
        "options": [
          {
            "label": "Desc",
            "name": "desc"
          },
          {
            "label": "Asc",
            "name": "asc"
          }
        ],
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        },
        "default": "desc"
      },
      {
        "label": "Transaction Hash",
        "name": "txhash",
        "type": "string",
        "description": "the string representing the transaction hash to check for internal transactions",
        "show": {
          "actions.api": [
            "getInternalTransactionsByHash",
            "getTransactionReceiptStatus",
            "getContractExecutionStatus"
          ]
        }
      },
      {
        "label": "Contract Address",
        "name": "contractAddress",
        "type": "string",
        "description": "the contract address of the ERC-20 token",
        "show": {
          "actions.api": [
            "getErc20TokenSupply",
            "getErc20TokenBalance"
          ]
        }
      },
      {
        "label": "Tag",
        "name": "tag",
        "type": "options",
        "options": [
          {
            "label": "latest",
            "name": "latest"
          }
        ],
        "default": "latest",
        "show": {
          "actions.api": [
            "getErc20TokenBalance"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Arbiscan/Arbiscan.js"
  },
  {
    "loadMethods": {},
    "label": "BEP20 Function",
    "name": "BEP20Function",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/BEP20Function/bep20.png",
    "type": "action",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Execute BEP20 function such as deposit, withdraw, get balance, etc",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Function",
        "name": "function",
        "type": "options",
        "options": [
          {
            "name": "deposit",
            "label": "Deposit",
            "description": "Deposit BNB into BEP20 token"
          },
          {
            "name": "withdraw",
            "label": "Withdraw",
            "description": "Withdraw BNB from BEP20 token"
          },
          {
            "name": "allowance",
            "label": "Get Allowance",
            "description": "Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom. This is zero by default."
          },
          {
            "name": "approve",
            "label": "Approve",
            "description": "Sets amount as the allowance of spender over the caller’s tokens."
          },
          {
            "name": "balanceOf",
            "label": "Get Balance",
            "description": "Returns the amount of tokens owned by account"
          },
          {
            "name": "decimals",
            "label": "Get BEP20 Decimals",
            "description": "Returns the decimals of BEP20"
          },
          {
            "name": "name",
            "label": "Get BEP20 Name",
            "description": "Returns the name of BEP20"
          },
          {
            "name": "symbol",
            "label": "Get BEP20 Symbol",
            "description": "Returns the symbol of BEP20"
          },
          {
            "name": "totalSupply",
            "label": "Get BEP20 Total Supply",
            "description": "Returns the total supply of BEP20"
          },
          {
            "name": "transferFrom",
            "label": "Transfer From",
            "description": "Moves amount tokens from sender to recipient using the allowance mechanism. Amount is then deducted from the caller’s allowance."
          }
        ]
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc",
            "parentGroup": "Binance Smart Chain"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet",
            "parentGroup": "Binance Smart Chain"
          }
        ]
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "BEP20 Token",
        "name": "bep20Token",
        "type": "asyncOptions",
        "description": "BEP20 Token to send/transfer",
        "loadMethod": "getTokens"
      },
      {
        "label": "Custom BEP20 Address",
        "name": "customBEP20TokenAddress",
        "type": "string",
        "description": "BEP20 Token Address",
        "show": {
          "inputParameters.bep20Token": [
            "customBEP20Address"
          ]
        }
      },
      {
        "label": "Spender Address",
        "name": "spender",
        "type": "string",
        "show": {
          "actions.function": [
            "approve"
          ]
        }
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "show": {
          "actions.function": [
            "approve"
          ]
        }
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet to execute approve function",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.function": [
            "approve"
          ]
        }
      },
      {
        "label": "Owner Address",
        "name": "owner",
        "type": "string",
        "show": {
          "actions.function": [
            "allowance"
          ]
        }
      },
      {
        "label": "Spender Address",
        "name": "spender",
        "type": "string",
        "show": {
          "actions.function": [
            "allowance"
          ]
        }
      },
      {
        "label": "Account Address",
        "name": "account",
        "type": "string",
        "description": "Account address to check for remaining amount",
        "show": {
          "actions.function": [
            "balanceOf"
          ]
        }
      },
      {
        "label": "From Address",
        "name": "from",
        "type": "string",
        "description": "Account address to transfer the token",
        "show": {
          "actions.function": [
            "transferFrom"
          ]
        }
      },
      {
        "label": "To Address",
        "name": "to",
        "type": "string",
        "description": "Account address to receive the token",
        "show": {
          "actions.function": [
            "transferFrom"
          ]
        }
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "description": "Amount of token transfer",
        "show": {
          "actions.function": [
            "transferFrom"
          ]
        }
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet to move amount tokens from sender to recipient using the allowance mechanism",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.function": [
            "transferFrom"
          ]
        }
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "description": "Amount of token to deposit",
        "show": {
          "actions.function": [
            "deposit"
          ]
        }
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet to deposit ETH into ERC20 Token",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.function": [
            "deposit"
          ]
        }
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "description": "Amount of token to withdraw",
        "show": {
          "actions.function": [
            "withdraw"
          ]
        }
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Withdraw ERC20 Token to this wallet",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.function": [
            "withdraw"
          ]
        }
      },
      {
        "label": "Gas Limit",
        "name": "gasLimit",
        "type": "number",
        "optional": true,
        "placeholder": "100000",
        "description": "Maximum price you are willing to pay when sending a transaction",
        "show": {
          "actions.function": [
            "approve",
            "transferFrom",
            "deposit"
          ]
        }
      },
      {
        "label": "Max Fee per Gas",
        "name": "maxFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "200",
        "description": "The maximum price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>",
        "show": {
          "actions.function": [
            "approve",
            "transferFrom",
            "deposit"
          ]
        }
      },
      {
        "label": "Max Priority Fee per Gas",
        "name": "maxPriorityFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "5",
        "description": "The priority fee price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>",
        "show": {
          "actions.function": [
            "approve",
            "transferFrom",
            "deposit"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/BEP20Function/BEP20Function.js"
  },
  {
    "loadMethods": {},
    "label": "BEP20 Transfer",
    "name": "BEP20Transfer",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/BEP20Transfer/bep20.png",
    "type": "action",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Send/Transfer BEP20 to an address",
    "incoming": 1,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc",
            "parentGroup": "Binance Smart Chain"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet",
            "parentGroup": "Binance Smart Chain"
          }
        ]
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "BEP20 Token",
        "name": "bep20Token",
        "type": "asyncOptions",
        "description": "BEP20 Token to send/transfer",
        "loadMethod": "getTokens"
      },
      {
        "label": "Custom BEP20 Address",
        "name": "customBEP20TokenAddress",
        "type": "string",
        "description": "BEP20 Token Address",
        "show": {
          "inputParameters.bep20Token": [
            "customBEP20Address"
          ]
        }
      },
      {
        "label": "Wallet To Transfer",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet account to send/transfer BEP20",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets"
      },
      {
        "label": "Address To Receive",
        "name": "address",
        "type": "string",
        "default": "",
        "description": "Address to receive BEP20"
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "description": "Amount of BEP20 to transfer"
      },
      {
        "label": "Gas Limit",
        "name": "gasLimit",
        "type": "number",
        "optional": true,
        "placeholder": "100000",
        "description": "Maximum price you are willing to pay when sending a transaction"
      },
      {
        "label": "Max Fee per Gas",
        "name": "maxFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "200",
        "description": "The maximum price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      },
      {
        "label": "Max Priority Fee per Gas",
        "name": "maxPriorityFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "5",
        "description": "The priority fee price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/BEP20Transfer/BEP20Transfer.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "BEP20 Transfer Trigger",
    "name": "BEP20TransferTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/BEP20TransferTrigger/bep20.png",
    "type": "trigger",
    "category": "Cryptocurrency",
    "version": 1.1,
    "description": "Triggers whenever a BEP20 transfer event happened",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc",
            "parentGroup": "Binance Smart Chain"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet",
            "parentGroup": "Binance Smart Chain"
          }
        ],
        "default": "bsc"
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "options",
        "options": [
          {
            "label": "Binance",
            "name": "binance",
            "description": "Public Binance RPC/Websocket",
            "parentGroup": "Public Nodes"
          },
          {
            "label": "QuickNode",
            "name": "quicknode",
            "description": "QuickNode HTTP and WSS Endpoints",
            "parentGroup": "Private Nodes"
          },
          {
            "label": "Custom RPC Endpoint",
            "name": "customRPC",
            "description": "HTTP endpoint",
            "parentGroup": "Custom Nodes"
          },
          {
            "label": "Custom Websocket Endpoint",
            "name": "customWebsocket",
            "description": "WSS Endpoint",
            "parentGroup": "Custom Nodes"
          }
        ],
        "default": "binance"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "BEP20 Token",
        "name": "bep20Token",
        "type": "asyncOptions",
        "description": "BEP20 Token to send/transfer",
        "loadMethod": "getTokens",
        "default": "anyBEP20Address"
      },
      {
        "label": "Custom BEP20 Address",
        "name": "customBEP20TokenAddress",
        "type": "string",
        "description": "BEP20 Token Address",
        "show": {
          "inputParameters.bep20Token": [
            "customBEP20Address"
          ]
        }
      },
      {
        "label": "Direction",
        "name": "direction",
        "type": "options",
        "options": [
          {
            "label": "From",
            "name": "from",
            "description": "Transfer from wallet address"
          },
          {
            "label": "To",
            "name": "to",
            "description": "Transfer to wallet address"
          },
          {
            "label": "Both From and To",
            "name": "fromTo",
            "description": "Transfer from a wallet address to another wallet address"
          }
        ],
        "default": ""
      },
      {
        "label": "From Wallet Address",
        "name": "fromAddress",
        "type": "string",
        "default": "",
        "show": {
          "inputParameters.direction": [
            "from",
            "fromTo"
          ]
        }
      },
      {
        "label": "To Wallet Address",
        "name": "toAddress",
        "type": "string",
        "default": "",
        "show": {
          "inputParameters.direction": [
            "to",
            "fromTo"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/BEP20TransferTrigger/BEP20TransferTrigger.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "label": "BNB Balance Trigger",
    "name": "BNBBalanceTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/BNBBalanceTrigger/bnb.svg",
    "type": "trigger",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Triggers whenever BNB balance in wallet changes",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc",
            "parentGroup": "Binance Smart Chain"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet",
            "parentGroup": "Binance Smart Chain"
          }
        ],
        "default": "bsc"
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "options",
        "options": [
          {
            "label": "Binance",
            "name": "binance",
            "description": "Public Binance RPC/Websocket",
            "parentGroup": "Public Nodes"
          },
          {
            "label": "QuickNode",
            "name": "quicknode",
            "description": "QuickNode HTTP and WSS Endpoints",
            "parentGroup": "Private Nodes"
          },
          {
            "label": "Custom RPC Endpoint",
            "name": "customRPC",
            "description": "HTTP endpoint",
            "parentGroup": "Custom Nodes"
          },
          {
            "label": "Custom Websocket Endpoint",
            "name": "customWebsocket",
            "description": "WSS Endpoint",
            "parentGroup": "Custom Nodes"
          }
        ],
        "default": "binance"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Wallet Address",
        "name": "address",
        "type": "string",
        "default": ""
      },
      {
        "label": "Trigger Condition",
        "name": "triggerCondition",
        "type": "options",
        "options": [
          {
            "label": "When balance increased",
            "name": "increase"
          },
          {
            "label": "When balance decreased",
            "name": "decrease"
          }
        ],
        "default": "increase"
      },
      {
        "label": "Polling Time",
        "name": "pollTime",
        "type": "options",
        "options": [
          {
            "label": "Every 15 secs",
            "name": "15s"
          },
          {
            "label": "Every 30 secs",
            "name": "30s"
          },
          {
            "label": "Every 1 min",
            "name": "1min"
          },
          {
            "label": "Every 5 min",
            "name": "5min"
          },
          {
            "label": "Every 10 min",
            "name": "10min"
          }
        ],
        "default": "30s"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/BNBBalanceTrigger/BNBBalanceTrigger.js"
  },
  {
    "loadMethods": {},
    "label": "BNB Transfer",
    "name": "BNBTransfer",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/BNBTransfer/bnb.svg",
    "type": "action",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Send/Transfer BNB to an address",
    "incoming": 1,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc",
            "parentGroup": "Binance Smart Chain"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet",
            "parentGroup": "Binance Smart Chain"
          }
        ]
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Wallet To Transfer",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet account to send/transfer BNB",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets"
      },
      {
        "label": "Address To Receive",
        "name": "address",
        "type": "string",
        "default": "",
        "description": "Address to receive BNB"
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "description": "Amount of BNB to transfer"
      },
      {
        "label": "Gas Limit",
        "name": "gasLimit",
        "type": "number",
        "optional": true,
        "placeholder": "100000",
        "description": "Maximum price you are willing to pay when sending a transaction"
      },
      {
        "label": "Max Fee per Gas",
        "name": "maxFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "200",
        "description": "The maximum price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      },
      {
        "label": "Max Priority Fee per Gas",
        "name": "maxPriorityFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "5",
        "description": "The priority fee price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/BNBTransfer/BNBTransfer.js"
  },
  {
    "loadMethods": {},
    "label": "Binance Private",
    "name": "binancePrivate",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Binance/binance-logo.svg",
    "type": "action",
    "category": "Centralized Exchange",
    "version": 1,
    "description": "Binance Private APIs that require API and Secret keys",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "description": "Network to execute API: Test or Live",
        "options": [
          {
            "label": "TEST",
            "name": "test",
            "description": "Test network: https://testnet.binance.vision/"
          },
          {
            "label": "LIVE",
            "name": "live",
            "description": "Live network: https://api.binance.com/"
          }
        ],
        "default": "test"
      },
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Send New Order",
            "name": "postNewOrder",
            "description": "Send in a new order."
          },
          {
            "label": "Test New Order",
            "name": "postTestNewOrder",
            "description": "Test new order creation. Creates and validates a new order but does not send it into the matching engine."
          },
          {
            "label": "Query Order",
            "name": "getOrder",
            "description": "Check an order's status."
          },
          {
            "label": "Cancel Order",
            "name": "delOrder",
            "description": "Cancel an active order."
          },
          {
            "label": "Cancel All Open Orders on a Symbol",
            "name": "delOpenOrders",
            "description": "Cancels all active orders on a symbol. This includes OCO orders."
          },
          {
            "label": "Query Current Open Orders",
            "name": "getOpenOrders",
            "description": "Get all open orders on a symbol."
          },
          {
            "label": "Query All Orders",
            "name": "getAllOrders",
            "description": "Get all account orders; active, canceled, or filled."
          },
          {
            "label": "Query Account Information",
            "name": "getAccountInformation",
            "description": "Get current account information."
          },
          {
            "label": "Query Account Trade List",
            "name": "getMyTrades",
            "description": "Get trades for a specific account and symbol."
          },
          {
            "label": "Query Current Order Count Usage",
            "name": "getOrderCountUsage",
            "description": "Displays the user's current order count usage for all intervals."
          }
        ],
        "default": "getAccountInformation"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Binance API Key",
            "name": "binanceApi"
          }
        ],
        "default": "binanceApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Symbol",
        "name": "symbol",
        "type": "asyncOptions",
        "loadMethod": "getSupportedSymbols",
        "show": {
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder",
            "getOrder",
            "delOrder",
            "delOpenOrders",
            "getOpenOrders",
            "getAllOrders",
            "getMyTrades"
          ]
        }
      },
      {
        "label": "Order Side",
        "name": "side",
        "type": "options",
        "options": [
          {
            "label": "BUY",
            "name": "BUY"
          },
          {
            "label": "SELL",
            "name": "SELL"
          }
        ],
        "show": {
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder"
          ]
        }
      },
      {
        "label": "Order Type",
        "name": "type",
        "type": "options",
        "options": [
          {
            "label": "LIMIT",
            "name": "LIMIT"
          },
          {
            "label": "MARKET",
            "name": "MARKET"
          },
          {
            "label": "STOP_LOSS",
            "name": "STOP_LOSS"
          },
          {
            "label": "STOP_LOSS_LIMIT",
            "name": "STOP_LOSS_LIMIT"
          },
          {
            "label": "TAKE_PROFIT",
            "name": "TAKE_PROFIT"
          },
          {
            "label": "TAKE_PROFIT_LIMIT",
            "name": "TAKE_PROFIT_LIMIT"
          },
          {
            "label": "LIMIT_MAKER",
            "name": "LIMIT_MAKER"
          }
        ],
        "default": "LIMIT",
        "show": {
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder"
          ]
        }
      },
      {
        "label": "Time in Force",
        "name": "timeInForce",
        "type": "options",
        "description": "This sets how long an order will be active before expiration.",
        "options": [
          {
            "label": "Good Til Canceled",
            "name": "GTC",
            "description": "An order will be on the book unless the order is canceled."
          },
          {
            "label": "Immediate Or Cancel",
            "name": "IOC",
            "description": "An order will try to fill the order as much as it can before the order expires."
          },
          {
            "label": "Fill or Kill",
            "name": "FOK",
            "description": "An order will expire if the full order cannot be filled upon execution."
          }
        ],
        "optional": {
          "inputParameters.type": [
            "MARKET",
            "STOP_LOSS",
            "TAKE_PROFIT",
            "LIMIT_MAKER"
          ]
        },
        "show": {
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder"
          ]
        }
      },
      {
        "label": "Quantity",
        "name": "quantity",
        "type": "number",
        "description": "For MARKET order type, Quantity or Quote Order Quantity is mandatory.",
        "optional": {
          "inputParameters.type": [
            "MARKET"
          ],
          "inputParameters.quoteOrderQty": "^(\\d+\\.?\\d*|{{.*}})$"
        },
        "show": {
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder"
          ]
        }
      },
      {
        "label": "Quote Order Quantity",
        "name": "quoteOrderQty",
        "type": "number",
        "description": "Specifies the amount the user wants to spend (when buying) or receive (when selling). For MARKET order type, Quantity or Quote Order Quantity is mandatory.",
        "optional": {
          "inputParameters.quantity": "^(\\d+\\.?\\d*|{{.*}})$"
        },
        "show": {
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder"
          ],
          "inputParameters.type": [
            "MARKET"
          ]
        }
      },
      {
        "label": "Price",
        "name": "price",
        "type": "number",
        "optional": {
          "inputParameters.type": [
            "MARKET",
            "STOP_LOSS",
            "TAKE_PROFIT"
          ]
        },
        "show": {
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder"
          ]
        }
      },
      {
        "label": "New Client Order Id",
        "name": "newClientOrderId",
        "description": "A unique id among open orders. Automatically generated if not sent. Orders with the same newClientOrderID can be accepted only when the previous one is filled, otherwise the order will be rejected.",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder"
          ]
        }
      },
      {
        "label": "Stop Price",
        "name": "stopPrice",
        "type": "number",
        "description": "For [STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, TAKE_PROFIT_LIMIT] order type, Stop Price or Trailing Delta is mandatory.",
        "optional": {
          "inputParameters.trailingDelta": "^(\\d+\\.?\\d*|{{.*}})$"
        },
        "show": {
          "inputParameters.type": [
            "STOP_LOSS",
            "STOP_LOSS_LIMIT",
            "TAKE_PROFIT",
            "TAKE_PROFIT_LIMIT"
          ],
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder"
          ]
        }
      },
      {
        "label": "Trailing Delta",
        "name": "trailingDelta",
        "type": "number",
        "description": "For [STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, TAKE_PROFIT_LIMIT] order type, Stop Price or Trailing Delta is mandatory.",
        "optional": {
          "inputParameters.stopPrice": "^(\\d+\\.?\\d*|{{.*}})$"
        },
        "show": {
          "inputParameters.type": [
            "STOP_LOSS",
            "STOP_LOSS_LIMIT",
            "TAKE_PROFIT",
            "TAKE_PROFIT_LIMIT"
          ],
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder"
          ]
        }
      },
      {
        "label": "Iceberg Quantity",
        "name": "icebergQty",
        "type": "number",
        "optional": true,
        "show": {
          "inputParameters.type": [
            "LIMIT",
            "STOP_LOSS_LIMIT",
            "TAKE_PROFIT_LIMIT"
          ],
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder"
          ]
        }
      },
      {
        "label": "New Order Response Type",
        "name": "newOrderRespType",
        "type": "options",
        "description": "Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.",
        "options": [
          {
            "label": "ACK",
            "name": "ACK"
          },
          {
            "label": "RESULT",
            "name": "RESULT"
          },
          {
            "label": "FULL",
            "name": "FULL"
          }
        ],
        "optional": true,
        "show": {
          "actions.operation": [
            "postNewOrder",
            "postTestNewOrder"
          ]
        }
      },
      {
        "label": "Order Id",
        "name": "orderId",
        "type": "number",
        "description": "Order Id or Orig Client Order Id is mandatory.",
        "optional": {
          "inputParameters.origClientOrderId": "(.|\\s)*\\S(.|\\s)*"
        },
        "show": {
          "actions.operation": [
            "getOrder",
            "delOrder"
          ]
        }
      },
      {
        "label": "Orig Client Order Id",
        "name": "origClientOrderId",
        "type": "string",
        "description": "Order Id or Orig Client Order Id is mandatory.",
        "optional": {
          "inputParameters.orderId": "^(\\d+\\.?\\d*|{{.*}})$"
        },
        "show": {
          "actions.operation": [
            "getOrder",
            "delOrder"
          ]
        }
      },
      {
        "label": "Order Id",
        "name": "orderId",
        "type": "number",
        "description": "Get orders >= Order Id. Otherwise most recent orders are returned. Not needed if Start Time and/or End Time provided.",
        "optional": true,
        "show": {
          "actions.operation": [
            "getAllOrders",
            "getMyTrades"
          ]
        }
      },
      {
        "label": "Start Time",
        "name": "startTime",
        "type": "date",
        "optional": true,
        "show": {
          "actions.operation": [
            "getAllOrders",
            "getMyTrades"
          ]
        }
      },
      {
        "label": "End Time",
        "name": "endTime",
        "type": "date",
        "optional": true,
        "show": {
          "actions.operation": [
            "getAllOrders",
            "getMyTrades"
          ]
        }
      },
      {
        "label": "From Id",
        "name": "fromId",
        "type": "number",
        "optional": true,
        "description": "TradeId to fetch from. Default gets most recent trades.",
        "show": {
          "actions.operation": [
            "getMyTrades"
          ]
        }
      },
      {
        "label": "Limit",
        "name": "limit",
        "type": "number",
        "default": 500,
        "optional": true,
        "show": {
          "actions.operation": [
            "getAllOrders",
            "getMyTrades"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Binance/BinancePrivate.js"
  },
  {
    "loadMethods": {},
    "label": "Binance Public",
    "name": "binancePublic",
    "type": "action",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Binance/binance-logo.svg",
    "category": "Centralized Exchange",
    "description": "Binance Public API",
    "version": 1,
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "description": "Network to execute API: Test or Real",
        "options": [
          {
            "label": "TEST",
            "name": "test",
            "description": "Test network: https://testnet.binance.vision/"
          },
          {
            "label": "LIVE",
            "name": "live",
            "description": "Live network: https://api.binance.com/"
          }
        ],
        "default": "test"
      },
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Get Order Book",
            "name": "getOrderBook",
            "description": "Get order book."
          },
          {
            "label": "Get Exchange Information",
            "name": "getExchangeInfo",
            "description": "Get current exchange trading rules and symbol information."
          },
          {
            "label": "Get Recent Trades List",
            "name": "getRecentTradesList",
            "description": "Get recent trades."
          },
          {
            "label": "Get Compressed, Aggregate Trades",
            "name": "getAggTrades",
            "description": "Get compressed, aggregate trades. Trades that fill at the time, from the same taker order, with the same price will have the quantity aggregated."
          },
          {
            "label": "Get Kline/Candlestick data",
            "name": "getKlines",
            "description": "Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time."
          },
          {
            "label": "Get Current Average Price",
            "name": "getAvgPrice",
            "description": "Current average price for a symbol."
          },
          {
            "label": "Get 24hr Ticker Price Change Statistics",
            "name": "get24hrTickerPrice",
            "description": "24 hour rolling window price change statistics."
          },
          {
            "label": "Get Symbol Price Ticker",
            "name": "getTickerPrice",
            "description": "Latest price for a symbol or symbols."
          },
          {
            "label": "Get Symbol Order Book Ticker",
            "name": "getBookTicker",
            "description": "Best price/qty on the order book for a symbol or symbols."
          }
        ],
        "default": "getOrderBook"
      }
    ],
    "inputParameters": [
      {
        "label": "Symbol",
        "name": "symbol",
        "type": "asyncOptions",
        "optional": {
          "actions.operation": [
            "getExchangeInfo"
          ]
        },
        "loadMethod": "getSupportedSymbols",
        "show": {
          "actions.operation": [
            "getOrderBook",
            "getRecentTradesList",
            "getAggTrades",
            "getKlines",
            "getAvgPrice",
            "get24hrTickerPrice",
            "getTickerPrice",
            "getBookTicker",
            "getExchangeInfo"
          ]
        }
      },
      {
        "label": "Limit",
        "name": "limit",
        "type": "number",
        "default": 100,
        "optional": true,
        "show": {
          "actions.operation": [
            "getOrderBook",
            "getRecentTradesList",
            "getAggTrades",
            "getKlines"
          ]
        }
      },
      {
        "label": "From Id",
        "name": "fromId",
        "type": "number",
        "optional": true,
        "description": "ID to get aggregate trades from INCLUSIVE.",
        "show": {
          "actions.operation": [
            "getAggTrades"
          ]
        }
      },
      {
        "label": "Start Time",
        "name": "startTime",
        "type": "date",
        "optional": true,
        "show": {
          "actions.operation": [
            "getAggTrades",
            "getKlines"
          ]
        }
      },
      {
        "label": "End Time",
        "name": "endTime",
        "type": "date",
        "optional": true,
        "show": {
          "actions.operation": [
            "getAggTrades",
            "getKlines"
          ]
        }
      },
      {
        "label": "Interval",
        "name": "interval",
        "type": "options",
        "options": [
          {
            "label": "1 minute",
            "name": "1m"
          },
          {
            "label": "3 minutes",
            "name": "3m"
          },
          {
            "label": "5 minutes",
            "name": "5m"
          },
          {
            "label": "15 minutes",
            "name": "15m"
          },
          {
            "label": "30 minutes",
            "name": "30m"
          },
          {
            "label": "1 hour",
            "name": "1h"
          },
          {
            "label": "2 hours",
            "name": "2h"
          },
          {
            "label": "4 hours",
            "name": "4h"
          },
          {
            "label": "6 hours",
            "name": "6h"
          },
          {
            "label": "8 hours",
            "name": "8h"
          },
          {
            "label": "12 hours",
            "name": "12h"
          },
          {
            "label": "1 day",
            "name": "1d"
          },
          {
            "label": "3 day",
            "name": "3d"
          },
          {
            "label": "1 week",
            "name": "1w"
          },
          {
            "label": "1 month",
            "name": "1M"
          }
        ],
        "default": "5m",
        "show": {
          "actions.operation": [
            "getKlines"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Binance/BinancePublic.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "Blockchain Event Trigger",
    "name": "blockchainEventTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/BlockchainEvent/blockchainevent.svg",
    "type": "trigger",
    "category": "Blockchain Events",
    "version": 1,
    "description": "Start workflow whenever a specified event happened on chain",
    "incoming": 0,
    "outgoing": 1,
    "actions": [
      {
        "label": "Event Name",
        "name": "event",
        "type": "options",
        "options": [
          {
            "label": "New Block",
            "name": "block",
            "description": "Emitted when a new block is mined"
          },
          {
            "label": "Error",
            "name": "error",
            "description": "emitted on any error"
          },
          {
            "label": "New Transaction",
            "name": "pending",
            "description": "Emitted when a new transaction enters the memory pool. Only certain providers offer this event and may require running your own node for reliable results"
          },
          {
            "label": "Transaction Hash",
            "name": "txHash",
            "description": "Emitted when the transaction has been mined"
          }
        ],
        "default": "block"
      },
      {
        "label": "Transaction Hash",
        "name": "txHash",
        "type": "string",
        "default": "",
        "show": {
          "actions.event": [
            "txHash"
          ]
        }
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          },
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc",
            "parentGroup": "Binance Smart Chain"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet",
            "parentGroup": "Binance Smart Chain"
          },
          {
            "label": "Avalanche Mainnet",
            "name": "avalanche",
            "parentGroup": "Avalanche"
          },
          {
            "label": "Avalanche Testnet",
            "name": "avalanche-testnet",
            "parentGroup": "Avalanche"
          },
          {
            "label": "Solana Mainnet",
            "name": "solana",
            "parentGroup": "Solana"
          },
          {
            "label": "Solana Devnet",
            "name": "solana-devnet",
            "parentGroup": "Solana"
          },
          {
            "label": "Solana Testnet",
            "name": "solana-testnet",
            "parentGroup": "Solana"
          },
          {
            "label": "Fantom Mainnet",
            "name": "fantom",
            "parentGroup": "Fantom"
          },
          {
            "label": "Fantom Testnet",
            "name": "fantom-testnet",
            "parentGroup": "Fantom"
          },
          {
            "label": "Gnosis Mainnet",
            "name": "gnosis",
            "parentGroup": "Gnosis"
          },
          {
            "label": "Huobi ECO Chain Mainnet",
            "name": "heco",
            "parentGroup": "Heco"
          },
          {
            "label": "Harmony Mainnet",
            "name": "harmony",
            "parentGroup": "Harmony"
          },
          {
            "label": "Moonriver Mainnet",
            "name": "moonriver",
            "parentGroup": "MoonRiver"
          },
          {
            "label": "Moonbeam Mainnet",
            "name": "moonbeam",
            "parentGroup": "MoonBeam"
          },
          {
            "label": "Metis Mainnet",
            "name": "metis",
            "parentGroup": "Metis"
          },
          {
            "label": "Klaytn Baobab Testnet",
            "name": "klaytn-testnet",
            "parentGroup": "Klatyn"
          }
        ],
        "default": "homestead"
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/BlockchainEvent/BlockchainEvent.js"
  },
  {
    "label": "BscScan",
    "name": "BscScan",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/BscScan/bscscan.svg",
    "type": "action",
    "category": "Block Explorer",
    "version": 1,
    "description": "Perform Bscscan operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "Get Bnb Balance for a Single Address",
            "name": "getBnbBalance",
            "description": "Returns the Bnb balance of a given address."
          },
          {
            "label": "Get Bnb Balance for Multiple Addresses(separated by a comma)",
            "name": "getBnbBalanceMulti",
            "description": "Returns the Bnb balance of the addresses(each address separated by a comma) entered."
          },
          {
            "label": "Get transactions",
            "name": "getTransactions",
            "description": "Returns the list of transactions performed by an address, with optional pagination."
          },
          {
            "label": "Get internal transactions",
            "name": "getInternalTransactions",
            "description": "Returns the list of internal transactions performed by an address, with optional pagination."
          },
          {
            "label": "Get internal transactions by hash",
            "name": "getInternalTransactionsByHash",
            "description": "Returns the list of internal transactions performed within a transaction."
          },
          {
            "label": "Get internal transactions by block",
            "name": "getInternalTransactionsByBlock",
            "description": "Returns the list of internal transactions performed within a block range, with optional pagination."
          },
          {
            "label": "Get list of Blocks Validated by Address",
            "name": "getBlocksValidated",
            "description": "Returns the list of blocks validated by an address."
          },
          {
            "label": "Get Contract ABI",
            "name": "getAbi",
            "description": "Returns the contract Application Binary Interface ( ABI ) of a verified smart contract."
          },
          {
            "label": "Get Contract Source Code",
            "name": "getContractSourceCode",
            "description": "Returns the Solidity source code of a verified smart contract."
          },
          {
            "label": "Check Transaction Receipt Status",
            "name": "getTransactionReceiptStatus",
            "description": "Returns the status code of a transaction execution."
          },
          {
            "label": "Get BEP-20 Token Circulating Supply by ContractAddress",
            "name": "getBep20TokenCirculatingSupply",
            "description": "Returns the current circulating supply of a BEP-20 token. \n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get BEP20 Token Supply",
            "name": "getBep20TokenSupply",
            "description": "Returns the total supply of a BEP-20 token. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get BEP20 Token Balance",
            "name": "getBep20TokenBalance",
            "description": "Returns the current balance of a BEP-20 token of an address. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get Historical BEP-20 Token TotalSupply by ContractAddress & BlockNo [PRO]",
            "name": "getHistoricalBep20TokenSupply",
            "description": "Returns the historical amount of a BEP-20 token in circulation at a certain block height. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get Historical BEP-20 Token Account Balance by ContractAddress & BlockNo [PRO]",
            "name": "getHistoricalBep20TokenBalance",
            "description": "Returns the balance of a BEP-20 token of an address at a certain block height. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get Token Info [PRO]",
            "name": "getTokenInfo",
            "description": "Returns project information and social media links of an BEP-20/ERC-721 token."
          },
          {
            "label": "Get BNB Price",
            "name": "getBnbPrice",
            "description": "Returns the latest price of 1 BNB."
          },
          {
            "label": "Get Historical BNB Price [PRO]",
            "name": "getHistoricalBnbPrice",
            "description": "Returns the historical price of BNB."
          }
        ],
        "default": "getBnbBalance"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet"
          }
        ],
        "default": "homestead"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "BscScan API Key",
            "name": "bscscanApi"
          }
        ],
        "default": "bscscanApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "The address parameter(s) required",
        "show": {
          "actions.api": [
            "getBnbBalance",
            "getHistoricalBnbBalance",
            "getTransactions",
            "getInternalTransactions",
            "getBlocksValidated",
            "getAbi",
            "getContractSourceCode",
            "getBep20TokenBalance",
            "getHistoricalBep20TokenBalance"
          ]
        }
      },
      {
        "label": "Block Number",
        "name": "blockno",
        "type": "number",
        "description": "the block number to check balance for eg. 2000000",
        "show": {
          "actions.api": [
            "getHistoricalBnbBalance",
            "getHistoricalBep20TokenSupply",
            "getHistoricalBep20TokenBalance"
          ]
        }
      },
      {
        "label": "Start Block",
        "name": "startBlock",
        "type": "number",
        "optional": true,
        "description": "the block number to start searching for transactions",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        },
        "default": 0
      },
      {
        "label": "End Block",
        "name": "endBlock",
        "type": "number",
        "optional": true,
        "description": "the block number to stop searching for transactions",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        }
      },
      {
        "label": "Page",
        "name": "page",
        "type": "number",
        "optional": true,
        "description": "the page number, if pagination is enabled",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock",
            "getBlocksValidated"
          ]
        },
        "default": 1
      },
      {
        "label": "Offset",
        "name": "offset",
        "type": "number",
        "optional": true,
        "description": "the number of transactions displayed per page",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock",
            "getBlocksValidated"
          ]
        },
        "default": 10
      },
      {
        "label": "Sort By",
        "name": "sortBy",
        "type": "options",
        "optional": true,
        "options": [
          {
            "label": "Desc",
            "name": "desc"
          },
          {
            "label": "Asc",
            "name": "asc"
          }
        ],
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        },
        "default": "desc"
      },
      {
        "label": "Transaction Hash",
        "name": "txhash",
        "type": "string",
        "description": "the string representing the transaction hash to check for internal transactions",
        "show": {
          "actions.api": [
            "getInternalTransactionsByHash",
            "getTransactionReceiptStatus"
          ]
        }
      },
      {
        "label": "Block Type",
        "name": "blockType",
        "type": "options",
        "options": [
          {
            "label": "blocks",
            "name": "blocks"
          }
        ],
        "default": "blocks",
        "show": {
          "actions.api": [
            "getBlocksValidated"
          ]
        }
      },
      {
        "label": "Contract Address",
        "name": "contractAddress",
        "type": "string",
        "description": "the contract address of the BEP-20 token",
        "show": {
          "actions.api": [
            "getBep20TokenSupply",
            "getBep20TokenBalance",
            "getHistoricalBep20TokenSupply",
            "getHistoricalBep20TokenBalance",
            "getTokenInfo",
            "getBep20TokenCirculatingSupply"
          ]
        }
      },
      {
        "label": "Tag",
        "name": "tag",
        "type": "options",
        "options": [
          {
            "label": "latest",
            "name": "latest"
          }
        ],
        "default": "latest",
        "show": {
          "actions.api": [
            "getBep20TokenBalance"
          ]
        }
      },
      {
        "label": "Start Time",
        "name": "startTime",
        "type": "date",
        "optional": true,
        "show": {
          "actions.api": [
            "getHistoricalBnbPrice"
          ]
        }
      },
      {
        "label": "End Time",
        "name": "endTime",
        "type": "date",
        "optional": true,
        "show": {
          "actions.api": [
            "getHistoricalBnbPrice"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/BscScan/Bscscan.js"
  },
  {
    "loadMethods": {},
    "label": "ChainLink",
    "name": "chainLink",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ChainLink/chainlink.svg",
    "type": "action",
    "category": "Decentralized Oracle Network",
    "version": 1,
    "description": "Execute ChainLink operations such as Data Feeds, Randomness, Oracles.",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Get Price Feeds",
            "name": "getPriceFeeds",
            "description": "Get real-world market prices of assets using ChainLink Oracle"
          },
          {
            "label": "Get Proof of Reserve",
            "name": "getProofReserve",
            "description": "Provide the status of the reserves for several assets"
          },
          {
            "label": "Get NFT Floor Pricing",
            "name": "getNFTFloorPricing",
            "description": "Get the lowest price of an NFT in a collection using ChainLink Oracle, ONLY available on Goerli"
          }
        ],
        "default": "getPriceFeeds"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum",
            "hide": {
              "actions.operation": [
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum",
            "hide": {
              "actions.operation": [
                "getProofReserve"
              ]
            }
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Avalanche Mainnet",
            "name": "avalanche",
            "parentGroup": "Avalanche",
            "hide": {
              "actions.operation": [
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Avalanche Testnet",
            "name": "avalanche-testnet",
            "parentGroup": "Avalanche",
            "hide": {
              "actions.operation": [
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc",
            "parentGroup": "Binance Smart Chain",
            "hide": {
              "actions.operation": [
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet",
            "parentGroup": "Binance Smart Chain",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Gnosis Mainnet",
            "name": "gnosis",
            "parentGroup": "Gnosis",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Huobi ECO Chain Mainnet",
            "name": "heco",
            "parentGroup": "Heco",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Fantom Mainnet",
            "name": "fantom",
            "parentGroup": "Fantom",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Fantom Testnet",
            "name": "fantom-testnet",
            "parentGroup": "Fantom",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Solana Mainnet",
            "name": "solana",
            "parentGroup": "Solana",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Solana Devnet",
            "name": "solana-devnet",
            "parentGroup": "Solana",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Harmony Mainnet",
            "name": "harmony",
            "parentGroup": "Harmony",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Moonriver Mainnet",
            "name": "moonriver",
            "parentGroup": "Moonriver",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Moonbeam Mainnet",
            "name": "moonbeam",
            "parentGroup": "Moonbeam",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Metis Mainnet",
            "name": "metis",
            "parentGroup": "Metis",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          },
          {
            "label": "Klaytn Baobab Testnet",
            "name": "klaytn-testnet",
            "parentGroup": "Klaytn Baobab testnet",
            "hide": {
              "actions.operation": [
                "getProofReserve",
                "getNFTFloorPricing"
              ]
            }
          }
        ]
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Pair",
        "name": "pair",
        "type": "asyncOptions",
        "loadMethod": "getPairAddress",
        "show": {
          "actions.operation": [
            "getPriceFeeds"
          ]
        }
      },
      {
        "label": "Reserve",
        "name": "reserve",
        "type": "asyncOptions",
        "loadMethod": "getReserveAddress",
        "show": {
          "actions.operation": [
            "getProofReserve"
          ]
        }
      },
      {
        "label": "NFT Collection",
        "name": "nftCollection",
        "type": "asyncOptions",
        "loadMethod": "getNftCollection",
        "show": {
          "actions.operation": [
            "getNFTFloorPricing"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ChainLink/ChainLink.js"
  },
  {
    "loadMethods": {},
    "label": "Chainlink Function Webhook",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ChainLink/chainlink.svg",
    "name": "chainLinkFunctionWebhook",
    "type": "webhook",
    "category": "Decentralized Oracle Network",
    "version": 1,
    "description": "Start workflow whenever chainlink function webhook is called",
    "incoming": 0,
    "outgoing": 1,
    "inputParameters": [
      {
        "label": "HTTP Method",
        "name": "httpMethod",
        "type": "options",
        "options": [
          {
            "label": "GET",
            "name": "GET"
          },
          {
            "label": "POST",
            "name": "POST"
          }
        ],
        "default": "GET",
        "description": "The HTTP method to listen to."
      },
      {
        "label": "Authorization",
        "name": "authorization",
        "type": "options",
        "options": [
          {
            "label": "API",
            "name": "headerAuth",
            "description": "Webhook header must contains \"X-API-KEY\" with matching key"
          },
          {
            "label": "None",
            "name": "none"
          }
        ],
        "default": "none",
        "description": "The way to authorize incoming webhook."
      },
      {
        "label": "API key",
        "name": "apiKey",
        "type": "asyncOptions",
        "description": "Incoming call must consists header \"x-api-key\" with matching API key. You can create new key from the dashboard",
        "loadMethod": "getAPIKeys",
        "show": {
          "inputParameters.authorization": [
            "headerAuth"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ChainLink/ChainLinkFunctionWebhook.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "Contract Event Trigger",
    "name": "ContractEventTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ContractEventTrigger/contract-event-trigger.svg",
    "type": "trigger",
    "category": "Smart Contract",
    "version": 1,
    "description": "Start workflow whenever the specified contract event happened",
    "incoming": 0,
    "outgoing": 1,
    "actions": [
      {
        "label": "Select Contract",
        "name": "contract",
        "type": "asyncOptions",
        "loadFromDbCollections": [
          "Contract"
        ],
        "loadMethod": "getContracts"
      },
      {
        "label": "Event",
        "name": "event",
        "type": "asyncOptions",
        "loadMethod": "getEvents"
      }
    ],
    "networks": [
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ContractEventTrigger/ContractEventTrigger.js"
  },
  {
    "loadMethods": {},
    "label": "Azure OpenAI",
    "name": "azureOpenAI",
    "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Microsoft_Azure.svg/1200px-Microsoft_Azure.svg.png",
    "type": "trigger",
    "category": "LLMs",
    "version": 1,
    "description": "Wrapper around Azure OpenAI large language models",
    "incoming": 0,
    "outgoing": 1,
    "actions": [
        {
            "label": "Select Operation",
            "name": "operation",
            "type": "options",
            "options": [
                { "label": "Generate Text", "name": "textCompletion" }
            ]
        }
    ],
    "credentials": [
        {
            "label": "Connect Credential",
            "name": "credentialMethod",
            "type": "options",
            "options": [
                {
                    "label": "Bearer Token Auth",
                    "name": "azureOpenAIApiKey"
                }
            ],
            "default": "azureOpenAIApiKey"
        }
    ],
    "inputParameters": [
        {
            "label": "Model Name",
            "name": "modelName",
            "type": "string",
            "default": "text-davinci-003"
        },
        {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "step": 0.1,
            "default": 0.9,
            "optional": true
        },
        {
            "label": "Max Tokens",
            "name": "maxTokens",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true
        },
        {
            "label": "Top Probability",
            "name": "topP",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true
        },
        {
            "label": "Frequency Penalty",
            "name": "frequencyPenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true
        },
        {
            "label": "Presence Penalty",
            "name": "presencePenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true
        },
        {
            "label": "Timeout",
            "name": "timeout",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true
        },
        {
            "label": "Best Of",
            "name": "bestOf",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true
        }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/AzureOpenAI/azureopenai.js"
},
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "Zapier API Trigger",
    "name": "ZapierAPITrigger",
    "icon": "https://cdn.iconscout.com/icon/free/png-256/free-zapier-3629179-3030319.png",
    "type": "action",
    "category": "Integrations",
    "version": 1,
    "description": "Start workflow based on Zapier API events",
    "incoming": 0,
    "outgoing": 1,
    "actions": [
      {
        "label": "Select Endpoint",
        "name": "endpoint",
        "type": "options",
        "options": [
          {
            "label": "Get Apps [v1]",
            "name": "apps/v1"
          },
          {
            "label": "Get Apps [v2]",
            "name": "apps/v2"
          },
          {
            "label": "Get Categories",
            "name": "categories"
          },
          {
            "label": "Create Account",
            "name": "accounts"
          },
          {
            "label": "User Profile",
            "name": "accounts/profile"
          },
          {
            "label": "Get Zap Templates",
            "name": "zap-templates"
          },
          {
            "label": "Create a Zap",
            "name": "zaps"
          },
          {
            "label": "Get Zaps [v1]",
            "name": "zaps/v1"
          },
          {
            "label": "Get Zaps [v2]",
            "name": "zaps/v2"
          },
          {
            "label": "Get Actions",
            "name": "actions"
          },
          {
            "label": "Get Input Fields",
            "name": "actions/input-fields"
          },
          {
            "label": "Get Output Fields",
            "name": "actions/output-fields"
          },
          {
            "label": "Get Choices",
            "name": "actions/choices"
          },
          {
            "label": "Step Test",
            "name": "actions/step-test"
          },
          {
            "label": "Get Authentications",
            "name": "authentications"
          },
          {
            "label": "Create Authentication",
            "name": "authentications"
          }
        ]
      }
    ],
    "inputParameters": [
      {
        "label": "Payload",
        "name": "payload",
        "type": "json",
        "placeholder": "{\"key\": \"value\"}",
        "optional": true
      },
      {
        "label": "Query Parameters",
        "name": "queryParams",
        "type": "json",
        "placeholder": "{\"key\": \"value\"}",
        "optional": true
      }
    ],
    "credentials": [
      {
        "label": "Authorization",
        "name": "credentialMethod",
        "type": "string",
        "options": [
          {
            "label": "Bearer Token Auth",
            "name": "zapierBearerTokenAuth"
          }
        ],
        "default": "zapierBearerTokenAuth"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Zapier/zapier.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "Contract Function Trigger",
    "name": "ContractFunctionTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ContractFunctionTrigger/contract-function-trigger.svg",
    "type": "trigger",
    "category": "Smart Contract",
    "version": 1,
    "description": "Triggers whenever the specified view function return value changes",
    "incoming": 0,
    "outgoing": 1,
    "actions": [
      {
        "label": "Select Contract",
        "name": "contract",
        "type": "asyncOptions",
        "loadFromDbCollections": [
          "Contract"
        ],
        "loadMethod": "getContracts"
      },
      {
        "label": "View Function",
        "name": "function",
        "type": "asyncOptions",
        "loadMethod": "getViewFunctions"
      },
      {
        "label": "Function Parameters",
        "name": "funcParameters",
        "type": "json",
        "placeholder": "[\"param1\", \"param2\"]",
        "description": "Function parameters in array. Ex: [\"param1\", \"param2\"]",
        "optional": true
      },
      {
        "label": "Polling Time",
        "name": "pollTime",
        "type": "options",
        "options": [
          {
            "label": "Every 15 secs",
            "name": "15s"
          },
          {
            "label": "Every 30 secs",
            "name": "30s"
          },
          {
            "label": "Every 1 min",
            "name": "1min"
          },
          {
            "label": "Every 5 min",
            "name": "5min"
          },
          {
            "label": "Every 10 min",
            "name": "10min"
          }
        ],
        "default": "30s"
      }
    ],
    "networks": [
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ContractFunctionTrigger/ContractFunctionTrigger.js"
  },
  {
    "loadMethods": {},
    "label": "Create Token",
    "name": "createToken",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/CreateERC20Token/erc20.svg",
    "type": "action",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Create new cryptocurrency token (ERC20)",
    "incoming": 1,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          },
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc",
            "parentGroup": "Binance Smart Chain"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet",
            "parentGroup": "Binance Smart Chain"
          }
        ],
        "default": "goerli"
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet account to create ERC20 Token.",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets"
      },
      {
        "label": "Token Name",
        "name": "tokenName",
        "type": "string",
        "default": "",
        "placeholder": "MyToken"
      },
      {
        "label": "Token Symbol",
        "name": "tokenSymbol",
        "type": "string",
        "default": "",
        "placeholder": "MYT"
      },
      {
        "label": "Token Supply",
        "name": "tokenSupply",
        "type": "number",
        "default": 1000,
        "description": "Initialy supply of the token"
      },
      {
        "label": "Solidity Version",
        "name": "solidityVersion",
        "type": "options",
        "description": "Soldity version to compile code for token creation",
        "options": [
          {
            "label": "0.8.10",
            "name": "0.8.10"
          },
          {
            "label": "0.8.11",
            "name": "0.8.11"
          },
          {
            "label": "0.8.12",
            "name": "0.8.12"
          },
          {
            "label": "0.8.13",
            "name": "0.8.13"
          },
          {
            "label": "0.8.14",
            "name": "0.8.14"
          },
          {
            "label": "0.8.15",
            "name": "0.8.15"
          }
        ],
        "default": "0.8.15"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/CreateERC20Token/CreateERC20Token.js"
  },
  {
    "loadMethods": {},
    "label": "Create NFT",
    "name": "createNFT",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/CreateNFT/createNFT.png",
    "type": "action",
    "category": "NFT",
    "version": 1,
    "description": "Create new NFT (ERC1155)",
    "incoming": 1,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          },
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc",
            "parentGroup": "Binance Smart Chain"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet",
            "parentGroup": "Binance Smart Chain"
          }
        ],
        "default": "goerli"
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet account to create NFT.",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets"
      },
      {
        "label": "NFT Metadata",
        "name": "nftMetadata",
        "type": "options",
        "options": [
          {
            "label": "Ipfs Hash/Pin",
            "name": "ipfsHash",
            "description": "Ipfs hash/pin of the folder that contains the json metadata files"
          },
          {
            "label": "URL",
            "name": "url",
            "description": "URL of the folder that contains the json metadata files. Ex: https://ipfs.io/ipfs/QmSPiKckfBDhw1pXdjHvU4jndN5pn4ZbKHeA9Nnn622C7U"
          }
        ],
        "description": "Fetch metadata from a url OR using Ipfs hash/pin"
      },
      {
        "label": "NFT Metadata URL",
        "name": "nftMetadataJsonUrl",
        "type": "string",
        "placeholder": "https://ipfs.io/ipfs/QmSPiKckfBDhw1pXdjHvU4jndN5pn4ZbKHeA9Nnn622C7U",
        "description": "URL of the folder that contains the json metadata files",
        "show": {
          "inputParameters.nftMetadata": [
            "url"
          ]
        }
      },
      {
        "label": "NFT Metadata Ipfs Hash/Pin",
        "name": "nftMetadataHash",
        "type": "string",
        "placeholder": "QmexuwvmmtwsazQ7LK93SyVdFeYRnDbjET414y2xXiToM4",
        "description": "Ipfs hash/pin of the folder that contains the json metadata files",
        "show": {
          "inputParameters.nftMetadata": [
            "ipfsHash"
          ]
        }
      },
      {
        "label": "Contract Name",
        "name": "contractName",
        "type": "string",
        "default": "",
        "placeholder": "MyContract",
        "optional": true
      },
      {
        "label": "Collection Name",
        "name": "collectionName",
        "type": "string",
        "default": "",
        "placeholder": "MyCollection",
        "optional": true
      },
      {
        "label": "Solidity Version",
        "name": "solidityVersion",
        "type": "options",
        "description": "Soldity version to compile code for NFT creation",
        "options": [
          {
            "label": "0.8.10",
            "name": "0.8.10"
          },
          {
            "label": "0.8.11",
            "name": "0.8.11"
          },
          {
            "label": "0.8.12",
            "name": "0.8.12"
          },
          {
            "label": "0.8.13",
            "name": "0.8.13"
          },
          {
            "label": "0.8.14",
            "name": "0.8.14"
          },
          {
            "label": "0.8.15",
            "name": "0.8.15"
          }
        ],
        "default": "0.8.15"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/CreateNFT/CreateNFT.js"
  },
  {
    "label": "Discord",
    "name": "discord",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Discord/discord.svg",
    "type": "action",
    "category": "Communication",
    "version": 1,
    "description": "Post message in Discord channel",
    "incoming": 1,
    "outgoing": 1,
    "inputParameters": [
      {
        "label": "Webhook URL",
        "name": "webhookUrl",
        "type": "string",
        "default": "",
        "description": "Webhook URL for the channel. Learn how to get: https://www.youtube.com/watch?v=K8vgRWZnSZw"
      },
      {
        "label": "Content",
        "description": "Message contents (up to 2000 characters)",
        "name": "content",
        "type": "string",
        "default": ""
      },
      {
        "label": "Username",
        "name": "username",
        "type": "string",
        "default": "",
        "description": "Override the default username of the webhook",
        "optional": true
      },
      {
        "label": "Avatar URL",
        "name": "avatarUrl",
        "type": "string",
        "default": "",
        "description": "Override the default avatar of the webhook",
        "optional": true
      },
      {
        "label": "TTS",
        "name": "tts",
        "type": "boolean",
        "default": false,
        "description": "Send as Text To Speech message",
        "optional": true
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Discord/Discord.js"
  },
  {
    "loadMethods": {},
    "label": "ERC20 Function",
    "name": "ERC20Function",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ERC20Function/erc20.svg",
    "type": "action",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Execute ERC20 function such as deposit, withdraw, get balance, etc",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Function",
        "name": "function",
        "type": "options",
        "options": [
          {
            "name": "deposit",
            "label": "Deposit",
            "description": "Deposit ETH into ERC20 token"
          },
          {
            "name": "withdraw",
            "label": "Withdraw",
            "description": "Withdraw ETH from ERC20 token"
          },
          {
            "name": "allowance",
            "label": "Get Allowance",
            "description": "Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom. This is zero by default."
          },
          {
            "name": "approve",
            "label": "Approve",
            "description": "Sets amount as the allowance of spender over the caller’s tokens."
          },
          {
            "name": "balanceOf",
            "label": "Get Balance",
            "description": "Returns the amount of tokens owned by account"
          },
          {
            "name": "decimals",
            "label": "Get ERC20 Decimals",
            "description": "Returns the decimals of ERC20"
          },
          {
            "name": "name",
            "label": "Get ERC20 Name",
            "description": "Returns the name of ERC20"
          },
          {
            "name": "symbol",
            "label": "Get ERC20 Symbol",
            "description": "Returns the symbol of ERC20"
          },
          {
            "name": "totalSupply",
            "label": "Get ERC20 Total Supply",
            "description": "Returns the total supply of ERC20"
          },
          {
            "name": "transferFrom",
            "label": "Transfer From",
            "description": "Moves amount tokens from sender to recipient using the allowance mechanism. Amount is then deducted from the caller’s allowance."
          }
        ]
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          }
        ]
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "ERC20 Token",
        "name": "erc20Token",
        "type": "asyncOptions",
        "description": "ERC20 Token to send/transfer",
        "loadMethod": "getTokens"
      },
      {
        "label": "Custom ERC20 Address",
        "name": "customERC20TokenAddress",
        "type": "string",
        "description": "ERC20 Token Address",
        "show": {
          "inputParameters.erc20Token": [
            "customERC20Address"
          ]
        }
      },
      {
        "label": "Spender Address",
        "name": "spender",
        "type": "string",
        "show": {
          "actions.function": [
            "approve"
          ]
        }
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "show": {
          "actions.function": [
            "approve"
          ]
        }
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet to execute approve function",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.function": [
            "approve"
          ]
        }
      },
      {
        "label": "Owner Address",
        "name": "owner",
        "type": "string",
        "show": {
          "actions.function": [
            "allowance"
          ]
        }
      },
      {
        "label": "Spender Address",
        "name": "spender",
        "type": "string",
        "show": {
          "actions.function": [
            "allowance"
          ]
        }
      },
      {
        "label": "Account Address",
        "name": "account",
        "type": "string",
        "description": "Account address to check for remaining amount",
        "show": {
          "actions.function": [
            "balanceOf"
          ]
        }
      },
      {
        "label": "From Address",
        "name": "from",
        "type": "string",
        "description": "Account address to transfer the token",
        "show": {
          "actions.function": [
            "transferFrom"
          ]
        }
      },
      {
        "label": "To Address",
        "name": "to",
        "type": "string",
        "description": "Account address to receive the token",
        "show": {
          "actions.function": [
            "transferFrom"
          ]
        }
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "description": "Amount of token transfer",
        "show": {
          "actions.function": [
            "transferFrom"
          ]
        }
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet to move amount tokens from sender to recipient using the allowance mechanism",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.function": [
            "transferFrom"
          ]
        }
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "description": "Amount of token to deposit",
        "show": {
          "actions.function": [
            "deposit"
          ]
        }
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet to deposit ETH into ERC20 Token",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.function": [
            "deposit"
          ]
        }
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "description": "Amount of token to withdraw",
        "show": {
          "actions.function": [
            "withdraw"
          ]
        }
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Withdraw ERC20 Token to this wallet",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.function": [
            "withdraw"
          ]
        }
      },
      {
        "label": "Gas Limit",
        "name": "gasLimit",
        "type": "number",
        "optional": true,
        "placeholder": "100000",
        "description": "Maximum price you are willing to pay when sending a transaction",
        "show": {
          "actions.function": [
            "approve",
            "transferFrom",
            "deposit"
          ]
        }
      },
      {
        "label": "Max Fee per Gas",
        "name": "maxFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "200",
        "description": "The maximum price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>",
        "show": {
          "actions.function": [
            "approve",
            "transferFrom",
            "deposit"
          ]
        }
      },
      {
        "label": "Max Priority Fee per Gas",
        "name": "maxPriorityFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "5",
        "description": "The priority fee price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>",
        "show": {
          "actions.function": [
            "approve",
            "transferFrom",
            "deposit"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ERC20Function/ERC20Function.js"
  },
  {
    "loadMethods": {},
    "label": "ERC20 Transfer",
    "name": "ERC20Transfer",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ERC20Transfer/erc20.svg",
    "type": "action",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Send/Transfer ERC20 to an address",
    "incoming": 1,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          }
        ]
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "ERC20 Token",
        "name": "erc20Token",
        "type": "asyncOptions",
        "description": "ERC20 Token to send/transfer",
        "loadMethod": "getTokens"
      },
      {
        "label": "Custom ERC20 Address",
        "name": "customERC20TokenAddress",
        "type": "string",
        "description": "ERC20 Token Address",
        "show": {
          "inputParameters.erc20Token": [
            "customERC20Address"
          ]
        }
      },
      {
        "label": "Wallet To Transfer",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet account to send/transfer ERC20",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets"
      },
      {
        "label": "Address To Receive",
        "name": "address",
        "type": "string",
        "default": "",
        "description": "Address to receive ERC20"
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "description": "Amount of ERC20 to transfer"
      },
      {
        "label": "Gas Limit",
        "name": "gasLimit",
        "type": "number",
        "optional": true,
        "placeholder": "100000",
        "description": "Maximum price you are willing to pay when sending a transaction"
      },
      {
        "label": "Max Fee per Gas",
        "name": "maxFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "200",
        "description": "The maximum price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      },
      {
        "label": "Max Priority Fee per Gas",
        "name": "maxPriorityFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "5",
        "description": "The priority fee price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ERC20Transfer/ERC20Transfer.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "ERC20 Transfer Trigger",
    "name": "ERC20TransferTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ERC20TransferTrigger/erc20.svg",
    "type": "trigger",
    "category": "Cryptocurrency",
    "version": 1.1,
    "description": "Start workflow whenever an ERC20 transfer event happened",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          }
        ],
        "default": "homestead"
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "ERC20 Token",
        "name": "erc20Token",
        "type": "asyncOptions",
        "description": "ERC20 Token to send/transfer",
        "loadMethod": "getTokens",
        "default": "anyERC20Address"
      },
      {
        "label": "Custom ERC20 Address",
        "name": "customERC20TokenAddress",
        "type": "string",
        "description": "ERC20 Token Address",
        "show": {
          "inputParameters.erc20Token": [
            "customERC20Address"
          ]
        }
      },
      {
        "label": "Direction",
        "name": "direction",
        "type": "options",
        "options": [
          {
            "label": "From",
            "name": "from",
            "description": "Transfer from wallet address"
          },
          {
            "label": "To",
            "name": "to",
            "description": "Transfer to wallet address"
          },
          {
            "label": "Both From and To",
            "name": "fromTo",
            "description": "Transfer from a wallet address to another wallet address"
          }
        ],
        "default": ""
      },
      {
        "label": "From Wallet Address",
        "name": "fromAddress",
        "type": "string",
        "default": "",
        "show": {
          "inputParameters.direction": [
            "from",
            "fromTo"
          ]
        }
      },
      {
        "label": "To Wallet Address",
        "name": "toAddress",
        "type": "string",
        "default": "",
        "show": {
          "inputParameters.direction": [
            "to",
            "fromTo"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ERC20TransferTrigger/ERC20TransferTrigger.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "ETH Balance Trigger",
    "name": "ETHBalanceTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ETHBalanceTrigger/ethereum.svg",
    "type": "trigger",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Start workflow whenever ETH balance in wallet changes",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          }
        ],
        "default": "homestead"
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Wallet Address",
        "name": "address",
        "type": "string",
        "default": ""
      },
      {
        "label": "Trigger Condition",
        "name": "triggerCondition",
        "type": "options",
        "options": [
          {
            "label": "When balance increased",
            "name": "increase"
          },
          {
            "label": "When balance decreased",
            "name": "decrease"
          }
        ],
        "default": "increase"
      },
      {
        "label": "Polling Time",
        "name": "pollTime",
        "type": "options",
        "options": [
          {
            "label": "Every 15 secs",
            "name": "15s"
          },
          {
            "label": "Every 30 secs",
            "name": "30s"
          },
          {
            "label": "Every 1 min",
            "name": "1min"
          },
          {
            "label": "Every 5 min",
            "name": "5min"
          },
          {
            "label": "Every 10 min",
            "name": "10min"
          }
        ],
        "default": "30s"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ETHBalanceTrigger/ETHBalanceTrigger.js"
  },
  {
    "loadMethods": {},
    "label": "ETH Transfer",
    "name": "ETHTransfer",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ETHTransfer/ethereum.svg",
    "type": "action",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Send/Transfer ETH to an address",
    "incoming": 1,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          }
        ]
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Wallet To Transfer",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet account to send/transfer ETH",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets"
      },
      {
        "label": "Address To Receive",
        "name": "address",
        "type": "string",
        "default": "",
        "description": "Address to receive ETH. Can be an ens name: username.eth"
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "description": "Amount of ETH to transfer"
      },
      {
        "label": "Gas Limit",
        "name": "gasLimit",
        "type": "number",
        "optional": true,
        "placeholder": "100000",
        "description": "Maximum price you are willing to pay when sending a transaction"
      },
      {
        "label": "Max Fee per Gas",
        "name": "maxFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "200",
        "description": "The maximum price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      },
      {
        "label": "Max Priority Fee per Gas",
        "name": "maxPriorityFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "5",
        "description": "The priority fee price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ETHTransfer/ETHTransfer.js"
  },
  {
    "label": "Send Email",
    "name": "emailSend",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/EmailSend/emailsend.svg",
    "type": "action",
    "category": "Communication",
    "version": 1,
    "description": "Send email to single or multiple receipients",
    "incoming": 1,
    "outgoing": 1,
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Email Send Smtp",
            "name": "emailSendSmtp"
          }
        ],
        "default": "emailSendSmtp"
      }
    ],
    "inputParameters": [
      {
        "label": "From Email",
        "name": "fromEmail",
        "type": "string",
        "default": "",
        "description": "Email address of the sender."
      },
      {
        "label": "To Email",
        "name": "toEmail",
        "type": "string",
        "default": "",
        "description": "Email address of the recipient. Multiple emails can be comma-separated.",
        "optional": true
      },
      {
        "label": "CC Email",
        "name": "ccEmail",
        "type": "string",
        "default": "",
        "description": "Email address of CC recipient. Multiple emails can be comma-separated.",
        "optional": true
      },
      {
        "label": "Subject",
        "name": "subject",
        "type": "string",
        "default": "",
        "description": "Subject line of the email."
      },
      {
        "label": "Body - Plain Text",
        "name": "text",
        "type": "string",
        "rows": 5,
        "default": "",
        "description": "Plain text message of email.",
        "optional": true
      },
      {
        "label": "Body - HTML",
        "name": "html",
        "type": "string",
        "rows": 5,
        "default": "",
        "description": "HTML text message of email.",
        "optional": true
      },
      {
        "label": "Ignore SSL",
        "name": "ignoreSSL",
        "type": "boolean",
        "default": false,
        "description": "Send email regardless of SSL validation.",
        "optional": true
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/EmailSend/EmailSend.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "label": "Email Trigger",
    "name": "emailTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/EmailTrigger/email-trigger.svg",
    "type": "trigger",
    "category": "Communication",
    "version": 1,
    "description": "Start workflow whenever a new email is received",
    "incoming": 0,
    "outgoing": 1,
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Imap",
            "name": "imap"
          }
        ],
        "default": "imap"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/EmailTrigger/EmailTrigger.js"
  },
  {
    "label": "Etherscan",
    "name": "etherscan",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Etherscan/etherscan.svg",
    "type": "action",
    "category": "Block Explorer",
    "version": 1,
    "description": "Perform Etherscan operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "Get Ether Balance for a Single Address",
            "name": "getEtherBalance",
            "description": "Returns the Ether balance of a given address."
          },
          {
            "label": "Get Ether Balance for Multiple Addresses(separated by a comma)",
            "name": "getEtherBalanceMulti",
            "description": "Returns the Ether balance of the addresses(each address separated by a comma) entered."
          },
          {
            "label": "Get transactions",
            "name": "getTransactions",
            "description": "Returns the list of transactions performed by an address, with optional pagination."
          },
          {
            "label": "Get internal transactions",
            "name": "getInternalTransactions",
            "description": "Returns the list of internal transactions performed by an address, with optional pagination."
          },
          {
            "label": "Get internal transactions by hash",
            "name": "getInternalTransactionsByHash",
            "description": "Returns the list of internal transactions performed within a transaction."
          },
          {
            "label": "Get internal transactions by block",
            "name": "getInternalTransactionsByBlock",
            "description": "Returns the list of internal transactions performed within a block range, with optional pagination."
          },
          {
            "label": "Get list of Blocks Validated by Address",
            "name": "getBlocksValidated",
            "description": "Returns the list of blocks validated by an address."
          },
          {
            "label": "Get Contract ABI",
            "name": "getAbi",
            "description": "Returns the contract Application Binary Interface ( ABI ) of a verified smart contract."
          },
          {
            "label": "Get Contract Source Code",
            "name": "getContractSourceCode",
            "description": "Returns the Solidity source code of a verified smart contract."
          },
          {
            "label": "Check Transaction Receipt Status",
            "name": "getTransactionReceiptStatus",
            "description": "Returns the status code of a transaction execution."
          },
          {
            "label": "Get ERC20 Token Supply",
            "name": "getErc20TokenSupply",
            "description": "Returns the total supply of a ERC-20 token. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get ERC20 Token Balance",
            "name": "getErc20TokenBalance",
            "description": "Returns the current balance of a ERC-20 token of an address. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get Historical ERC-20 Token TotalSupply by ContractAddress & BlockNo [PRO]",
            "name": "getHistoricalErc20TokenSupply",
            "description": "Returns the historical amount of a ERC-20 token in circulation at a certain block height. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get Historical ERC-20 Token Account Balance by ContractAddress & BlockNo [PRO]",
            "name": "getHistoricalErc20TokenBalance",
            "description": "Returns the balance of a ERC-20 token of an address at a certain block height. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get Token Info [PRO]",
            "name": "getTokenInfo",
            "description": "Returns project information and social media links of an ERC-20/ERC-721 token."
          },
          {
            "label": "Get ETHER Price",
            "name": "getEtherPrice",
            "description": "Returns the latest price of 1 ETHER."
          },
          {
            "label": "Get Historical ETHER Price [PRO]",
            "name": "getHistoricalEtherPrice",
            "description": "Returns the historical price of ETHER."
          }
        ],
        "default": "getEtherBalance"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead"
          },
          {
            "label": "Goerli",
            "name": "goerli"
          }
        ],
        "default": "homestead"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Etherscan API Key",
            "name": "etherscanApi"
          }
        ],
        "default": "etherscanApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "The address parameter(s) required",
        "show": {
          "actions.api": [
            "getEtherBalance",
            "getHistoricalEtherBalance",
            "getTransactions",
            "getInternalTransactions",
            "getBlocksValidated",
            "getAbi",
            "getContractSourceCode",
            "getErc20TokenBalance",
            "getHistoricalErc20TokenBalance"
          ]
        }
      },
      {
        "label": "Block Number",
        "name": "blockno",
        "type": "number",
        "description": "the block number to check balance for eg. 2000000",
        "show": {
          "actions.api": [
            "getHistoricalEtherBalance",
            "getHistoricalErc20TokenSupply",
            "getHistoricalErc20TokenBalance"
          ]
        }
      },
      {
        "label": "Start Block",
        "name": "startBlock",
        "type": "number",
        "optional": true,
        "description": "the block number to start searching for transactions",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        },
        "default": 0
      },
      {
        "label": "End Block",
        "name": "endBlock",
        "type": "number",
        "optional": true,
        "description": "the block number to stop searching for transactions",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        }
      },
      {
        "label": "Page",
        "name": "page",
        "type": "number",
        "optional": true,
        "description": "the page number, if pagination is enabled",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock",
            "getBlocksValidated"
          ]
        },
        "default": 1
      },
      {
        "label": "Offset",
        "name": "offset",
        "type": "number",
        "optional": true,
        "description": "the number of transactions displayed per page",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock",
            "getBlocksValidated"
          ]
        },
        "default": 10
      },
      {
        "label": "Sort By",
        "name": "sortBy",
        "type": "options",
        "optional": true,
        "options": [
          {
            "label": "Desc",
            "name": "desc"
          },
          {
            "label": "Asc",
            "name": "asc"
          }
        ],
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        },
        "default": "desc"
      },
      {
        "label": "Transaction Hash",
        "name": "txhash",
        "type": "string",
        "description": "the string representing the transaction hash to check for internal transactions",
        "show": {
          "actions.api": [
            "getInternalTransactionsByHash",
            "getTransactionReceiptStatus"
          ]
        }
      },
      {
        "label": "Block Type",
        "name": "blockType",
        "type": "options",
        "options": [
          {
            "label": "blocks",
            "name": "blocks"
          }
        ],
        "default": "blocks",
        "show": {
          "actions.api": [
            "getBlocksValidated"
          ]
        }
      },
      {
        "label": "Contract Address",
        "name": "contractAddress",
        "type": "string",
        "description": "the contract address of the ERC-20 token",
        "show": {
          "actions.api": [
            "getErc20TokenSupply",
            "getErc20TokenBalance",
            "getHistoricalErc20TokenSupply",
            "getHistoricalErc20TokenBalance",
            "getTokenInfo"
          ]
        }
      },
      {
        "label": "Tag",
        "name": "tag",
        "type": "options",
        "options": [
          {
            "label": "latest",
            "name": "latest"
          }
        ],
        "default": "latest",
        "show": {
          "actions.api": [
            "getErc20TokenBalance"
          ]
        }
      },
      {
        "label": "Start Time",
        "name": "startTime",
        "type": "date",
        "optional": true,
        "show": {
          "actions.api": [
            "getHistoricalEtherPrice"
          ]
        }
      },
      {
        "label": "End Time",
        "name": "endTime",
        "type": "date",
        "optional": true,
        "show": {
          "actions.api": [
            "getHistoricalEtherPrice"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Etherscan/Etherscan.js"
  },
  {
    "loadMethods": {},
    "label": "Execute Contract Function",
    "name": "executeContractFunction",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ExecuteContractFunction/execute-contract-function.svg",
    "type": "action",
    "category": "Smart Contract",
    "version": 1.1,
    "description": "Execute smart contract function.",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Select Contract",
        "name": "contract",
        "type": "asyncOptions",
        "loadFromDbCollections": [
          "Contract"
        ],
        "loadMethod": "getContracts"
      },
      {
        "label": "Function",
        "name": "function",
        "type": "asyncOptions",
        "loadMethod": "getFunctions"
      },
      {
        "label": "Function Parameters",
        "name": "funcParameters",
        "type": "json",
        "placeholder": "[\"param1\", \"param2\"]",
        "description": "Function parameters in array. Ex: [\"param1\", \"param2\"]",
        "optional": true
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Connect wallet to sign transactions for functions that require changing states on blockchain, i.e: nonpayable or payable.",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.function": "(\\(payable\\)|\\(nonpayable\\))"
        }
      }
    ],
    "networks": [
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Gas Limit",
        "name": "gasLimit",
        "type": "number",
        "optional": true,
        "placeholder": "100000",
        "description": "Maximum price you are willing to pay when sending a transaction"
      },
      {
        "label": "Max Fee per Gas",
        "name": "maxFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "200",
        "description": "The maximum price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      },
      {
        "label": "Max Priority Fee per Gas",
        "name": "maxPriorityFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "5",
        "description": "The priority fee price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ExecuteContractFunction/ExecuteContractFunction.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "Flow Balance Trigger",
    "name": "FlowBalanceTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/FlowBalanceTrigger/flow.png",
    "type": "trigger",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Start workflow whenever FLOW balance in wallet changes",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Flow",
            "name": "mainnet",
            "parentGroup": "Flow Mainnet"
          },
          {
            "label": "Flow Testnet",
            "name": "testnet",
            "parentGroup": "Flow Testnet"
          }
        ],
        "default": "homestead"
      }
    ],
    "inputParameters": [
      {
        "label": "Wallet Address",
        "name": "address",
        "type": "string",
        "default": ""
      },
      {
        "label": "Trigger Condition",
        "name": "triggerCondition",
        "type": "options",
        "options": [
          {
            "label": "When balance increased",
            "name": "increase"
          },
          {
            "label": "When balance decreased",
            "name": "decrease"
          }
        ],
        "default": "increase"
      },
      {
        "label": "Polling Time",
        "name": "pollTime",
        "type": "options",
        "options": [
          {
            "label": "Every 15 secs",
            "name": "15s"
          },
          {
            "label": "Every 30 secs",
            "name": "30s"
          },
          {
            "label": "Every 1 min",
            "name": "1min"
          },
          {
            "label": "Every 5 min",
            "name": "5min"
          },
          {
            "label": "Every 10 min",
            "name": "10min"
          }
        ],
        "default": "30s"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/FlowBalanceTrigger/FlowBalanceTrigger.js"
  },
  {
    "loadMethods": {},
    "label": "Footprint Analytics",
    "name": "footprintAnalytics",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/FootprintAnalytics/footprint-analytics.png",
    "type": "action",
    "category": "Block Explorer",
    "version": 1,
    "description": "Execute Footprint Analytics APIs and SQL query",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "Rest API (V2)",
            "name": "restAPI"
          },
          {
            "label": "SQL API (Synchronous)",
            "name": "sqlAPISynchronous",
            "description": "Suitable for simple table lookup query"
          },
          {
            "label": "SQL API (Asynchronous)",
            "name": "sqlAPIAsynchronous",
            "description": "For complex analysis table lookup query"
          }
        ]
      },
      {
        "label": "Category",
        "name": "category",
        "type": "options",
        "options": [
          {
            "label": "NFT",
            "name": "nft"
          },
          {
            "label": "Token",
            "name": "token"
          },
          {
            "label": "GameFi",
            "name": "gamefi"
          },
          {
            "label": "Chain",
            "name": "chain"
          }
        ],
        "show": {
          "actions.api": [
            "restAPI"
          ]
        }
      },
      {
        "label": "Operation",
        "name": "operation",
        "type": "asyncOptions",
        "loadMethod": "getOperations",
        "show": {
          "actions.api": [
            "restAPI"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Footprint Analytics API Key",
            "name": "footprintAnalyticsApi"
          }
        ],
        "default": "footprintAnalyticsApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Chain",
        "name": "chain",
        "type": "options",
        "options": [
          {
            "label": "All",
            "name": "all",
            "show": {
              "actions.operation": [
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain"
              ]
            }
          },
          {
            "label": "Arbitrum",
            "name": "Arbitrum",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftCollectionsByChain",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Avalanche",
            "name": "Avalanche",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftCollectionsByChain",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "BNB Chain",
            "name": "BNB%20Chain",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftTransactions",
                "nftTransfers",
                "nftCollectionsByChain",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Boba",
            "name": "Boba",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Bitcoin",
            "name": "Bitcoin",
            "show": {
              "actions.operation": [
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Cardano",
            "name": "Cardano",
            "show": {
              "actions.operation": [
                "nftCollectionsByChain"
              ]
            }
          },
          {
            "label": "Celo",
            "name": "Celo",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "DFK",
            "name": "DFK",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Doge",
            "name": "Doge",
            "show": {
              "actions.operation": [
                "chainTransactions"
              ]
            }
          },
          {
            "label": "EOS",
            "name": "EOS",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Ethereum",
            "name": "Ethereum",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "allTokenBalance",
                "nftTransactions",
                "nftTransfers",
                "nftOrders",
                "nftWashTradeChecker",
                "nftCollectionStatistics",
                "nftStatistics",
                "nftInfo",
                "nftAttributes",
                "nftCollectionsByChain",
                "nftBalance",
                "nftBalanceByWallet",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Fantom",
            "name": "Fantom",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftCollectionsByChain",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Harmony",
            "name": "Harmony",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftCollectionsByChain",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Hive",
            "name": "Hive",
            "show": {
              "actions.operation": [
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Heco",
            "name": "Heco",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftBalance",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "ImmutableX",
            "name": "ImmutableX",
            "show": {
              "actions.operation": [
                "nftCollectionsByChain"
              ]
            }
          },
          {
            "label": "IoTeX",
            "name": "IoTeX",
            "show": {
              "actions.operation": [
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Moonbeam",
            "name": "Moonbeam",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Moonriver",
            "name": "Moonriver",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Oasys",
            "name": "Oasys",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftBalance",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Optimism",
            "name": "Optimism",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftBalance",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Polygon",
            "name": "Polygon",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftTransactions",
                "nftTransfers",
                "nftCollectionStatistics",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Solana",
            "name": "Solana",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "nftTransactions",
                "nftTransfers",
                "nftCollectionStatistics",
                "nftStatistics",
                "nftInfo",
                "nftAttributes",
                "nftCollectionsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "ThunderCore",
            "name": "ThunderCore",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "tokenBalance",
                "nftBalance",
                "protocolTransactions",
                "protocolAddresses",
                "protocolUserStatistics",
                "protocolsByChain",
                "chainTransactions"
              ]
            }
          },
          {
            "label": "Terra",
            "name": "Terra",
            "show": {
              "actions.operation": [
                "nftCollectionsByChain"
              ]
            }
          },
          {
            "label": "Wax",
            "name": "Wax",
            "show": {
              "actions.operation": [
                "tokenTransfers",
                "chainTransactions"
              ]
            }
          }
        ],
        "show": {
          "actions.api": [
            "restAPI"
          ]
        },
        "hide": {
          "actions.operation": [
            "chainInfo"
          ]
        }
      },
      {
        "label": "Collection Contract Address",
        "name": "collection_contract_address",
        "type": "string",
        "placeholder": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
        "show": {
          "actions.operation": [
            "nftTransactions",
            "nftTransfers",
            "nftOrders",
            "nftCollectionStatistics",
            "nftStatistics",
            "nftInfo",
            "nftAttributes",
            "nftCollectionsByChain",
            "nftBalance"
          ]
        }
      },
      {
        "label": "Type",
        "name": "type",
        "type": "options",
        "options": [
          {
            "label": "Listing",
            "name": "listing"
          },
          {
            "label": "Bidding",
            "name": "bidding"
          }
        ],
        "show": {
          "actions.operation": [
            "nftOrders"
          ]
        }
      },
      {
        "label": "Status",
        "name": "status",
        "type": "options",
        "options": [
          {
            "label": "Active",
            "name": "active"
          },
          {
            "label": "Expired",
            "name": "expired"
          },
          {
            "label": "Cancelled",
            "name": "cancelled"
          },
          {
            "label": "Filled",
            "name": "filled"
          },
          {
            "label": "Inactive",
            "name": "inactive"
          }
        ],
        "show": {
          "actions.operation": [
            "nftOrders"
          ]
        }
      },
      {
        "label": "Statistics Metrics",
        "name": "statistics_metrics",
        "type": "options",
        "options": [
          {
            "label": "Market Cap",
            "name": "market_cap"
          },
          {
            "label": "Volume",
            "name": "volume"
          },
          {
            "label": "Floor Price",
            "name": "floor_price"
          }
        ],
        "show": {
          "actions.operation": [
            "nftCollectionStatistics"
          ]
        }
      },
      {
        "label": "Statistics Time Model",
        "name": "statistics_time_model",
        "type": "options",
        "options": [
          {
            "label": "Latest",
            "name": "latest"
          }
        ],
        "default": "latest",
        "show": {
          "actions.operation": [
            "nftStatistics"
          ]
        }
      },
      {
        "label": "NFT Token Id",
        "name": "nft_token_id",
        "type": "string",
        "placeholder": "1",
        "optional": true,
        "show": {
          "actions.operation": [
            "nftStatistics",
            "nftInfo",
            "nftAttributes"
          ]
        }
      },
      {
        "label": "Transaction Hash",
        "name": "transaction_hash",
        "type": "string",
        "placeholder": "0x03a7615cd2bbe69a028debf6d76b7be99ba5c4d9246a639226889c5618a648fe",
        "show": {
          "actions.operation": [
            "nftWashTradeChecker"
          ]
        }
      },
      {
        "label": "Wallet Address",
        "name": "wallet_address",
        "type": "string",
        "placeholder": "0x3cd3a9a9c66a6fbb7221a30e761bda3caaea197b",
        "show": {
          "actions.operation": [
            "nftBalance",
            "nftBalanceByWallet"
          ]
        }
      },
      {
        "label": "NFT Token Id",
        "name": "nft_token_id",
        "type": "string",
        "placeholder": "7237005577332285910032237647762877720934446650543256038857901852224856784896",
        "show": {
          "actions.operation": [
            "nftBalance"
          ]
        }
      },
      {
        "label": "NFT Type",
        "name": "nft_type",
        "type": "options",
        "options": [
          {
            "label": "ERC1155",
            "name": "ERC1155"
          },
          {
            "label": "ERC721",
            "name": "ERC721"
          }
        ],
        "default": "ERC1155",
        "show": {
          "actions.operation": [
            "nftBalance"
          ]
        }
      },
      {
        "label": "Token Address",
        "name": "token_address",
        "type": "string",
        "description": "Token contract address",
        "placeholder": "0xcc079ca45b62c5bc0064e0b40a2dd3d409503119",
        "optional": true,
        "show": {
          "actions.operation": [
            "tokenTransfers"
          ]
        }
      },
      {
        "label": "From Address",
        "name": "from_address",
        "type": "string",
        "description": "Address of the sender",
        "placeholder": "0x21787ae502b65d52071daa6519d7b6258758da5e",
        "optional": true,
        "show": {
          "actions.operation": [
            "tokenTransfers",
            "chainTransactions"
          ]
        }
      },
      {
        "label": "To Address",
        "name": "to_address",
        "type": "string",
        "description": "Address of the receiver",
        "placeholder": "0x4ba50c4469f4c1388745739d9d73010781617688",
        "optional": true,
        "show": {
          "actions.operation": [
            "tokenTransfers",
            "chainTransactions"
          ]
        }
      },
      {
        "label": "Token Address",
        "name": "token_address",
        "type": "string",
        "description": "Token contract address",
        "placeholder": "0x4fabb145d64652a948d72533023f6e7a623c7c53",
        "show": {
          "actions.operation": [
            "tokenBalance"
          ]
        }
      },
      {
        "label": "Wallet Address",
        "name": "wallet_address",
        "type": "string",
        "description": "Wallet address",
        "placeholder": "0xb8001c3ec9aa1985f6c747e25c28324e4a361ec1",
        "show": {
          "actions.operation": [
            "tokenBalance",
            "allTokenBalance"
          ]
        }
      },
      {
        "label": "Protocol Slug",
        "name": "protocol_slug",
        "type": "string",
        "description": "The protocol slug of the transactions, eg: aave",
        "placeholder": "aave",
        "show": {
          "actions.operation": [
            "protocolTransactions",
            "protocolAddresses",
            "protocolUserStatistics",
            "protocolsByChain"
          ]
        }
      },
      {
        "label": "Address Type",
        "name": "address_type",
        "type": "options",
        "options": [
          {
            "label": "Active",
            "name": "active"
          }
        ],
        "default": "active",
        "show": {
          "actions.operation": [
            "protocolAddresses"
          ]
        }
      },
      {
        "label": "Statistics Frequency Model",
        "name": "statistics_frequency_model",
        "type": "options",
        "options": [
          {
            "label": "Daily",
            "name": "daily"
          }
        ],
        "optional": true,
        "show": {
          "actions.operation": [
            "protocolUserStatistics"
          ]
        }
      },
      {
        "label": "Contract Address",
        "name": "contract_address",
        "type": "string",
        "description": "The contract address of the transactions",
        "placeholder": "0x794a61358d6845594f94dc1db02a252b5b4814ad",
        "optional": true,
        "show": {
          "actions.operation": [
            "protocolTransactions"
          ]
        }
      },
      {
        "label": "Wallet Address",
        "name": "wallet_address",
        "type": "string",
        "description": "The wallet address of the transactions",
        "placeholder": "0xbd90be3937744e2cd0ee680807901b1ab9479ffc",
        "optional": true,
        "show": {
          "actions.operation": [
            "protocolTransactions"
          ]
        }
      },
      {
        "label": "Start Time",
        "name": "start_time",
        "type": "date",
        "description": "The query supports time period query, when start_time is specified, but end_time is not specified, the default query is the data of 24 hours after start_time (including start_time); if you do not specify start_time and end_time, the default query is yesterday,the maximum span of one inquiry is 30 days , eg: 2022-02-02 00:00:00",
        "optional": true,
        "show": {
          "actions.operation": [
            "nftTransactions",
            "nftTransfers",
            "nftOrders",
            "nftCollectionStatistics",
            "nftCollectionsByChain",
            "tokenTransfers",
            "protocolTransactions",
            "protocolAddresses",
            "protocolUserStatistics",
            "chainTransactions"
          ]
        }
      },
      {
        "label": "End Time",
        "name": "end_time",
        "type": "date",
        "description": "When end_time is specified, but no start_time is specified, the default query is 24 hours before end_time (not including end_time) , eg: 2022-02-03 00:00:00",
        "optional": true,
        "show": {
          "actions.operation": [
            "nftTransactions",
            "nftTransfers",
            "nftOrders",
            "nftCollectionStatistics",
            "nftCollectionsByChain",
            "tokenTransfers",
            "protocolTransactions",
            "protocolAddresses",
            "protocolUserStatistics",
            "chainTransactions"
          ]
        }
      },
      {
        "label": "Limit",
        "name": "limit",
        "type": "number",
        "description": "Page size, Defaults to 100, capped at 100, eg: 100",
        "optional": true,
        "show": {
          "actions.operation": [
            "nftTransactions",
            "nftTransfers",
            "nftOrders",
            "nftCollectionStatistics",
            "nftStatistics",
            "nftInfo",
            "nftAttributes",
            "nftCollectionsByChain",
            "nftBalanceByWallet",
            "tokenTransfers",
            "allTokenBalance",
            "protocolTransactions",
            "protocolAddresses",
            "protocolUserStatistics",
            "protocolsByChain",
            "chainTransactions"
          ]
        }
      },
      {
        "label": "Offset",
        "name": "offset",
        "type": "number",
        "description": "The offset for pagination, capped at 80000 eg:120",
        "optional": true,
        "show": {
          "actions.operation": [
            "nftTransactions",
            "nftTransfers",
            "nftOrders",
            "nftCollectionStatistics",
            "nftStatistics",
            "nftInfo",
            "nftAttributes",
            "nftCollectionsByChain",
            "nftBalanceByWallet",
            "tokenTransfers",
            "allTokenBalance",
            "protocolTransactions",
            "protocolAddresses",
            "protocolUserStatistics",
            "protocolsByChain",
            "chainTransactions"
          ]
        }
      },
      {
        "label": "SQL query",
        "name": "sqlQuery",
        "type": "string",
        "rows": 5,
        "placeholder": "select * from ethereum_token_transfers where block_timestamp >= date_add('day',-1,current_date) limit 10",
        "description": "SQL query to execute. Must be Scale or Enterprise plan",
        "show": {
          "actions.api": [
            "sqlAPISynchronous",
            "sqlAPIAsynchronous"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/FootprintAnalytics/FootprintAnalytics.js"
  },
  {
    "label": "GitHub",
    "name": "GitHub",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/GitHub/GitHub-Logo.png",
    "type": "action",
    "category": "Development",
    "version": 1,
    "description": "GitHub API",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "List User Repositories",
            "name": "listUserRepositories",
            "description": "Lists public repositories for the specified user."
          },
          {
            "label": "List Organization Repositories",
            "name": "listOrganizationRepositories",
            "description": "Lists repositories for the specified organization."
          },
          {
            "label": "List repository issues",
            "name": "listRepositoryIssues",
            "description": "List issues in a repository."
          },
          {
            "label": "Create an issue",
            "name": "createIssue",
            "description": "Any user with pull access to a repository can create an issue."
          },
          {
            "label": "Get an issue",
            "name": "getIssue",
            "description": "Get an issues in a repository."
          },
          {
            "label": "Update an issue",
            "name": "updateIssue",
            "description": "Update an issues in a repository."
          },
          {
            "label": "Lock an issue",
            "name": "lockIssue",
            "description": "Users with push access can lock an issue or pull request's conversation."
          },
          {
            "label": "Unlock an issue",
            "name": "unlockIssue",
            "description": "Users with push access can unlock an issue's conversation."
          }
        ]
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "GitHub API",
            "name": "gitHubApi"
          }
        ],
        "default": "gitHubApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Owner/Organization",
        "name": "owner",
        "type": "string",
        "show": {
          "actions.operation": [
            "listRepositoryIssues",
            "createIssue",
            "getIssue",
            "updateIssue",
            "lockIssue",
            "unlockIssue",
            "listUserRepositories",
            "listOrganizationRepositories"
          ]
        },
        "description": "The account owner of the repository. The name is not case sensitive."
      },
      {
        "label": "Type",
        "name": "orgType",
        "type": "options",
        "options": [
          {
            "label": "All",
            "name": "all"
          },
          {
            "label": "Public",
            "name": "public"
          },
          {
            "label": "Private",
            "name": "private"
          },
          {
            "label": "Forks",
            "name": "forks"
          },
          {
            "label": "Sources",
            "name": "sources"
          },
          {
            "label": "Member",
            "name": "member"
          },
          {
            "label": "Internal",
            "name": "internal"
          }
        ],
        "show": {
          "actions.operation": [
            "listOrganizationRepositories"
          ]
        },
        "description": "Specifies the types of repositories you want returned.",
        "optional": true,
        "default": "all"
      },
      {
        "label": "Type",
        "name": "userType",
        "type": "options",
        "options": [
          {
            "label": "All",
            "name": "all"
          },
          {
            "label": "Owner",
            "name": "owner"
          },
          {
            "label": "Member",
            "name": "member"
          }
        ],
        "show": {
          "actions.operation": [
            "listUserRepositories"
          ]
        },
        "description": "Specifies the types of repositories you want returned.",
        "optional": true,
        "default": "owner"
      },
      {
        "label": "Sort",
        "name": "sort",
        "type": "options",
        "options": [
          {
            "label": "Created",
            "name": "created"
          },
          {
            "label": "Updated",
            "name": "updated"
          },
          {
            "label": "Pushed",
            "name": "pushed"
          },
          {
            "label": "Full Name",
            "name": "full_name"
          }
        ],
        "show": {
          "actions.operation": [
            "listUserRepositories",
            "listOrganizationRepositories"
          ]
        },
        "description": "The property to sort the results by.",
        "optional": true,
        "default": "created"
      },
      {
        "label": "Direction of sort",
        "name": "direction",
        "type": "options",
        "options": [
          {
            "label": "Ascending",
            "name": "asc"
          },
          {
            "label": "Descending",
            "name": "desc"
          }
        ],
        "show": {
          "actions.operation": [
            "listUserRepositories",
            "listOrganizationRepositories"
          ]
        },
        "description": "The order to sort by.",
        "optional": true,
        "default": "desc"
      },
      {
        "label": "Repository",
        "name": "repo",
        "type": "string",
        "show": {
          "actions.operation": [
            "listRepositoryIssues",
            "createIssue",
            "getIssue",
            "updateIssue",
            "lockIssue",
            "unlockIssue"
          ]
        },
        "description": "The name of the repository. The name is not case sensitive."
      },
      {
        "label": "Title",
        "name": "title",
        "type": "string",
        "show": {
          "actions.operation": [
            "createIssue"
          ]
        },
        "description": "The title of the issue."
      },
      {
        "label": "Title",
        "name": "titleOptional",
        "type": "string",
        "show": {
          "actions.operation": [
            "updateIssue"
          ]
        },
        "description": "The title of the issue.",
        "optional": true
      },
      {
        "label": "Body",
        "name": "body",
        "type": "string",
        "show": {
          "actions.operation": [
            "createIssue",
            "updateIssue"
          ]
        },
        "description": "The contents of the issue.",
        "optional": true
      },
      {
        "label": "Issue Number",
        "name": "issueNumber",
        "type": "number",
        "show": {
          "actions.operation": [
            "getIssue",
            "updateIssue",
            "lockIssue",
            "unlockIssue"
          ]
        },
        "description": "The number that identifies the issue."
      },
      {
        "label": "Lock Reason",
        "name": "lockReason",
        "type": "options",
        "options": [
          {
            "label": "Off Topic",
            "name": "off-topic"
          },
          {
            "label": "Too Heated",
            "name": "too heated"
          },
          {
            "label": "Resolved",
            "name": "resolved"
          },
          {
            "label": "Spam",
            "name": "spam"
          }
        ],
        "show": {
          "actions.operation": [
            "lockIssue"
          ]
        },
        "description": "The reason for locking the issue or pull request conversation.",
        "optional": true
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/GitHub/GitHub.js"
  },
  {
    "webhookMethods": {},
    "label": "GitHub Webhook",
    "name": "GitHubWebhook",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/GitHub/GitHub-Logo.png",
    "type": "webhook",
    "category": "Development",
    "version": 1,
    "description": "Start workflow whenever GitHub webhook event happened",
    "incoming": 0,
    "outgoing": 1,
    "actions": [
      {
        "label": "Events",
        "name": "events",
        "type": "options",
        "options": [
          {
            "label": "Branch Protection Rule",
            "name": "branch_protection_rule",
            "description": "Activity related to a branch protection rule."
          },
          {
            "label": "Check Run",
            "name": "check_run",
            "description": "Check run activity has occurred."
          },
          {
            "label": "Check Suite",
            "name": "check_suite",
            "description": "Check suite activity has occurred."
          },
          {
            "label": "Code Scanning Alert",
            "name": "code_scanning_alert",
            "description": "Activity related to code scanning alerts in a repository."
          },
          {
            "label": "Commit Comment",
            "name": "commit_comment",
            "description": "A commit comment is created."
          },
          {
            "label": "Create",
            "name": "create",
            "description": "A Git branch or tag is created."
          },
          {
            "label": "Delete",
            "name": "delete",
            "description": "A Git branch or tag is deleted."
          },
          {
            "label": "Dependabot Alert",
            "name": "dependabot_alert",
            "description": "Activity related to Dependabot alerts."
          },
          {
            "label": "Deploy Key",
            "name": "deploy_key",
            "description": "A deploy key is added or removed from a repository."
          },
          {
            "label": "Deployment",
            "name": "deployment",
            "description": "A deployment is created."
          },
          {
            "label": "Deployment Status",
            "name": "deployment_status",
            "description": "A deployment is created."
          },
          {
            "label": "Discussion",
            "name": "discussion",
            "description": "Activity related to a discussion."
          },
          {
            "label": "Discussion Comment",
            "name": "discussion_comment",
            "description": "Activity related to a comment in a discussion."
          },
          {
            "label": "Fork",
            "name": "fork",
            "description": "A user forks a repository."
          },
          {
            "label": "Github App Authorization",
            "name": "github_app_authorization",
            "description": "When someone revokes their authorization of a GitHub App, this event occurs. A GitHub App receives this webhook by default and cannot unsubscribe from this event."
          },
          {
            "label": "Gollum",
            "name": "gollum",
            "description": "A wiki page is created or updated."
          },
          {
            "label": "Installation",
            "name": "installation",
            "description": "Activity related to a GitHub App installation."
          },
          {
            "label": "Installation Repositories",
            "name": "installation_repositories",
            "description": "Activity related to repositories being added to a GitHub App installation."
          },
          {
            "label": "Issue Comment",
            "name": "issue_comment",
            "description": "Activity related to an issue or pull request comment. "
          },
          {
            "label": "Issues",
            "name": "issues",
            "description": "Activity related to an issue."
          },
          {
            "label": "Label",
            "name": "label",
            "description": "Activity related to a label."
          },
          {
            "label": "Marketplace Purchase",
            "name": "marketplace_purchase",
            "description": "Activity related to a GitHub Marketplace purchase."
          },
          {
            "label": "Member",
            "name": "member",
            "description": "Activity related to repository collaborators."
          },
          {
            "label": "Membership",
            "name": "membership",
            "description": "Activity related to team membership."
          },
          {
            "label": "Merge Group",
            "name": "merge_group",
            "description": "Activity related to merge groups in a merge queue."
          },
          {
            "label": "Meta",
            "name": "meta",
            "description": "The webhook this event is configured on was deleted."
          },
          {
            "label": "Milestone",
            "name": "milestone",
            "description": "Activity related to milestones."
          },
          {
            "label": "Organization",
            "name": "organization",
            "description": "Activity related to an organization and its members."
          },
          {
            "label": "Org Block",
            "name": "org_block",
            "description": "Activity related to people being blocked in an organization. "
          },
          {
            "label": "Package",
            "name": "package",
            "description": "Activity related to GitHub Packages."
          },
          {
            "label": "Page Build",
            "name": "page_build",
            "description": "Represents an attempted build of a GitHub Pages site,"
          },
          {
            "label": "Ping",
            "name": "ping",
            "description": "When you create a new webhook, we send you a simple ping event to let you know you have set up the webhook correctly."
          },
          {
            "label": "Project",
            "name": "project",
            "description": "Activity related to classic projects."
          },
          {
            "label": "Project Card",
            "name": "project_card",
            "description": "Activity related to cards in a classic project."
          },
          {
            "label": "Project Column",
            "name": "project_column",
            "description": "Activity related to columns in a classic project. "
          },
          {
            "label": "Projects V2 Item",
            "name": "projects_v2_item",
            "description": "Activity related to items in a project."
          },
          {
            "label": "Public",
            "name": "public",
            "description": "When a private repository is made public."
          },
          {
            "label": "Pull Request",
            "name": "pull_request",
            "description": "Activity related to pull requests."
          },
          {
            "label": "Pull Request Review",
            "name": "pull_request_review",
            "description": "Activity related to pull request reviews."
          },
          {
            "label": "Pull Request Review Comment",
            "name": "pull_request_review_comment",
            "description": "Activity related to pull request review comments in the pull request unified diff."
          },
          {
            "label": "Pull Request Review Thread",
            "name": "pull_request_review_thread",
            "description": "Activity related to a comment thread on a pull request being marked as resolved or unresolved."
          },
          {
            "label": "Push",
            "name": "push",
            "description": "Activity related to one or more commits pushed to a repository branch or tag."
          },
          {
            "label": "Release",
            "name": "release",
            "description": "Activity related to a release."
          },
          {
            "label": "Repository Dispatch",
            "name": "repository_dispatch",
            "description": "This event occurs when a GitHub App sends a POST request to the \"Create a repository dispatch event\" endpoint."
          },
          {
            "label": "Repository",
            "name": "repository",
            "description": "Activity related to a repository."
          },
          {
            "label": "Repository Import",
            "name": "repository_import",
            "description": "Activity related to a repository being imported to GitHub."
          },
          {
            "label": "Repository Vulnerability Alert",
            "name": "repository_vulnerability_alert",
            "description": "Activity related to security vulnerability alerts in a repository."
          },
          {
            "label": "Security Advisory",
            "name": "security_advisory",
            "description": "Activity related to a security advisory that has been reviewed by GitHub. A GitHub-reviewed security advisory provides information about security-related vulnerabilities in software on GitHub."
          },
          {
            "label": "Sponsorship",
            "name": "sponsorship",
            "description": "Activity related to a sponsorship listing. The type of activity is specified in the action property of the payload object."
          },
          {
            "label": "Star",
            "name": "star",
            "description": "Activity related to a repository being starred."
          },
          {
            "label": "Status",
            "name": "status",
            "description": "When the status of a Git commit changes."
          },
          {
            "label": "Team",
            "name": "team",
            "description": "Activity related to an organization team."
          },
          {
            "label": "Team Add",
            "name": "team_add",
            "description": "When a repository is added to a team."
          },
          {
            "label": "Watch",
            "name": "watch",
            "description": "When someone stars a repository."
          },
          {
            "label": "Workflow Dispatch",
            "name": "workflow_dispatch",
            "description": "This event occurs when someone triggers a workflow run on GitHub or sends a POST request to the \"Create a workflow dispatch event\" endpoint."
          },
          {
            "label": "Workflow Job",
            "name": "workflow_job",
            "description": "A GitHub Actions workflow job has been queued, is in progress, or has been completed on a repository."
          },
          {
            "label": "Workflow Run",
            "name": "workflow_run",
            "description": "When a GitHub Actions workflow run is requested or completed."
          }
        ],
        "default": "push"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "GitHub API",
            "name": "gitHubApi"
          }
        ],
        "default": "gitHubApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Owner/Organization",
        "name": "owner",
        "type": "string",
        "description": "The account owner of the repository. The name is not case sensitive."
      },
      {
        "label": "Repository",
        "name": "repo",
        "type": "string",
        "description": "The name of the repository. The name is not case sensitive."
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/GitHub/GitHubWebhook.js"
  },
  {
    "loadMethods": {},
    "label": "GoogleDocs",
    "name": "googleDocs",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/GoogleDocs/gdocs.svg",
    "type": "action",
    "category": "Productivity",
    "version": 1,
    "description": "Execute GoogleDocs operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Create New Document",
            "name": "create",
            "description": "Create a new document"
          },
          {
            "label": "Get All Values",
            "name": "getAll",
            "description": "Get all values from a document"
          },
          {
            "label": "Update a Document",
            "name": "update",
            "description": "Update a document"
          }
        ],
        "default": "create"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Google Docs OAuth2",
            "name": "googleDocsOAuth2Api"
          }
        ],
        "default": "googleDocsOAuth2Api"
      }
    ],
    "inputParameters": [
      {
        "label": "Document Name",
        "name": "documentName",
        "type": "string",
        "optional": true,
        "description": "Name of the document to create. Default to Untitled document.",
        "show": {
          "actions.operation": [
            "create"
          ]
        }
      },
      {
        "label": "Document",
        "name": "documentId",
        "type": "asyncOptions",
        "loadMethod": "getAllDocsFromDrive",
        "hide": {
          "actions.operation": [
            "create"
          ]
        }
      },
      {
        "label": "Requests",
        "name": "requests",
        "description": "update a document. You can simply add one reequest data or add multiple request data. If request format is invalid, document won't be updated. The details about how to write a request data can be found at https://developers.google.com/docs/api/reference/rest/v1/documents/batchUpdate",
        "type": "json",
        "placeholder": "[\n                    {\n                        \"insertText\": {\n                          \"text\": \"new text\",\n                            \"location\": {\n                                \"index\": 1 \n                            }\n                        }\n                    },\n                    {\n                        \"insertTable\": {\n                            \"rows\": 3,\n                            \"columns\": 4,\n                            \"endOfSegmentLocation\":{\n                            }\n                        }\n                    }\n]",
        "show": {
          "actions.operation": [
            "update"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/GoogleDocs/GoogleDocs.js"
  },
  {
    "loadMethods": {},
    "label": "GoogleSheet",
    "name": "googleSheet",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/GoogleSheet/gsheet.svg",
    "type": "action",
    "category": "Productivity",
    "version": 1,
    "description": "Execute GoogleSheet operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Create New SpreadSheet",
            "name": "create",
            "description": "Create a new spreadsheet"
          },
          {
            "label": "Add Rows",
            "name": "addRows",
            "description": "Add multiple rows to a spreadsheet"
          },
          {
            "label": "Get All Values",
            "name": "getAll",
            "description": "Get all values from a spreadsheet"
          },
          {
            "label": "Get Values By Range",
            "name": "getRange",
            "description": "Get values from cells from specified range"
          },
          {
            "label": "Update Cell",
            "name": "updateCell",
            "description": "Update single cell in a spreadsheet"
          },
          {
            "label": "Update Rows",
            "name": "updateRows",
            "description": "Update multiple rows in a spreadsheet"
          },
          {
            "label": "Clear Row",
            "name": "clearRow",
            "description": "Clear the values of a row in a spreadsheet"
          },
          {
            "label": "Clear Column",
            "name": "clearCol",
            "description": "Clear the values of a column in a spreadsheet"
          },
          {
            "label": "Clear By Range",
            "name": "clearRange",
            "description": "Clear the values in a spreadsheet from specified range"
          },
          {
            "label": "Clear All Values",
            "name": "clearAll",
            "description": "Clear all the values in a spreadsheet"
          }
        ],
        "default": "create"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Google Sheet OAuth2",
            "name": "googleSheetsOAuth2Api"
          }
        ],
        "default": "googleSheetsOAuth2Api"
      }
    ],
    "inputParameters": [
      {
        "label": "Spreadsheet Name",
        "name": "spreadsheetName",
        "type": "string",
        "optional": true,
        "description": "Name of the spreadsheet to create. Default to Untitled spreadsheet.",
        "show": {
          "actions.operation": [
            "create"
          ]
        }
      },
      {
        "label": "Spreadsheet",
        "name": "spreadsheetId",
        "type": "asyncOptions",
        "loadMethod": "getAllSheetsFromDrive",
        "hide": {
          "actions.operation": [
            "create"
          ]
        }
      },
      {
        "label": "Sheet Name",
        "name": "sheetName",
        "type": "asyncOptions",
        "loadMethod": "getSheets",
        "hide": {
          "actions.operation": [
            "create"
          ]
        }
      },
      {
        "label": "Range",
        "name": "range",
        "type": "string",
        "placeholder": "A1:B2",
        "description": "For example, if the spreadsheet data is: A1=1, B1=2, A2=3, B2=4, then requesting range=A1:B2, returns [[1, 2],[3, 4]]",
        "show": {
          "actions.operation": [
            "getRange"
          ]
        }
      },
      {
        "label": "Row Values",
        "name": "rowValues",
        "type": "json",
        "placeholder": "[[1, 2], [3, 4]]",
        "description": "For instance: [[1, 2], [3, 4]] will insert 2 new rows. FIRST row: A1=1, B1=2, and SECOND row: A2=3, B2=4",
        "show": {
          "actions.operation": [
            "addRows"
          ]
        }
      },
      {
        "label": "Range",
        "name": "range",
        "type": "string",
        "placeholder": "A1:B4",
        "description": "A1 notation of the rows to update.",
        "show": {
          "actions.operation": [
            "updateRows"
          ]
        }
      },
      {
        "label": "Row Values",
        "name": "rowValues",
        "type": "json",
        "placeholder": "[[1, 2], [3, 4]]",
        "description": "For instance: [[1, 2], [3, 4]] will update FIRST row: A1=1, B1=2, and SECOND row: A2=3, B2=4",
        "show": {
          "actions.operation": [
            "updateRows"
          ]
        }
      },
      {
        "label": "Cell",
        "name": "range",
        "type": "string",
        "placeholder": "A1",
        "description": "A1 notation of the cell to update.",
        "show": {
          "actions.operation": [
            "updateCell"
          ]
        }
      },
      {
        "label": "Cell Value",
        "name": "cellValue",
        "type": "string",
        "placeholder": "New Update Value",
        "default": "",
        "description": "New value of the cell",
        "show": {
          "actions.operation": [
            "updateCell"
          ]
        }
      },
      {
        "label": "Row Number",
        "name": "clearRowNumber",
        "type": "number",
        "placeholder": "1",
        "description": "Row (number) to clear the values",
        "show": {
          "actions.operation": [
            "clearRow"
          ]
        }
      },
      {
        "label": "Column Number",
        "name": "clearColNumber",
        "type": "string",
        "placeholder": "A",
        "description": "Column (alphabet) to clear the values",
        "show": {
          "actions.operation": [
            "clearCol"
          ]
        }
      },
      {
        "label": "Range",
        "name": "range",
        "type": "string",
        "placeholder": "A1:B4",
        "description": "A1 notation of the range to clear.",
        "show": {
          "actions.operation": [
            "clearRange"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/GoogleSheet/GoogleSheet.js"
  },
  {
    "label": "GraphQL",
    "name": "graphQL",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/GraphQL/graphql.svg",
    "type": "action",
    "category": "Development",
    "version": 1,
    "description": "Execute GraphQL request",
    "incoming": 1,
    "outgoing": 1,
    "credentials": [
      {
        "label": "Authorization",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Basic Auth",
            "name": "httpBasicAuth"
          },
          {
            "label": "Bearer Token Auth",
            "name": "httpBearerTokenAuth"
          },
          {
            "label": "No Auth",
            "name": "noAuth",
            "hideRegisteredCredential": true
          }
        ],
        "default": "noAuth"
      }
    ],
    "inputParameters": [
      {
        "label": "URL",
        "name": "url",
        "type": "string",
        "default": "",
        "placeholder": "http://<your-url>.com/"
      },
      {
        "label": "Headers",
        "name": "headers",
        "type": "array",
        "array": [
          {
            "label": "Key",
            "name": "key",
            "type": "string",
            "default": ""
          },
          {
            "label": "Value",
            "name": "value",
            "type": "string",
            "default": ""
          }
        ],
        "optional": true
      },
      {
        "label": "GraphQL Body",
        "name": "body",
        "type": "json",
        "placeholder": "{\n  me {\n    name\n  }\n}",
        "optional": true
      },
      {
        "label": "Variables",
        "name": "variables",
        "type": "json",
        "placeholder": "{\"var1\": \"value1\"}",
        "optional": true
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/GraphQL/GraphQL.js"
  },
  {
    "label": "HTTP",
    "name": "http",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/HTTP/http.svg",
    "type": "action",
    "category": "Development",
    "version": 1,
    "description": "Execute HTTP request",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Method",
        "name": "method",
        "type": "options",
        "options": [
          {
            "label": "GET",
            "name": "GET"
          },
          {
            "label": "POST",
            "name": "POST"
          },
          {
            "label": "PUT",
            "name": "PUT"
          },
          {
            "label": "DELETE",
            "name": "DELETE"
          },
          {
            "label": "HEAD",
            "name": "HEAD"
          }
        ],
        "default": "GET",
        "description": "HTTP method"
      }
    ],
    "credentials": [
      {
        "label": "Authorization",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Basic Auth",
            "name": "httpBasicAuth"
          },
          {
            "label": "Bearer Token Auth",
            "name": "httpBearerTokenAuth"
          },
          {
            "label": "No Auth",
            "name": "noAuth",
            "hideRegisteredCredential": true
          }
        ],
        "default": "noAuth"
      }
    ],
    "inputParameters": [
      {
        "label": "URL",
        "name": "url",
        "type": "string",
        "default": "",
        "placeholder": "http://<your-url>.com/"
      },
      {
        "label": "Headers",
        "name": "headers",
        "type": "array",
        "array": [
          {
            "label": "Key",
            "name": "key",
            "type": "string",
            "default": ""
          },
          {
            "label": "Value",
            "name": "value",
            "type": "string",
            "default": ""
          }
        ],
        "optional": true
      },
      {
        "label": "Query Params",
        "name": "queryParams",
        "type": "array",
        "array": [
          {
            "label": "Key",
            "name": "key",
            "type": "string",
            "default": ""
          },
          {
            "label": "Value",
            "name": "value",
            "type": "string",
            "default": ""
          }
        ],
        "optional": true
      },
      {
        "label": "Body Type",
        "name": "bodyType",
        "type": "options",
        "options": [
          {
            "label": "JSON",
            "name": "json"
          },
          {
            "label": "Text",
            "name": "text"
          }
        ],
        "default": "json",
        "optional": true
      },
      {
        "label": "Body",
        "name": "body",
        "type": "json",
        "show": {
          "inputParameters.bodyType": [
            "json"
          ]
        },
        "placeholder": "{\"var1\": \"value1\"}",
        "optional": true
      },
      {
        "label": "Body",
        "name": "body",
        "type": "string",
        "show": {
          "inputParameters.bodyType": [
            "text"
          ]
        },
        "default": "",
        "optional": true
      },
      {
        "label": "Response Type",
        "name": "responseType",
        "type": "options",
        "options": [
          {
            "label": "JSON",
            "name": "json"
          },
          {
            "label": "Text",
            "name": "text"
          },
          {
            "label": "Array Buffer",
            "name": "arraybuffer"
          },
          {
            "label": "Raw (Base64)",
            "name": "base64"
          }
        ],
        "optional": true
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/HTTP/HTTP.js"
  },
  {
    "label": "Helio",
    "name": "helio",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Helio/helio.png",
    "type": "action",
    "category": "Payment",
    "version": 1,
    "description": "Execute Helio API integration",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Get All Transactions",
            "name": "listTransactions"
          }
        ],
        "default": "listTransactions"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "description": "Network to execute API: Test or Prod",
        "options": [
          {
            "label": "TEST",
            "name": "test",
            "description": "Test network: https://dev.hel.io/"
          },
          {
            "label": "PROD",
            "name": "prod",
            "description": "Prod network: https://hel.io/"
          }
        ],
        "default": "test"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Helio API Key",
            "name": "helioApi"
          }
        ],
        "default": "helioApi"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Helio/Helio.js"
  },
  {
    "webhookMethods": {},
    "label": "Helio Webhook",
    "name": "helioWebhook",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Helio/helio.png",
    "type": "webhook",
    "category": "Payment",
    "version": 1,
    "description": "Start workflow whenever Helio webhook event happened",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "description": "Network to execute API: Test or Prod",
        "options": [
          {
            "label": "TEST",
            "name": "test",
            "description": "Test network: https://dev.hel.io/"
          },
          {
            "label": "PROD",
            "name": "prod",
            "description": "Prod network: https://hel.io/"
          }
        ],
        "default": "test"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Helio API Key",
            "name": "helioApi"
          }
        ],
        "default": "helioApi"
      }
    ],
    "actions": [
      {
        "label": "Event",
        "name": "event",
        "type": "options",
        "options": [
          {
            "label": "New payment on Pay Link",
            "name": "CREATED",
            "description": "Triggered upon new payment on the Pay Link"
          },
          {
            "label": "New subscription on Pay Stream",
            "name": "STARTED",
            "description": "Triggered upon new subscription/stream started on the Pay Stream"
          },
          {
            "label": "Cancellation of subscription on Pay Stream",
            "name": "ENDED",
            "description": "Triggered when a subscription/stream was stopped/ended on the Pay Stream"
          }
        ]
      }
    ],
    "inputParameters": [
      {
        "label": "Pay Link Id",
        "name": "paylinkId",
        "type": "string",
        "placeholder": "63ea24cc1ea62a8e0d272444",
        "description": "For example, pay link id of https://hel.io/pay/63ea24cc1ea62a8e0d272444 is 63ea24cc1ea62a8e0d272444",
        "show": {
          "actions.event": [
            "CREATED"
          ]
        }
      },
      {
        "label": "Pay Stream Id",
        "name": "streamId",
        "type": "string",
        "placeholder": "63ea543143507a1df4f6fccf",
        "description": "For example, pay stream id of https://hel.io/pay/63ea543143507a1df4f6fccf is 63ea543143507a1df4f6fccf",
        "show": {
          "actions.event": [
            "STARTED",
            "ENDED"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Helio/HelioWebhook.js"
  },
  {
    "label": "Helius",
    "name": "helius",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Helius/helius.png",
    "type": "action",
    "category": "Network Provider",
    "version": 1,
    "description": "Perform Helius on-chain operations on Solana",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "Get NFT events",
            "name": "nft-events",
            "description": "Returns all NFT events given an address."
          },
          {
            "label": "Get NFT Portfolio",
            "name": "nfts",
            "description": "Returns all the NFTs that the given address currently holds."
          },
          {
            "label": "Name Lookup",
            "name": "names",
            "description": "Does a reverse lookup with the given address for Solana Naming Service domains."
          },
          {
            "label": "Get Token Balances",
            "name": "balances",
            "description": "Returns the native Solana balance (in lamports) and all token balances for a given address."
          }
        ],
        "default": "balances"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Helius API Key",
            "name": "heliusApi"
          }
        ],
        "default": "heliusApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "optional": false
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Helius/Helius.js"
  },
  {
    "loadMethods": {},
    "label": "Hubspot",
    "name": "hubspot",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Hubspot/hubspot.svg",
    "type": "action",
    "category": "Communication",
    "version": 2,
    "description": "Execute Hubspot API integration",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Create new contact",
            "name": "addContact",
            "description": "Create a new contact"
          },
          {
            "label": "Get contact",
            "name": "getContact",
            "description": "Get a contact details"
          },
          {
            "label": "Delete contact",
            "name": "deleteContact",
            "description": "Delete a contact"
          },
          {
            "label": "Get list of contacts",
            "name": "listContacts",
            "description": "Get a list of contact details"
          }
        ]
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Hubspot Credentials",
            "name": "hubspotCredential"
          }
        ],
        "default": "hubspotCredential"
      }
    ],
    "inputParameters": [
      {
        "label": "Customer Email",
        "name": "email",
        "type": "string",
        "show": {
          "actions.operation": [
            "addContact"
          ]
        }
      },
      {
        "label": "Customer First Name",
        "name": "firstname",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "addContact"
          ]
        }
      },
      {
        "label": "Customer Last Name",
        "name": "lastname",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "addContact"
          ]
        }
      },
      {
        "label": "Customer Company",
        "name": "company",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "addContact"
          ]
        }
      },
      {
        "label": "Contact",
        "name": "contactId",
        "type": "asyncOptions",
        "loadMethod": "getContacts",
        "show": {
          "actions.operation": [
            "getContact",
            "deleteContact"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Hubspot/Hubspot.js"
  },
  {
    "loadMethods": {},
    "label": "Hugging Face",
    "name": "huggingFace",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/HuggingFace/huggingface.png",
    "type": "action",
    "category": "Artificial Intelligence",
    "version": 1,
    "description": "Execute HuggingFace Inference API",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Category",
        "name": "category",
        "type": "options",
        "options": [
          {
            "label": "Image Classification",
            "name": "image-classification"
          },
          {
            "label": "Feature Extraction",
            "name": "feature-extraction"
          },
          {
            "label": "Object Detection",
            "name": "object-detection"
          },
          {
            "label": "Text Classification",
            "name": "text-classification"
          }
        ]
      },
      {
        "label": "Model",
        "name": "model",
        "type": "asyncOptions",
        "loadMethod": "listModels"
      },
      {
        "label": "Image File",
        "name": "imageFile",
        "type": "file",
        "show": {
          "actions.category": [
            "image-classification",
            "object-detection"
          ]
        }
      },
      {
        "label": "Input Text",
        "name": "inputText",
        "type": "string",
        "rows": 5,
        "show": {
          "actions.category": [
            "feature-extraction",
            "text-classification"
          ]
        }
      },
      {
        "label": "Inference Endpoint",
        "name": "inferenceURL",
        "type": "string",
        "optional": true,
        "description": "If this is not specify, the default free URL with limited usage will be used"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "string",
        "options": [
          {
            "label": "HuggingFace Access Token",
            "name": "huggingFaceAccessToken"
          }
        ],
        "default": "huggingFaceAccessToken"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/HuggingFace/HuggingFace.js"
  },
  {
    "label": "If Else",
    "name": "ifElse",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/IfElse/ifelse.svg",
    "version": 1,
    "type": "action",
    "category": "Utilities",
    "description": "Split flows according to conditions set",
    "incoming": 1,
    "outgoing": 2,
    "inputParameters": [
      {
        "label": "Mode",
        "name": "mode",
        "type": "options",
        "options": [
          {
            "label": "AND",
            "name": "and",
            "description": "When all conditions are met"
          },
          {
            "label": "OR",
            "name": "or",
            "description": "When any of the conditions is met"
          }
        ],
        "default": "or",
        "description": "Type of conditions"
      },
      {
        "label": "Conditions",
        "name": "conditions",
        "type": "array",
        "description": "Values to compare",
        "array": [
          {
            "label": "Type",
            "name": "type",
            "type": "options",
            "options": [
              {
                "label": "String",
                "name": "string"
              },
              {
                "label": "Number",
                "name": "number"
              },
              {
                "label": "Boolean",
                "name": "boolean"
              }
            ],
            "default": "string"
          },
          {
            "label": "Value 1",
            "name": "value1",
            "type": "string",
            "default": "",
            "description": "First value to be compared with",
            "show": {
              "inputParameters.conditions[$index].type": [
                "string"
              ]
            }
          },
          {
            "label": "Operation",
            "name": "operation",
            "type": "options",
            "options": [
              {
                "label": "Contains",
                "name": "contains"
              },
              {
                "label": "Ends With",
                "name": "endsWith"
              },
              {
                "label": "Equal",
                "name": "equal"
              },
              {
                "label": "Not Contains",
                "name": "notContains"
              },
              {
                "label": "Not Equal",
                "name": "notEqual"
              },
              {
                "label": "Regex",
                "name": "regex"
              },
              {
                "label": "Starts With",
                "name": "startsWith"
              },
              {
                "label": "Is Empty",
                "name": "isEmpty"
              },
              {
                "label": "Not Empty",
                "name": "notEmpty"
              }
            ],
            "default": "equal",
            "description": "Type of operation",
            "show": {
              "inputParameters.conditions[$index].type": [
                "string"
              ]
            }
          },
          {
            "label": "Value 2",
            "name": "value2",
            "type": "string",
            "default": "",
            "description": "Second value to be compared with",
            "show": {
              "inputParameters.conditions[$index].type": [
                "string"
              ]
            },
            "hide": {
              "inputParameters.conditions[$index].operation": [
                "isEmpty",
                "notEmpty"
              ]
            }
          },
          {
            "label": "Value 1",
            "name": "value1",
            "type": "number",
            "default": "",
            "description": "First value to be compared with",
            "show": {
              "inputParameters.conditions[$index].type": [
                "number"
              ]
            }
          },
          {
            "label": "Operation",
            "name": "operation",
            "type": "options",
            "options": [
              {
                "label": "Smaller",
                "name": "smaller"
              },
              {
                "label": "Smaller Equal",
                "name": "smallerEqual"
              },
              {
                "label": "Equal",
                "name": "equal"
              },
              {
                "label": "Not Equal",
                "name": "notEqual"
              },
              {
                "label": "Larger",
                "name": "larger"
              },
              {
                "label": "Larger Equal",
                "name": "largerEqual"
              },
              {
                "label": "Is Empty",
                "name": "isEmpty"
              },
              {
                "label": "Not Empty",
                "name": "notEmpty"
              }
            ],
            "default": "equal",
            "description": "Type of operation",
            "show": {
              "inputParameters.conditions[$index].type": [
                "number"
              ]
            }
          },
          {
            "label": "Value 2",
            "name": "value2",
            "type": "number",
            "default": 0,
            "description": "Second value to be compared with",
            "show": {
              "inputParameters.conditions[$index].type": [
                "number"
              ]
            },
            "hide": {
              "inputParameters.conditions[$index].operation": [
                "isEmpty",
                "notEmpty"
              ]
            }
          },
          {
            "label": "Value 1",
            "name": "value1",
            "type": "boolean",
            "default": false,
            "description": "First value to be compared with",
            "show": {
              "inputParameters.conditions[$index].type": [
                "boolean"
              ]
            }
          },
          {
            "label": "Operation",
            "name": "operation",
            "type": "options",
            "options": [
              {
                "label": "Equal",
                "name": "equal"
              },
              {
                "label": "Not Equal",
                "name": "notEqual"
              }
            ],
            "default": "equal",
            "description": "Type of operation",
            "show": {
              "inputParameters.conditions[$index].type": [
                "boolean"
              ]
            }
          },
          {
            "label": "Value 2",
            "name": "value2",
            "type": "boolean",
            "default": false,
            "description": "Second value to be compared with",
            "show": {
              "inputParameters.conditions[$index].type": [
                "boolean"
              ]
            }
          }
        ]
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/IfElse/IfElse.js"
  },
  {
    "label": "ImageEditor",
    "name": "imageEditor",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ImageEditor/image-editor.svg",
    "type": "action",
    "category": "Utilities",
    "version": 1,
    "description": "Edit image with different manipulation methods",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Selection Method",
        "name": "method",
        "type": "options",
        "options": [
          {
            "label": "Crop",
            "name": "crop",
            "description": "Crop image"
          },
          {
            "label": "Blur",
            "name": "blur",
            "description": "Quickly blur an image"
          },
          {
            "label": "Gaussian",
            "name": "gaussian",
            "description": "Hardcore blur"
          },
          {
            "label": "Invert",
            "name": "invert",
            "description": "Invert an images colors"
          },
          {
            "label": "Resize",
            "name": "resize",
            "description": "Resize an image"
          },
          {
            "label": "Cover",
            "name": "cover",
            "description": "Scale the image so the given width and height keeping the aspect ratio"
          },
          {
            "label": "Rotate",
            "name": "rotate",
            "description": "Rotate an image"
          },
          {
            "label": "Normalize",
            "name": "normalize",
            "description": "Normalize the colors in an image"
          },
          {
            "label": "Dither",
            "name": "dither",
            "description": "Apply a dither effect to an image"
          },
          {
            "label": "Scale",
            "name": "scale",
            "description": "Uniformly scales the image by a factor"
          }
        ]
      },
      {
        "label": "Image Raw Data (Base64)",
        "name": "rawData",
        "type": "string",
        "placeholder": "data:image/png;base64,<base64_string>"
      }
    ],
    "inputParameters": [
      {
        "label": "Blur Pixel Radius",
        "name": "blurPixel",
        "type": "number",
        "default": 5,
        "show": {
          "actions.method": [
            "blur",
            "gaussian"
          ]
        },
        "description": "The pixel radius of the blur"
      },
      {
        "label": "Width",
        "name": "width",
        "type": "number",
        "default": 500,
        "show": {
          "actions.method": [
            "crop"
          ]
        },
        "description": "Crop width"
      },
      {
        "label": "Height",
        "name": "height",
        "type": "number",
        "default": 500,
        "show": {
          "actions.method": [
            "crop"
          ]
        },
        "description": "Crop height"
      },
      {
        "label": "Position X",
        "name": "positionX",
        "type": "number",
        "default": 10,
        "show": {
          "actions.method": [
            "crop"
          ]
        },
        "description": "X (horizontal) position to crop from"
      },
      {
        "label": "Position Y",
        "name": "positionY",
        "type": "number",
        "default": 10,
        "show": {
          "actions.method": [
            "crop"
          ]
        },
        "description": "Y (vertical) position to crop from"
      },
      {
        "label": "Width",
        "name": "width",
        "type": "number",
        "default": 500,
        "show": {
          "actions.method": [
            "resize",
            "cover"
          ]
        },
        "description": "Resize width"
      },
      {
        "label": "Height",
        "name": "height",
        "type": "number",
        "default": 500,
        "show": {
          "actions.method": [
            "resize",
            "cover"
          ]
        },
        "description": "Resize height"
      },
      {
        "label": "Rotation Degree",
        "name": "degree",
        "type": "number",
        "default": 90,
        "show": {
          "actions.method": [
            "rotate"
          ]
        }
      },
      {
        "label": "Scale Factor",
        "name": "factor",
        "type": "number",
        "default": 2,
        "show": {
          "actions.method": [
            "scale"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ImageEditor/ImageEditor.js"
  },
  {
    "loadMethods": {},
    "label": "Infura",
    "name": "infura",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Infura/infura.svg",
    "type": "action",
    "category": "Network Provider",
    "version": 1.1,
    "description": "Perform Infura onchain operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "Chain API",
            "name": "chainAPI",
            "description": "API for fetching standard onchain data using Infura supported calls."
          },
          {
            "label": "IPFS API",
            "name": "ipfsAPI",
            "description": "API for interacting with IPFS, a distributed, peer-to-peer (p2p) storage network used for storing and accessing files, websites, applications, and data."
          }
        ],
        "default": "chainAPI"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Infura API Key",
            "name": "infuraApi"
          }
        ],
        "default": "infuraApi"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          },
          {
            "label": "Avalanche Mainnet",
            "name": "avalanche",
            "parentGroup": "Avalanche"
          },
          {
            "label": "Avalanche Testnet",
            "name": "avalanche-testnet",
            "parentGroup": "Avalanche"
          }
        ],
        "show": {
          "actions.api": [
            "chainAPI"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Chain Category",
        "name": "chainCategory",
        "type": "options",
        "options": [
          {
            "label": "Retrieving Blocks",
            "name": "retrievingBlocks",
            "description": "Retrieve onchain blocks data"
          },
          {
            "label": "EVM/Smart Contract Execution",
            "name": "evmExecution",
            "description": "Execute or submit transaction onto blockchain"
          },
          {
            "label": "Reading Transactions",
            "name": "readingTransactions",
            "description": "Read onchain transactions data"
          },
          {
            "label": "Account Information",
            "name": "accountInformation",
            "description": "Retrieve onchain account information"
          },
          {
            "label": "Event Logs",
            "name": "eventLogs",
            "description": "Fetch onchain logs"
          },
          {
            "label": "Chain Information",
            "name": "chainInformation",
            "description": "Get general selected blockchain information"
          },
          {
            "label": "Retrieving Uncles",
            "name": "retrievingUncles",
            "description": "Retrieve onchain uncles blocks data"
          },
          {
            "label": "Filters",
            "name": "filters",
            "description": "Get block filters and logs, or create new filter"
          }
        ],
        "show": {
          "actions.api": [
            "chainAPI"
          ]
        },
        "default": "retrievingBlocks"
      },
      {
        "label": "Operation",
        "name": "operation",
        "type": "asyncOptions",
        "loadMethod": "getOperations"
      },
      {
        "label": "File",
        "name": "file",
        "type": "file",
        "description": "The path to a file to be added to IPFS.",
        "show": {
          "inputParameters.operation": [
            "add",
            "block_put",
            "dag_put",
            "pin_add"
          ]
        }
      },
      {
        "label": "Block Hash",
        "name": "arg",
        "type": "string",
        "description": "The base58 multihash of an existing block to get.",
        "default": "",
        "show": {
          "inputParameters.operation": [
            "block_get",
            "block_stat"
          ]
        }
      },
      {
        "label": "IPFS Object Hash",
        "name": "arg",
        "type": "string",
        "description": "The IPFS object hash.",
        "default": "",
        "show": {
          "inputParameters.operation": [
            "cat"
          ]
        }
      },
      {
        "label": "Dag Object",
        "name": "arg",
        "type": "string",
        "description": "The DAG object to get/resolve.",
        "default": "",
        "show": {
          "inputParameters.operation": [
            "dag_get",
            "dag_resolve"
          ]
        }
      },
      {
        "label": "Output Codec",
        "name": "output-codec",
        "type": "string",
        "description": "Format the object will be decoded in. Default: dag-json.",
        "optional": true,
        "default": "",
        "show": {
          "inputParameters.operation": [
            "dag_get"
          ]
        }
      },
      {
        "label": "Store Codec",
        "name": "store-codec",
        "type": "string",
        "description": "Codec that the stored object will be encoded with. Default: dag-cbor.",
        "optional": true,
        "default": "",
        "show": {
          "inputParameters.operation": [
            "dag_put"
          ]
        }
      },
      {
        "label": "Input Codec",
        "name": "input-codec",
        "type": "string",
        "description": "Codec that the input object is encoded in. Default: dag-json.",
        "optional": true,
        "default": "",
        "show": {
          "inputParameters.operation": [
            "dag_put"
          ]
        }
      },
      {
        "label": "Pin",
        "name": "pin",
        "type": "boolean",
        "description": "Pin this object when adding.",
        "optional": true,
        "default": true,
        "show": {
          "inputParameters.operation": [
            "dag_put",
            "object_put"
          ]
        }
      },
      {
        "label": "Hash",
        "name": "hash",
        "type": "string",
        "description": "Hash function to use. Default: sha2-256.",
        "optional": true,
        "default": "",
        "show": {
          "inputParameters.operation": [
            "dag_put"
          ]
        }
      },
      {
        "label": "IPFS Object Hash",
        "name": "arg",
        "type": "string",
        "description": "The IPFS object hash.",
        "default": "",
        "show": {
          "inputParameters.operation": [
            "get"
          ]
        }
      },
      {
        "label": "Object Key",
        "name": "arg",
        "type": "string",
        "description": "Key of the object to retrieve, in base58-encoded multihash format.",
        "default": "",
        "show": {
          "inputParameters.operation": [
            "object_data",
            "object_get",
            "object_stat"
          ]
        }
      },
      {
        "label": "File",
        "name": "file",
        "type": "file",
        "description": "The file to be stored as a DAG object.",
        "show": {
          "inputParameters.operation": [
            "object_put"
          ]
        }
      },
      {
        "label": "Input Encoding",
        "name": "inputenc",
        "type": "options",
        "description": "Encoding type of input data.",
        "options": [
          {
            "label": "Protobuf",
            "name": "protobuf"
          },
          {
            "label": "Json",
            "name": "json"
          }
        ],
        "default": "json",
        "show": {
          "inputParameters.operation": [
            "object_put"
          ]
        }
      },
      {
        "label": "Data Field Encoding",
        "name": "datafieldenc",
        "type": "options",
        "description": "Encoding type of data field.",
        "options": [
          {
            "label": "Text",
            "name": "text"
          },
          {
            "label": "Base64",
            "name": "base64"
          }
        ],
        "default": "text",
        "show": {
          "inputParameters.operation": [
            "object_put"
          ]
        }
      },
      {
        "label": "Object(s) Path",
        "name": "arg",
        "type": "string",
        "description": "Path to object(s) to be listed.",
        "default": "",
        "show": {
          "inputParameters.operation": [
            "pin_ls"
          ]
        }
      },
      {
        "label": "Object(s) Path",
        "name": "arg",
        "type": "string",
        "description": "Path to object(s) to be unpinned.",
        "default": "",
        "show": {
          "inputParameters.operation": [
            "pin_rm"
          ]
        }
      },
      {
        "label": "Object(s) Path",
        "name": "arg",
        "type": "string",
        "description": "Path to object(s) to be pinned.",
        "default": "",
        "show": {
          "inputParameters.operation": [
            "pin_add"
          ]
        }
      },
      {
        "label": "Type",
        "name": "inputenc",
        "type": "options",
        "description": "The type of pinned keys to list.",
        "options": [
          {
            "label": "Direct",
            "name": "direct"
          },
          {
            "label": "Indirect",
            "name": "indirect"
          },
          {
            "label": "Recursive",
            "name": "recursive"
          },
          {
            "label": "All",
            "name": "all"
          }
        ],
        "default": "all",
        "show": {
          "inputParameters.operation": [
            "pin_ls"
          ]
        }
      },
      {
        "label": "Parameters",
        "name": "parameters",
        "type": "json",
        "placeholder": "[\"param1\", \"param2\"]",
        "optional": true,
        "description": "Operation parameters in array. Ex: [\"param1\", \"param2\"]",
        "show": {
          "actions.api": [
            "chainAPI"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Infura/Infura.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "Infura Trigger",
    "name": "infuraTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Infura/infura.svg",
    "type": "trigger",
    "category": "Network Provider",
    "version": 1,
    "description": "Start workflow whenever subscribed event happened",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          },
          {
            "label": "Avalanche Mainnet",
            "name": "avalanche",
            "parentGroup": "Avalanche"
          },
          {
            "label": "Avalanche Testnet",
            "name": "avalanche-testnet",
            "parentGroup": "Avalanche"
          }
        ]
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Infura API Key",
            "name": "infuraApi"
          }
        ],
        "default": "infuraApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Subscribe Operation",
        "name": "subscribeOperation",
        "type": "asyncOptions",
        "loadMethod": "getSubscribeOperations"
      },
      {
        "label": "Parameters",
        "name": "parameters",
        "type": "json",
        "placeholder": "[\n  \"param1\",\n  \"param2\"\n]",
        "optional": true,
        "description": "Operation parameters in array. Ex: [\"param1\", \"param2\"]"
      },
      {
        "label": "Unsubscribe Operation",
        "name": "unsubscribeOperation",
        "type": "asyncOptions",
        "loadMethod": "getUnsubscribeOperations"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Infura/InfuraTrigger.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "label": "MATIC Balance Trigger",
    "name": "MATICBalanceTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/MATICBalanceTrigger/polygon.svg",
    "type": "trigger",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Start workflow whenever MATIC balance in wallet changes",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          }
        ],
        "default": "homestead"
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "options",
        "options": [
          {
            "label": "Polygon",
            "name": "polygon",
            "description": "Public Polygon RPC/Websocket",
            "parentGroup": "Public Nodes"
          },
          {
            "label": "Alchemy",
            "name": "alchemy",
            "description": "Alchemy RPC/Websocket",
            "parentGroup": "Private Nodes"
          },
          {
            "label": "Infura",
            "name": "infura",
            "description": "Infura RPC/Websocket",
            "parentGroup": "Private Nodes"
          },
          {
            "label": "QuickNode",
            "name": "quicknode",
            "description": "QuickNode HTTP and WSS Endpoints",
            "parentGroup": "Private Nodes"
          },
          {
            "label": "Custom RPC Endpoint",
            "name": "customRPC",
            "description": "HTTP endpoint",
            "parentGroup": "Custom Nodes"
          },
          {
            "label": "Custom Websocket Endpoint",
            "name": "customWebsocket",
            "description": "WSS Endpoint",
            "parentGroup": "Custom Nodes"
          }
        ],
        "default": "polygon"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Wallet Address",
        "name": "address",
        "type": "string",
        "default": ""
      },
      {
        "label": "Trigger Condition",
        "name": "triggerCondition",
        "type": "options",
        "options": [
          {
            "label": "When balance increased",
            "name": "increase"
          },
          {
            "label": "When balance decreased",
            "name": "decrease"
          }
        ],
        "default": "increase"
      },
      {
        "label": "Polling Time",
        "name": "pollTime",
        "type": "options",
        "options": [
          {
            "label": "Every 15 secs",
            "name": "15s"
          },
          {
            "label": "Every 30 secs",
            "name": "30s"
          },
          {
            "label": "Every 1 min",
            "name": "1min"
          },
          {
            "label": "Every 5 min",
            "name": "5min"
          },
          {
            "label": "Every 10 min",
            "name": "10min"
          }
        ],
        "default": "30s"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/MATICBalanceTrigger/MATICBalanceTrigger.js"
  },
  {
    "loadMethods": {},
    "label": "MATIC Transfer",
    "name": "MATICTransfer",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/MATICTransfer/polygon.svg",
    "type": "action",
    "category": "Cryptocurrency",
    "version": 1,
    "description": "Send/Transfer MATIC to an address",
    "incoming": 1,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          }
        ]
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Wallet To Transfer",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet account to send/transfer MATIC",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets"
      },
      {
        "label": "Address To Receive",
        "name": "address",
        "type": "string",
        "default": "",
        "description": "Address to receive MATIC"
      },
      {
        "label": "Amount",
        "name": "amount",
        "type": "number",
        "description": "Amount of MATIC to transfer"
      },
      {
        "label": "Gas Limit",
        "name": "gasLimit",
        "type": "number",
        "optional": true,
        "placeholder": "100000",
        "description": "Maximum price you are willing to pay when sending a transaction"
      },
      {
        "label": "Max Fee per Gas",
        "name": "maxFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "200",
        "description": "The maximum price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      },
      {
        "label": "Max Priority Fee per Gas",
        "name": "maxPriorityFeePerGas",
        "type": "number",
        "optional": true,
        "placeholder": "5",
        "description": "The priority fee price (in wei) per unit of gas for transaction. See <a target=\"_blank\" href=\"https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\">more</a>"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/MATICTransfer/MATICTransfer.js"
  },
  {
    "loadMethods": {},
    "label": "Mailchimp",
    "name": "mailchimp",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Mailchimp/mailchimp.svg",
    "type": "action",
    "category": "Communication",
    "version": 2,
    "description": "Execute Mailchimp API integration",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Get list of campaigns",
            "name": "listCampaigns",
            "description": "Returns the list of campaigns"
          },
          {
            "label": "Get campaign",
            "name": "getCampaign",
            "description": "Return single campaign"
          },
          {
            "label": "Delete campaign",
            "name": "deleteCampaign",
            "description": "It will delete campaigns"
          },
          {
            "label": "Add user to subscribe list",
            "name": "addUser",
            "description": "Add or update user to a subscribe list"
          },
          {
            "label": "Get user",
            "name": "getUser",
            "description": "Get information about a specific audience"
          },
          {
            "label": "Get list of users",
            "name": "listUsers",
            "description": "Get information about list of members in a specific audience list"
          }
        ],
        "default": "listCampaigns"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Mailchimp Credentials",
            "name": "mailChimpCredential"
          }
        ],
        "default": "mailChimpCredential"
      }
    ],
    "inputParameters": [
      {
        "label": "Campaign",
        "name": "campaignId",
        "type": "asyncOptions",
        "loadMethod": "getCampaigns",
        "show": {
          "actions.operation": [
            "deleteCampaign",
            "getCampaign"
          ]
        }
      },
      {
        "label": "Audience List",
        "name": "listId",
        "type": "asyncOptions",
        "loadMethod": "getLists",
        "show": {
          "actions.operation": [
            "addUser",
            "getUser",
            "listUsers"
          ]
        }
      },
      {
        "label": "Customer Email",
        "name": "email",
        "type": "string",
        "show": {
          "actions.operation": [
            "addUser",
            "getUser"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Mailchimp/Mailchimp.js"
  },
  {
    "loadMethods": {},
    "label": "Moralis",
    "name": "moralis",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Moralis/moralis.svg",
    "type": "action",
    "category": "Network Provider",
    "version": 1,
    "description": "Execute Moralis APIs",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "EVM API",
            "name": "evmAPI",
            "description": "API for interacting/fetching standard onchain data using Moralis API key."
          },
          {
            "label": "NFT API",
            "name": "nftAPI",
            "description": "API for interacting/fetching NFT data using Moralis API key."
          },
          {
            "label": "DeFi API",
            "name": "defiAPI",
            "description": "API for interacting/fetching DeFi data using Moralis API key."
          },
          {
            "label": "Upload to IPFS",
            "name": "uploadFolder",
            "description": "Upload multiple files in a folder to IPFS and place them in a folder directory."
          }
        ],
        "default": "evmAPI"
      },
      {
        "label": "Folder",
        "name": "folderContent",
        "type": "folder",
        "description": "The path to a folder to be uploaded.",
        "show": {
          "actions.api": [
            "uploadFolder"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Moralis API Key",
            "name": "moralisApi"
          }
        ],
        "default": "moralisApi"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "eth"
          },
          {
            "label": "Goerli",
            "name": "goerli"
          },
          {
            "label": "Polygon Mainnet",
            "name": "polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "mumbai"
          },
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc testnet"
          },
          {
            "label": "Avalanche Mainnet",
            "name": "avalanche"
          },
          {
            "label": "Avalanche Testnet",
            "name": "avalanche testnet"
          },
          {
            "label": "Fantom Mainnet",
            "name": "fantom"
          },
          {
            "label": "Cronos Mainnet",
            "name": "cronos"
          },
          {
            "label": "Cronos Testnet",
            "name": "cronos testnet"
          }
        ],
        "hide": {
          "actions.api": [
            "uploadFolder"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "asyncOptions",
        "loadMethod": "getOperations",
        "hide": {
          "actions.api": [
            "uploadFolder"
          ]
        }
      },
      {
        "label": "Block Number or Hash",
        "name": "block_number_or_hash",
        "type": "string",
        "description": "The block hash or block number",
        "show": {
          "inputParameters.operation": [
            "getBlock",
            "getNFTTransfersByBlock"
          ]
        }
      },
      {
        "label": "Subdomain",
        "name": "subdomain",
        "type": "string",
        "optional": true,
        "description": "The subdomain of the moralis server to use (Only use when selecting local devchain as chain)",
        "show": {
          "inputParameters.operation": [
            "getBlock",
            "getNFTTransfersByBlock",
            "getTransaction"
          ]
        }
      },
      {
        "label": "Provider Url",
        "name": "providerUrl",
        "type": "string",
        "optional": true,
        "description": "Web3 provider url to user when using local dev chain",
        "show": {
          "inputParameters.operation": [
            "getDateToBlock"
          ]
        }
      },
      {
        "label": "Date",
        "name": "date",
        "type": "date",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getDateToBlock"
          ]
        }
      },
      {
        "label": "Transaction Hash",
        "name": "transaction_hash",
        "type": "string",
        "description": "The transaction hash",
        "show": {
          "inputParameters.operation": [
            "getTransaction"
          ]
        }
      },
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "Address of the contract",
        "show": {
          "inputParameters.operation": [
            "getContractEvents",
            "getTransactions",
            "getTokenTransfers"
          ]
        }
      },
      {
        "label": "Topic",
        "name": "topic",
        "type": "string",
        "description": "The topic of the event",
        "show": {
          "inputParameters.operation": [
            "getContractEvents"
          ]
        }
      },
      {
        "label": "Subdomain",
        "name": "subdomain",
        "type": "string",
        "optional": true,
        "description": "The subdomain of the moralis server to use (Only use when selecting local devchain as chain)",
        "show": {
          "inputParameters.operation": [
            "getContractEvents",
            "getTransactions",
            "getTokenTransfers"
          ]
        }
      },
      {
        "label": "Provider Url",
        "name": "providerUrl",
        "type": "string",
        "optional": true,
        "description": "Web3 provider url to user when using local dev chain",
        "show": {
          "inputParameters.operation": [
            "getContractEvents"
          ]
        }
      },
      {
        "label": "From Date",
        "name": "from_date",
        "type": "date",
        "description": "The date from where to get the logs",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getContractEvents",
            "getTransactions",
            "getTokenTransfers"
          ]
        }
      },
      {
        "label": "To Date",
        "name": "to_date",
        "type": "date",
        "description": "Get the logs to this date",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getContractEvents",
            "getTransactions",
            "getTokenTransfers"
          ]
        }
      },
      {
        "label": "From Block",
        "name": "from_block",
        "type": "number",
        "description": "The minimum block number from where to get the logs",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getContractEvents",
            "getTransactions",
            "getTokenTransfers"
          ]
        }
      },
      {
        "label": "To Block",
        "name": "to_block",
        "type": "number",
        "description": "The maximum block number from where to get the logs.",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getContractEvents",
            "getTransactions",
            "getTokenTransfers"
          ]
        }
      },
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "Address of the contract",
        "show": {
          "inputParameters.operation": [
            "runContractFunction"
          ]
        }
      },
      {
        "label": "Function Name",
        "name": "function_name",
        "type": "string",
        "description": "Function Name of the contract to run",
        "show": {
          "inputParameters.operation": [
            "runContractFunction"
          ]
        }
      },
      {
        "label": "ABI",
        "name": "abi",
        "type": "json",
        "placeholder": "[ \"event Transfer(address indexed from, address indexed to, uint value)\" ]",
        "description": "ABI of the contract in array",
        "show": {
          "inputParameters.operation": [
            "runContractFunction"
          ]
        }
      },
      {
        "label": "Function Parameters",
        "name": "params",
        "type": "json",
        "placeholder": "{\"var1\": \"value1\"}",
        "description": "Function parameters in json. Ex: {\"var1\": \"value1\"}",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "runContractFunction"
          ]
        }
      },
      {
        "label": "Subdomain",
        "name": "subdomain",
        "type": "string",
        "optional": true,
        "description": "The subdomain of the moralis server to use (Only use when selecting local devchain as chain)",
        "show": {
          "inputParameters.operation": [
            "runContractFunction"
          ]
        }
      },
      {
        "label": "Provider Url",
        "name": "providerUrl",
        "type": "string",
        "optional": true,
        "description": "Web3 provider url to user when using local dev chain",
        "show": {
          "inputParameters.operation": [
            "runContractFunction"
          ]
        }
      },
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "The address for which the native balance will be checked",
        "show": {
          "inputParameters.operation": [
            "getNativeBalance"
          ]
        }
      },
      {
        "label": "Provider Url",
        "name": "providerUrl",
        "type": "string",
        "optional": true,
        "description": "Web3 provider url to user when using local dev chain",
        "show": {
          "inputParameters.operation": [
            "getNativeBalance"
          ]
        }
      },
      {
        "label": "To Block",
        "name": "to_block",
        "type": "number",
        "description": "The block number on which the balances should be checked.",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getNativeBalance"
          ]
        }
      },
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "The address for which token balances will be checked",
        "show": {
          "inputParameters.operation": [
            "getTokenBalances"
          ]
        }
      },
      {
        "label": "Token Addresses",
        "name": "token_addresses",
        "type": "json",
        "placeholder": "[\"0xa, \"0xb\"]",
        "optional": true,
        "description": "The addresses to get balances for",
        "show": {
          "inputParameters.operation": [
            "getTokenBalances"
          ]
        }
      },
      {
        "label": "Subdomain",
        "name": "subdomain",
        "type": "string",
        "optional": true,
        "description": "The subdomain of the moralis server to use (Only use when selecting local devchain as chain)",
        "show": {
          "inputParameters.operation": [
            "getTokenBalances"
          ]
        }
      },
      {
        "label": "To Block",
        "name": "to_block",
        "type": "number",
        "description": "The block number on which the balances should be checked.",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getTokenBalances"
          ]
        }
      },
      {
        "label": "Block Number or Hash",
        "name": "block_number_or_hash",
        "type": "string",
        "description": "The block hash or block number",
        "show": {
          "inputParameters.operation": [
            "getNFTTransfersByBlock"
          ]
        }
      },
      {
        "label": "Subdomain",
        "name": "subdomain",
        "type": "string",
        "optional": true,
        "description": "The subdomain of the moralis server to use (Only use when selecting local devchain as chain)",
        "show": {
          "inputParameters.operation": [
            "getNFTTransfersByBlock"
          ]
        }
      },
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "The owner of a given token",
        "show": {
          "inputParameters.operation": [
            "getWalletNFTs"
          ]
        }
      },
      {
        "label": "Format",
        "name": "format",
        "type": "options",
        "optional": true,
        "description": "The format of the token id",
        "options": [
          {
            "label": "Decimal",
            "name": "decimal"
          },
          {
            "label": "Hex",
            "name": "hex"
          }
        ],
        "default": "decimal",
        "show": {
          "inputParameters.operation": [
            "getWalletNFTs"
          ]
        }
      },
      {
        "label": "Token Addresses",
        "name": "token_addresses",
        "type": "json",
        "placeholder": "[\"0xa, \"0xb\"]",
        "optional": true,
        "description": "The addresses to get balances for",
        "show": {
          "inputParameters.operation": [
            "getWalletNFTs"
          ]
        }
      },
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "The sender or recepient of the transfer",
        "show": {
          "inputParameters.operation": [
            "getWalletNFTTransfers"
          ]
        }
      },
      {
        "label": "Format",
        "name": "format",
        "type": "options",
        "optional": true,
        "description": "The format of the token id",
        "options": [
          {
            "label": "Decimal",
            "name": "decimal"
          },
          {
            "label": "Hex",
            "name": "hex"
          }
        ],
        "default": "decimal",
        "show": {
          "inputParameters.operation": [
            "getWalletNFTTransfers"
          ]
        }
      },
      {
        "label": "Direction",
        "name": "direction",
        "type": "options",
        "optional": true,
        "description": "The transfer direction",
        "options": [
          {
            "label": "Both",
            "name": "both"
          },
          {
            "label": "From",
            "name": "from"
          },
          {
            "label": "To",
            "name": "to"
          }
        ],
        "default": "both",
        "show": {
          "inputParameters.operation": [
            "getWalletNFTTransfers"
          ]
        }
      },
      {
        "label": "From Block",
        "name": "from_block",
        "type": "number",
        "description": "The minimum block number from where to get the transfers",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getWalletNFTTransfers"
          ]
        }
      },
      {
        "label": "To Block",
        "name": "to_block",
        "type": "number",
        "description": "To get the reserves at this block number",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getWalletNFTTransfers"
          ]
        }
      },
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "The owner wallet address of the NFT collections",
        "show": {
          "inputParameters.operation": [
            "getWalletNFTCollections"
          ]
        }
      },
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "The owner of a given token",
        "show": {
          "inputParameters.operation": [
            "getNFTsForContract"
          ]
        }
      },
      {
        "label": "Token Address",
        "name": "token_address",
        "type": "string",
        "description": "Address of the contract",
        "show": {
          "inputParameters.operation": [
            "getNFTsForContract"
          ]
        }
      },
      {
        "label": "Format",
        "name": "format",
        "type": "options",
        "optional": true,
        "description": "The format of the token id",
        "options": [
          {
            "label": "Decimal",
            "name": "decimal"
          },
          {
            "label": "Hex",
            "name": "hex"
          }
        ],
        "default": "decimal",
        "show": {
          "inputParameters.operation": [
            "getNFTsForContract",
            "getNFTTransfersFromToBlock"
          ]
        }
      },
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "Address of the contract",
        "show": {
          "inputParameters.operation": [
            "getNFTTrades",
            "getNFTLowestPrice"
          ]
        }
      },
      {
        "label": "Marketplace",
        "name": "marketplace",
        "type": "options",
        "optional": true,
        "description": "Marketplace from where to get the trades",
        "options": [
          {
            "label": "Opensea",
            "name": "opensea"
          }
        ],
        "default": "opensea",
        "show": {
          "inputParameters.operation": [
            "getNFTTrades",
            "getNFTLowestPrice"
          ]
        }
      },
      {
        "label": "Provider Url",
        "name": "providerUrl",
        "type": "string",
        "optional": true,
        "description": "Web3 provider url to user when using local dev chain",
        "show": {
          "inputParameters.operation": [
            "getNFTTrades",
            "getNFTLowestPrice"
          ]
        }
      },
      {
        "label": "From Date",
        "name": "from_date",
        "type": "date",
        "description": "The date from where to get the transfers ",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getNFTTrades",
            "getNFTTransfersFromToBlock"
          ]
        }
      },
      {
        "label": "To Date",
        "name": "to_date",
        "type": "date",
        "description": "Get the transfers to this date",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getNFTTrades",
            "getNFTTransfersFromToBlock"
          ]
        }
      },
      {
        "label": "From Block",
        "name": "from_block",
        "type": "number",
        "description": "The minimum block number from where to get the transfers.",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getNFTTrades",
            "getNFTTransfersFromToBlock"
          ]
        }
      },
      {
        "label": "To Block",
        "name": "to_block",
        "type": "number",
        "description": "The maximum block number from where to get the transfers.",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getNFTTrades",
            "getNFTTransfersFromToBlock"
          ]
        }
      },
      {
        "label": "Days",
        "name": "days",
        "type": "number",
        "description": "The number of days to look back to find the lowest price. If not provided 7 days will be the default",
        "optional": true,
        "show": {
          "inputParameters.operation": [
            "getNFTLowestPrice"
          ]
        }
      },
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "Address of the contract",
        "show": {
          "inputParameters.operation": [
            "getContractNFTs",
            "getNFTContractTransfers",
            "getNFTOwners",
            "getNFTMetadata"
          ]
        }
      },
      {
        "label": "Total Ranges",
        "name": "totalRanges",
        "type": "number",
        "optional": true,
        "description": "The number of subranges to split the results into",
        "show": {
          "inputParameters.operation": [
            "getContractNFTs"
          ]
        }
      },
      {
        "label": "Range",
        "name": "range",
        "type": "number",
        "optional": true,
        "description": "The desired subrange to query",
        "show": {
          "inputParameters.operation": [
            "getContractNFTs"
          ]
        }
      },
      {
        "label": "Format",
        "name": "format",
        "type": "options",
        "optional": true,
        "description": "The format of the token id",
        "options": [
          {
            "label": "Decimal",
            "name": "decimal"
          },
          {
            "label": "Hex",
            "name": "hex"
          }
        ],
        "default": "decimal",
        "show": {
          "inputParameters.operation": [
            "getContractNFTs",
            "getNFTContractTransfers",
            "getNFTOwners"
          ]
        }
      },
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "Address of the contract",
        "show": {
          "inputParameters.operation": [
            "reSyncMetadata",
            "getNFTTokenIdMetadata",
            "getNFTTokenIdOwners",
            "getNFTTokenIdTransfers"
          ]
        }
      },
      {
        "label": "Token Id",
        "name": "token_id",
        "type": "string",
        "description": "The id of the token",
        "show": {
          "inputParameters.operation": [
            "reSyncMetadata",
            "getNFTTokenIdMetadata",
            "getNFTTokenIdOwners",
            "getNFTTokenIdTransfers"
          ]
        }
      },
      {
        "label": "Flag",
        "name": "flag",
        "type": "options",
        "optional": true,
        "description": "The type of resync to operate",
        "options": [
          {
            "label": "URI",
            "name": "uri"
          },
          {
            "label": "Metadata",
            "name": "metadata"
          }
        ],
        "default": "uri",
        "show": {
          "inputParameters.operation": [
            "reSyncMetadata"
          ]
        }
      },
      {
        "label": "Mode",
        "name": "mode",
        "type": "options",
        "optional": true,
        "description": "To define the behaviour of the endpoint",
        "options": [
          {
            "label": "Async",
            "name": "async"
          },
          {
            "label": "Sync",
            "name": "sync"
          }
        ],
        "default": "async",
        "show": {
          "inputParameters.operation": [
            "reSyncMetadata"
          ]
        }
      },
      {
        "label": "Format",
        "name": "format",
        "type": "options",
        "optional": true,
        "description": "The format of the token id",
        "options": [
          {
            "label": "Decimal",
            "name": "decimal"
          },
          {
            "label": "Hex",
            "name": "hex"
          }
        ],
        "default": "decimal",
        "show": {
          "inputParameters.operation": [
            "getNFTTokenIdMetadata",
            "getNFTTokenIdOwners",
            "getNFTTokenIdTransfers"
          ]
        }
      },
      {
        "label": "Order",
        "name": "order",
        "type": "string",
        "optional": true,
        "description": "The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \"block_number\", \"block_number.ASC\", \"block_number.DESC\", Example 2: \"block_number and contract_type\", \"block_number.ASC,contract_type.DESC\"",
        "show": {
          "inputParameters.operation": [
            "getNFTTokenIdTransfers"
          ]
        }
      },
      {
        "label": "Pair Address",
        "name": "pairAddress",
        "type": "string",
        "description": "Liquidity pair address",
        "show": {
          "inputParameters.operation": [
            "getPairReserves"
          ]
        }
      },
      {
        "label": "To Block",
        "name": "to_block",
        "type": "string",
        "description": "To get the reserves at this block number",
        "show": {
          "inputParameters.operation": [
            "getPairReserves"
          ]
        }
      },
      {
        "label": "To Date",
        "name": "to_date",
        "type": "date",
        "description": "Get the reserves to this date",
        "show": {
          "inputParameters.operation": [
            "getPairReserves"
          ]
        }
      },
      {
        "label": "Token0 Address",
        "name": "token0_address",
        "type": "string",
        "description": "Token0 address",
        "show": {
          "inputParameters.operation": [
            "getPairAddress"
          ]
        }
      },
      {
        "label": "Token1 Address",
        "name": "token1_address",
        "type": "string",
        "description": "Token1 address",
        "show": {
          "inputParameters.operation": [
            "getPairAddress"
          ]
        }
      },
      {
        "label": "Exchange",
        "name": "exchange",
        "type": "options",
        "description": "The factory name or address of the token exchange",
        "options": [
          {
            "label": "UniSwapV2",
            "name": "uniswapv2"
          },
          {
            "label": "UniSwapV3",
            "name": "uniswapv3"
          },
          {
            "label": "SushiSwapV2",
            "name": "sushiswapv2"
          },
          {
            "label": "PancakeSwapV2",
            "name": "pancakeswapv2"
          },
          {
            "label": "PancakeSwapV1",
            "name": "pancakeswapv1"
          },
          {
            "label": "QuickSwap",
            "name": "quickswap"
          }
        ],
        "default": "uniswapv2",
        "show": {
          "inputParameters.operation": [
            "getPairAddress"
          ]
        }
      },
      {
        "label": "To Block",
        "name": "to_block",
        "type": "string",
        "description": "To get the reserves at this block number",
        "show": {
          "inputParameters.operation": [
            "getPairAddress"
          ]
        }
      },
      {
        "label": "To Date",
        "name": "to_date",
        "type": "date",
        "description": "Get the reserves to this date",
        "show": {
          "inputParameters.operation": [
            "getPairAddress"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Moralis/Moralis.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "NFT Mint Trigger",
    "name": "NFTMintTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/NFTMintTrigger/nftmint.png",
    "type": "trigger",
    "category": "NFT",
    "version": 1,
    "description": "Start workflow whenever a NFT is minted",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          }
        ],
        "default": "homestead"
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Token Standard",
        "name": "tokenStandard",
        "type": "options",
        "options": [
          {
            "label": "ERC-721",
            "name": "ERC721"
          }
        ],
        "default": "ERC721"
      },
      {
        "label": "To Wallet Address",
        "name": "toAddress",
        "type": "string",
        "default": ""
      },
      {
        "label": "NFT Address",
        "name": "nftAddress",
        "type": "string",
        "default": "",
        "optional": true
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/NFTMintTrigger/NFTMintTrigger.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "NFT Transfer Trigger",
    "name": "NFTTransferTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/NFTTransferTrigger/nfttransfer.png",
    "type": "trigger",
    "category": "NFT",
    "version": 1,
    "description": "Start workflow whenever a NFT transfer event happened",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          }
        ],
        "default": "homestead"
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Token Standard",
        "name": "tokenStandard",
        "type": "options",
        "options": [
          {
            "label": "ERC-721",
            "name": "ERC721"
          },
          {
            "label": "ERC-1155",
            "name": "ERC1155"
          }
        ],
        "default": "ERC721"
      },
      {
        "label": "Transfer Method",
        "name": "tokenMethod",
        "type": "options",
        "options": [
          {
            "label": "Single",
            "name": "single"
          },
          {
            "label": "Batch",
            "name": "batch"
          }
        ],
        "default": "single",
        "show": {
          "inputParameters.tokenStandard": [
            "ERC1155"
          ]
        }
      },
      {
        "label": "NFT Address",
        "name": "nftAddress",
        "type": "string",
        "default": "",
        "optional": true
      },
      {
        "label": "Direction",
        "name": "direction",
        "type": "options",
        "options": [
          {
            "label": "From",
            "name": "from",
            "description": "Transfer from wallet address"
          },
          {
            "label": "To",
            "name": "to",
            "description": "Transfer to wallet address"
          },
          {
            "label": "Both From and To",
            "name": "fromTo",
            "description": "Transfer from a wallet address to another wallet address"
          }
        ],
        "default": ""
      },
      {
        "label": "From Wallet Address",
        "name": "fromAddress",
        "type": "string",
        "default": "",
        "show": {
          "inputParameters.direction": [
            "from",
            "fromTo"
          ]
        }
      },
      {
        "label": "To Wallet Address",
        "name": "toAddress",
        "type": "string",
        "default": "",
        "show": {
          "inputParameters.direction": [
            "to",
            "fromTo"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/NFTTransferTrigger/NFTTransferTrigger.js"
  },
  {
    "label": "NodeJS",
    "name": "nodeJS",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/NodeJS/nodejs.png",
    "type": "action",
    "category": "Development",
    "version": 1,
    "description": "Execute code within NodeVM sandbox",
    "incoming": 1,
    "outgoing": 1,
    "inputParameters": [
      {
        "label": "Code",
        "name": "code",
        "type": "code",
        "default": "console.info($nodeData);\nconst example = 'Hello World!';\nreturn example;",
        "description": "Custom code to run"
      },
      {
        "label": "External Modules",
        "name": "external",
        "type": "json",
        "placeholder": "[\"axios\"]",
        "description": "Import installed dependencies within Outerbridge",
        "optional": true
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/NodeJS/NodeJS.js"
  },
  {
    "label": "Notion",
    "name": "notion",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Notion/notion.svg",
    "type": "action",
    "category": "Productivity",
    "version": 1,
    "description": "Work with Notion page, database or block",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Target",
        "name": "target",
        "type": "options",
        "options": [
          {
            "label": "Search all pages",
            "name": "searchTarget"
          },
          {
            "label": "Page",
            "name": "pageTarget"
          },
          {
            "label": "Database",
            "name": "databaseTarget"
          },
          {
            "label": "Block",
            "name": "blockTarget"
          }
        ]
      },
      {
        "label": "Page Operations",
        "name": "pageOperation",
        "type": "options",
        "options": [
          {
            "label": "Get Page",
            "name": "getPage"
          },
          {
            "label": "Create Page",
            "name": "createPage"
          },
          {
            "label": "Update Page",
            "name": "updatePage"
          },
          {
            "label": "Delete Page",
            "name": "deletePage"
          }
        ],
        "default": "Get Page",
        "show": {
          "actions.target": [
            "pageTarget"
          ]
        }
      },
      {
        "label": "Database Operations",
        "name": "databaseOperation",
        "type": "options",
        "options": [
          {
            "label": "Get Database",
            "name": "getDatabase"
          },
          {
            "label": "Create Database",
            "name": "createDatabase"
          },
          {
            "label": "Update Database",
            "name": "updateDatabase"
          },
          {
            "label": "Query Database",
            "name": "queryDatabase"
          }
        ],
        "default": "Get Database",
        "show": {
          "actions.target": [
            "databaseTarget"
          ]
        }
      },
      {
        "label": "Block Operations",
        "name": "blockOperation",
        "type": "options",
        "options": [
          {
            "label": "Get Block",
            "name": "getBlock"
          },
          {
            "label": "Update Block",
            "name": "updateBlock"
          },
          {
            "label": "Get Block Children",
            "name": "getBlockChildren"
          },
          {
            "label": "Append Block Children",
            "name": "appendBlockChildren"
          },
          {
            "label": "Delete Block",
            "name": "deleteBlock"
          }
        ],
        "default": "Get Block",
        "show": {
          "actions.target": [
            "blockTarget"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Notion Version",
        "name": "notionVersion",
        "type": "string",
        "optional": false,
        "description": "Notion Version to be used in the Headers of the request",
        "default": "2022-06-28"
      },
      {
        "label": "Page ID",
        "name": "pageID",
        "type": "string",
        "optional": false,
        "description": "ID of the page",
        "show": {
          "actions.pageOperation": [
            "getPage",
            "updatePage",
            "deletePage"
          ]
        }
      },
      {
        "label": "Database ID",
        "name": "databaseID",
        "type": "string",
        "optional": false,
        "description": "ID of the database",
        "show": {
          "actions.databaseOperation": [
            "getDatabase",
            "updateDatabase",
            "queryDatabase"
          ]
        }
      },
      {
        "label": "Block ID",
        "name": "blockID",
        "type": "string",
        "optional": false,
        "description": "ID of the block",
        "show": {
          "actions.blockOperation": [
            "getBlock",
            "updateBlock",
            "deleteBlock",
            "appendBlockChildren",
            "getBlockChildren"
          ]
        }
      },
      {
        "label": "Query String",
        "name": "queryString",
        "type": "string",
        "optional": false,
        "description": "Name of the page (with your Notion Integration) to be searched",
        "show": {
          "actions.target": [
            "searchTarget"
          ]
        }
      },
      {
        "label": "Body",
        "name": "pageBody",
        "type": "json",
        "description": "Refer to the <a target\"_blank\" href=\"https://developers.notion.com/reference/page\">Notion API docs</a> on how to structure the request body for page",
        "show": {
          "actions.pageOperation": [
            "createPage",
            "updatePage"
          ]
        },
        "placeholder": "{\n            \"parent\": {\n                \"database_id\": \"{{databaseID}}\"\n            },\n            \"properties\": {\n                \"Name\": {\n                    \"title\": [\n                        {\n                            \"text\": { \"content\": \"New Media Article\" }\n                        }\n                    ]\n                }\n            }\n        }",
        "optional": false
      },
      {
        "label": "Body",
        "name": "databaseBody",
        "type": "json",
        "description": "Refer to the <a target=\"_blank\" href=\"https://developers.notion.com/reference/database\">Notion API docs</a> on how to structure the request body for database",
        "show": {
          "actions.databaseOperation": [
            "createDatabase",
            "updateDatabase",
            "queryDatabase"
          ]
        },
        "placeholder": "{\n            \"parent\": {\n                \"type\": \"page_id\",\n                \"page_id\": \"{{pageID}}\"\n            },\n            \"title\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": { \"content\": \"Grocery List\", } }\n            ],\n            \"properties\": {\n                \"Name\": {\n                    \"title\": {}\n                }\n            }\n        }",
        "optional": false
      },
      {
        "label": "Body",
        "name": "blockBody",
        "type": "json",
        "description": "Refer to the <a target=\"_blank\" href=\"https://developers.notion.com/reference/block\">Notion API docs</> on how to structure the request body for block",
        "show": {
          "actions.blockOperation": [
            "updateBlock",
            "appendBlockChildren"
          ]
        },
        "placeholder": "{\n            \"paragraph\": {\n                \"rich_text\": [{\n                    \"type\": \"text\", \n                    \"text\": { \"content\": \"hello to you\"}\n                }]\n            }\n        }",
        "optional": false
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Notion Integration Token",
            "name": "notionApi"
          }
        ],
        "default": "notionApi"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Notion/Notion.js"
  },
  {
    "loadMethods": {},
    "label": "OpenAI",
    "name": "openAI",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/OpenAI/openai.png",
    "type": "action",
    "category": "Artificial Intelligence",
    "version": 1,
    "description": "ChatGPT, image generation or text completion from prompt via OpenAI API",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "ChatGPT",
            "name": "chatgpt"
          },
          {
            "label": "Generate Image via text prompt",
            "name": "generateImage"
          },
          {
            "label": "Generate Text Completion via text prompt",
            "name": "textCompletion"
          }
        ]
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "OpenAI API Key",
            "name": "openAIApi"
          }
        ],
        "default": "openAIApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Model",
        "name": "model",
        "type": "asyncOptions",
        "loadMethod": "listModels",
        "description": "AI model to use.",
        "default": "text-davinci-003",
        "show": {
          "actions.operation": [
            "textCompletion"
          ]
        }
      },
      {
        "label": "Model",
        "name": "model",
        "type": "options",
        "options": [
          {
            "label": "gpt-3.5-turbo",
            "name": "gpt-3.5-turbo"
          },
          {
            "label": "gpt-3.5-turbo-0301",
            "name": "gpt-3.5-turbo-0301"
          }
        ],
        "description": "ChatGPT model to use.",
        "default": "gpt-3.5-turbo",
        "show": {
          "actions.operation": [
            "chatgpt"
          ]
        }
      },
      {
        "label": "Text Prompt",
        "name": "prompt",
        "type": "string",
        "default": "",
        "placeholder": "Write me a 250 words essay on fish",
        "description": "The prompt for chatpgt",
        "show": {
          "actions.operation": [
            "chatgpt"
          ]
        }
      },
      {
        "label": "Text Prompt",
        "name": "prompt",
        "type": "string",
        "default": "",
        "placeholder": "Say this is a test",
        "description": "The prompt to generate completions for",
        "show": {
          "actions.operation": [
            "textCompletion"
          ]
        }
      },
      {
        "label": "Image Description",
        "name": "prompt",
        "type": "string",
        "default": "",
        "placeholder": "Photograph of an astronaut riding a horse",
        "description": "Description of the image you want to generated. The maximum length is 1000 characters.",
        "show": {
          "actions.operation": [
            "generateImage"
          ]
        }
      },
      {
        "label": "Image Number",
        "name": "imageNumber",
        "type": "number",
        "placeholder": "1",
        "default": "1",
        "description": "The number of images to generate. Must be between 1 and 10.",
        "optional": true,
        "show": {
          "actions.operation": [
            "generateImage"
          ]
        }
      },
      {
        "label": "Image Size",
        "name": "imageSize",
        "type": "options",
        "description": "The size of the generated images.",
        "options": [
          {
            "label": "256x256",
            "name": "256x256"
          },
          {
            "label": "512x512",
            "name": "512x512"
          },
          {
            "label": "1024x1024",
            "name": "1024x1024"
          }
        ],
        "optional": true,
        "default": "1024x1024",
        "show": {
          "actions.operation": [
            "generateImage"
          ]
        }
      },
      {
        "label": "Response Format",
        "name": "response_format",
        "type": "options",
        "description": "The format in which the generated images are returned.",
        "options": [
          {
            "label": "url",
            "name": "url"
          },
          {
            "label": "b64_json",
            "name": "b64_json"
          }
        ],
        "default": "url",
        "optional": true,
        "show": {
          "actions.operation": [
            "generateImage"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/OpenAI/OpenAI.js"
  },
  {
    "label": "OpenSea",
    "name": "opensea",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Opensea/opensea.svg",
    "type": "action",
    "category": "NFT",
    "version": 1,
    "description": "Query OpenSea information",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Retrieve Assets",
            "name": "retrieveAssets",
            "description": "Returns a set of NFTs."
          },
          {
            "label": "Retrieve Events",
            "name": "retrieveEvents",
            "description": "Returns a list of Events."
          },
          {
            "label": "Retrieve Collections",
            "name": "retrieveCollections",
            "description": "Returns a list of collections supported and vetted by OpenSea."
          },
          {
            "label": "Retrieve Bundles",
            "name": "retrieveBundles",
            "description": "Returns a list of bundles. Bundles are groups of NFTs for sale on OpenSea."
          },
          {
            "label": "Retrieve An Asset",
            "name": "retrieveAnAsset",
            "description": "Fetch information about a single NFT, based on its contract address and token ID."
          },
          {
            "label": "Retrieve A Contract",
            "name": "retrieveAContract",
            "description": "Fetch detailed information about a specified contract."
          },
          {
            "label": "Retrieve A Collection",
            "name": "retrieveACollection",
            "description": "Retrieve more in-depth information about an individual collection, including real time statistics such as floor price."
          },
          {
            "label": "Retrieve Collection Stats",
            "name": "retrieveCollectionStats",
            "description": "Fetch stats for a specific collection, including real-time floor price data."
          }
        ],
        "default": ""
      },
      {
        "label": "Event Type",
        "name": "event_type",
        "type": "options",
        "options": [
          {
            "label": "Auctions",
            "name": "created"
          },
          {
            "label": "Sales",
            "name": "successful"
          },
          {
            "label": "Transfer",
            "name": "transfer"
          },
          {
            "label": "Approve",
            "name": "approve"
          },
          {
            "label": "Bid Entered",
            "name": "bid_entered"
          },
          {
            "label": "Bid Withdrawn",
            "name": "bid_withdrawn"
          },
          {
            "label": "Cancelled",
            "name": "cancelled"
          },
          {
            "label": "All Events",
            "name": "all"
          }
        ],
        "default": "",
        "description": "The event type to filter",
        "show": {
          "actions.operation": [
            "retrieveEvents"
          ]
        }
      },
      {
        "label": "Auction Type",
        "name": "auction_type",
        "type": "options",
        "options": [
          {
            "label": "Sell to the highest bidder",
            "name": "english",
            "description": "The highest bid wins at the end"
          },
          {
            "label": "Sell with a declining price",
            "name": "dutch",
            "description": "The price falls until someone purchases the item"
          },
          {
            "label": "CryptoPunks Auctions",
            "name": "min-price"
          }
        ],
        "default": "",
        "optional": true,
        "description": "Filter by an auction type",
        "show": {
          "actions.operation": [
            "retrieveEvents"
          ],
          "actions.event_type": [
            "created"
          ]
        }
      },
      {
        "label": "Environment",
        "name": "environment",
        "type": "options",
        "description": "Environment to execute operation: Test or Main",
        "options": [
          {
            "label": "TEST",
            "name": "https://testnets-api.opensea.io/api/v1",
            "description": "Testnet: https://testnets.opensea.io/"
          },
          {
            "label": "MAIN",
            "name": "https://api.opensea.io/api/v1",
            "description": "Mainnet: https://opensea.io/"
          }
        ],
        "default": ""
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "OpenSea API Key",
            "name": "openSeaApi",
            "description": "How to get API key: https://docs.opensea.io/reference/request-an-api-key"
          }
        ],
        "default": "openSeaApi",
        "show": {
          "actions.environment": [
            "https://api.opensea.io/api/v1"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Owner",
        "name": "owner",
        "type": "string",
        "default": "",
        "optional": true,
        "description": "The address of the owner of the assets",
        "show": {
          "actions.operation": [
            "retrieveAssets"
          ]
        }
      },
      {
        "label": "Token Ids",
        "name": "token_ids",
        "type": "json",
        "placeholder": "[\"1\", \"2\"]",
        "optional": true,
        "description": "An array of token IDs to search for",
        "show": {
          "actions.operation": [
            "retrieveAssets"
          ]
        }
      },
      {
        "label": "Asset Contract Address",
        "name": "asset_contract_address",
        "type": "string",
        "default": "",
        "optional": true,
        "description": "The NFT contract address for the assets",
        "show": {
          "actions.operation": [
            "retrieveAssets"
          ]
        }
      },
      {
        "label": "Asset Contract Addresses",
        "name": "asset_contract_addresses",
        "type": "json",
        "placeholder": "[\"0xa\", \"0xb\"]",
        "optional": true,
        "description": "An array of contract addresses to search for",
        "show": {
          "actions.operation": [
            "retrieveAssets"
          ]
        }
      },
      {
        "label": "Order By",
        "name": "order_by",
        "type": "options",
        "options": [
          {
            "label": "Sale Date",
            "name": "sale_date",
            "description": "Last sale's transaction's timestamp"
          },
          {
            "label": "Sale Count ",
            "name": "sale_count",
            "description": "Number of sales"
          },
          {
            "label": "Sale Price ",
            "name": "sale_price",
            "description": "Last sale's total_price"
          }
        ],
        "default": "",
        "optional": true,
        "description": "How to order the assets returned. By default, the API returns the fastest ordering. ",
        "show": {
          "actions.operation": [
            "retrieveAssets"
          ]
        }
      },
      {
        "label": "Order Direction",
        "name": "order_direction",
        "type": "options",
        "options": [
          {
            "label": "Descending",
            "name": "desc"
          },
          {
            "label": "Ascending",
            "name": "asc"
          }
        ],
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "retrieveAssets"
          ]
        }
      },
      {
        "label": "Offset",
        "name": "offset",
        "type": "number",
        "default": "",
        "optional": true,
        "description": "Offset for pagination",
        "show": {
          "actions.operation": [
            "retrieveAssets"
          ]
        }
      },
      {
        "label": "Limit",
        "name": "limit",
        "type": "number",
        "default": 20,
        "optional": true,
        "description": "Limit for pagination. Defaults to 20, capped at 50.",
        "show": {
          "actions.operation": [
            "retrieveAssets"
          ]
        }
      },
      {
        "label": "Collection",
        "name": "collection",
        "type": "string",
        "default": "",
        "optional": true,
        "description": "Limit responses to members of a collection. Case sensitive and must match the collection slug exactly. Will return all assets from all contracts in a collection.",
        "show": {
          "actions.operation": [
            "retrieveAssets"
          ]
        }
      },
      {
        "label": "Include Orders",
        "name": "include_orders",
        "type": "boolean",
        "default": false,
        "optional": true,
        "description": "A flag determining if order information should be included in the response.",
        "show": {
          "actions.operation": [
            "retrieveAssets"
          ]
        }
      },
      {
        "label": "Asset Contract Address",
        "name": "asset_contract_address",
        "type": "string",
        "default": "",
        "optional": true,
        "description": "The NFT contract address for the assets for which to show events",
        "show": {
          "actions.operation": [
            "retrieveEvents"
          ]
        }
      },
      {
        "label": "Collection Slug",
        "name": "collection_slug",
        "type": "string",
        "default": "",
        "optional": true,
        "description": "Events from a collection. For instance: if a collection url is: https://opensea.io/collection/my-collection-1, collection slug is my-collection-1.",
        "show": {
          "actions.operation": [
            "retrieveEvents"
          ]
        }
      },
      {
        "label": "Token Id",
        "name": "token_id",
        "type": "number",
        "default": "",
        "optional": true,
        "description": "The token's id to optionally filter by",
        "show": {
          "actions.operation": [
            "retrieveEvents"
          ]
        }
      },
      {
        "label": "Account Address",
        "name": "account_address",
        "type": "string",
        "default": "",
        "optional": true,
        "description": "A user account's wallet address to filter for events on an account",
        "show": {
          "actions.operation": [
            "retrieveEvents"
          ]
        }
      },
      {
        "label": "Only Opensea",
        "name": "only_opensea",
        "type": "boolean",
        "default": false,
        "optional": true,
        "description": "Restrict to events on OpenSea auctions",
        "show": {
          "actions.operation": [
            "retrieveEvents"
          ]
        }
      },
      {
        "label": "Offset",
        "name": "offset",
        "type": "number",
        "default": "",
        "description": "Offset for pagination",
        "optional": true,
        "show": {
          "actions.operation": [
            "retrieveEvents"
          ]
        }
      },
      {
        "label": "Limit",
        "name": "limit",
        "type": "number",
        "default": 20,
        "optional": true,
        "description": "Limit for pagination",
        "show": {
          "actions.operation": [
            "retrieveEvents"
          ]
        }
      },
      {
        "label": "Occurred Before",
        "name": "occurred_before",
        "type": "date",
        "optional": true,
        "description": "Only show events listed before this date.",
        "show": {
          "actions.operation": [
            "retrieveEvents"
          ]
        }
      },
      {
        "label": "Occurred After",
        "name": "occurred_after",
        "type": "date",
        "optional": true,
        "description": "Only show events listed after this date.",
        "show": {
          "actions.operation": [
            "retrieveEvents"
          ]
        }
      },
      {
        "label": "Asset Owner",
        "name": "asset_owner",
        "type": "string",
        "default": "",
        "optional": true,
        "description": "A wallet address. If specified, will return collections where the owner owns at least one asset belonging to smart contracts in the collection.",
        "show": {
          "actions.operation": [
            "retrieveCollections"
          ]
        }
      },
      {
        "label": "Offset",
        "name": "offset",
        "type": "number",
        "default": "",
        "description": "Offset for pagination",
        "optional": true,
        "show": {
          "actions.operation": [
            "retrieveCollections"
          ]
        }
      },
      {
        "label": "Limit",
        "name": "limit",
        "type": "number",
        "default": 20,
        "optional": true,
        "description": "Limit for pagination",
        "show": {
          "actions.operation": [
            "retrieveCollections"
          ]
        }
      },
      {
        "label": "On Sale",
        "name": "on_sale",
        "type": "boolean",
        "default": false,
        "optional": true,
        "description": "If set to true, only show bundles currently on sale. If set to false, only show bundles that have been sold or cancelled.",
        "show": {
          "actions.operation": [
            "retrieveBundles"
          ]
        }
      },
      {
        "label": "Owner",
        "name": "owner",
        "type": "string",
        "default": "",
        "description": "Account address of the owner of a bundle (and all assets within)",
        "optional": true,
        "show": {
          "actions.operation": [
            "retrieveBundles"
          ]
        }
      },
      {
        "label": "Asset Contract Address",
        "name": "asset_contract_address",
        "type": "string",
        "default": "",
        "optional": true,
        "description": "Contract address of all the assets in a bundle. Only works for homogenous bundles, not mixed ones.",
        "show": {
          "actions.operation": [
            "retrieveBundles"
          ]
        }
      },
      {
        "label": "Asset Contract Addresses",
        "name": "asset_contract_addresses",
        "type": "json",
        "placeholder": "[\"0xa\", \"0xb\"]",
        "optional": true,
        "description": "An array of contract addresses to search for",
        "show": {
          "actions.operation": [
            "retrieveBundles"
          ]
        }
      },
      {
        "label": "Token Ids",
        "name": "token_ids",
        "type": "json",
        "placeholder": "[\"1\", \"2\"]",
        "optional": true,
        "description": "A list of token IDs for showing only bundles with at least one of the token IDs in the list",
        "show": {
          "actions.operation": [
            "retrieveBundles"
          ]
        }
      },
      {
        "label": "Offset",
        "name": "offset",
        "type": "number",
        "default": "",
        "description": "Offset for pagination",
        "optional": true,
        "show": {
          "actions.operation": [
            "retrieveBundles"
          ]
        }
      },
      {
        "label": "Limit",
        "name": "limit",
        "type": "number",
        "default": 20,
        "optional": true,
        "description": "Limit for pagination",
        "show": {
          "actions.operation": [
            "retrieveBundles"
          ]
        }
      },
      {
        "label": "Asset Contract Address",
        "name": "asset_contract_address",
        "type": "string",
        "default": "",
        "description": "The NFT contract address for the assets",
        "show": {
          "actions.operation": [
            "retrieveAnAsset"
          ]
        }
      },
      {
        "label": "Token Id",
        "name": "token_id",
        "type": "string",
        "default": "",
        "description": "Token ID for this item",
        "show": {
          "actions.operation": [
            "retrieveAnAsset"
          ]
        }
      },
      {
        "label": "Asset Contract Address",
        "name": "asset_contract_address",
        "type": "string",
        "default": "",
        "description": "The NFT contract address for the assets",
        "show": {
          "actions.operation": [
            "retrieveAContract"
          ]
        }
      },
      {
        "label": "Collection Slug",
        "name": "collection_slug",
        "type": "string",
        "default": "",
        "description": "For instance: if a collection url is: https://opensea.io/collection/my-collection-1, collection slug is my-collection-1.",
        "show": {
          "actions.operation": [
            "retrieveACollection",
            "retrieveCollectionStats"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Opensea/Opensea.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "label": "OpenSea Event Trigger",
    "name": "openSeaEventTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Opensea/opensea.svg",
    "type": "trigger",
    "category": "NFT",
    "version": 1,
    "description": "Start workflow whenever OpenSea event occurs",
    "incoming": 0,
    "outgoing": 1,
    "actions": [
      {
        "label": "Event Type",
        "name": "event_type",
        "type": "options",
        "options": [
          {
            "label": "New Auctions",
            "name": "created"
          },
          {
            "label": "New Sales",
            "name": "successful"
          },
          {
            "label": "New Transfer",
            "name": "transfer"
          },
          {
            "label": "New Approve",
            "name": "approve"
          },
          {
            "label": "New Bid Entered",
            "name": "bid_entered"
          },
          {
            "label": "Bid Withdrawn",
            "name": "bid_withdrawn"
          },
          {
            "label": "Cancelled",
            "name": "cancelled"
          }
        ],
        "default": "",
        "description": "The event type to filter"
      },
      {
        "label": "Auction Type",
        "name": "auction_type",
        "type": "options",
        "options": [
          {
            "label": "Sell to the highest bidder",
            "name": "english",
            "description": "The highest bid wins at the end"
          },
          {
            "label": "Sell with a declining price",
            "name": "dutch",
            "description": "The price falls until someone purchases the item"
          },
          {
            "label": "CryptoPunks Auctions",
            "name": "min-price"
          }
        ],
        "default": "",
        "optional": true,
        "description": "Filter by an auction type",
        "show": {
          "actions.event_type": [
            "created"
          ]
        }
      },
      {
        "label": "Environment",
        "name": "environment",
        "type": "options",
        "description": "Environment to listen to event: Test or Main",
        "options": [
          {
            "label": "TEST",
            "name": "https://testnets-api.opensea.io/api/v1",
            "description": "Testnet: https://testnets.opensea.io/"
          },
          {
            "label": "MAIN",
            "name": "https://api.opensea.io/api/v1",
            "description": "Mainnet: https://opensea.io/"
          }
        ],
        "default": ""
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "OpenSea API Key",
            "name": "openSeaApi",
            "description": "How to get API key: https://docs.opensea.io/reference/request-an-api-key"
          }
        ],
        "default": "openSeaApi",
        "show": {
          "actions.environment": [
            "https://api.opensea.io/api/v1"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Listen From",
        "name": "listenFrom",
        "type": "options",
        "options": [
          {
            "label": "From A NFT",
            "name": "fromANFT"
          },
          {
            "label": "From A Collection",
            "name": "fromACollection"
          }
        ],
        "default": "fromANFT",
        "description": "Listen event from a NFT or collection"
      },
      {
        "label": "Asset Contract Address",
        "name": "asset_contract_address",
        "type": "string",
        "default": "",
        "description": "The NFT contract address for the assets for which to show events",
        "show": {
          "inputParameters.listenFrom": [
            "fromANFT"
          ]
        }
      },
      {
        "label": "Token Id",
        "name": "token_id",
        "type": "number",
        "default": "",
        "description": "The token's id of NFT",
        "show": {
          "inputParameters.listenFrom": [
            "fromANFT"
          ]
        }
      },
      {
        "label": "Collection Slug",
        "name": "collection_slug",
        "type": "string",
        "default": "",
        "optional": true,
        "description": "Events from a collection. For instance: if a collection url is: https://opensea.io/collection/my-collection-1, collection slug is my-collection-1.",
        "show": {
          "inputParameters.listenFrom": [
            "fromACollection"
          ]
        }
      },
      {
        "label": "Account Address",
        "name": "account_address",
        "type": "string",
        "default": "",
        "optional": true,
        "description": "A user account's wallet address to filter for events on an account"
      },
      {
        "label": "Only Opensea",
        "name": "only_opensea",
        "type": "boolean",
        "default": false,
        "optional": true,
        "description": "Restrict to events on OpenSea auctions"
      },
      {
        "label": "Polling Time",
        "name": "pollTime",
        "type": "options",
        "description": "How often should we keep checking the event",
        "options": [
          {
            "label": "Every 15 secs",
            "name": "15s"
          },
          {
            "label": "Every 30 secs",
            "name": "30s"
          },
          {
            "label": "Every 1 min",
            "name": "1min"
          },
          {
            "label": "Every 5 min",
            "name": "5min"
          },
          {
            "label": "Every 10 min",
            "name": "10min"
          }
        ],
        "default": "30s"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Opensea/OpenseaEventTrigger.js"
  },
  {
    "label": "Optimism Scan",
    "name": "optimismscan",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/OptimismScan/optimismScan.svg",
    "type": "action",
    "category": "Block Explorer",
    "version": 1,
    "description": "Optimism Public API",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "description": "Choose the API to execute",
        "options": [
          {
            "label": "Get ETH Balance",
            "name": "getEthBalance",
            "description": "Get ETH Balance for a single Address"
          },
          {
            "label": "Get ETH Balance Multi",
            "name": "getEthBalanceMulti",
            "description": "Get ETH Balance for multiple Addresses in a single call"
          },
          {
            "label": "Get ERC20 Token Transfer Events",
            "name": "getErc20TokenTransfer",
            "description": "Get a list of \"ERC-20 - Token Transfer Events\" by Address"
          },
          {
            "label": "Get Deposit History",
            "name": "getDeposit",
            "description": "Get list of L1 Deposits done by Address"
          },
          {
            "label": "Get Withdrawal History",
            "name": "getWithdrawal",
            "description": "Get list of L2 Withdrawals done by Address"
          },
          {
            "label": "Get Contract ABI",
            "name": "getContractAbi",
            "description": "Get Contract ABI for Verified Contract Source Codes"
          },
          {
            "label": "Get Contract Source Code",
            "name": "getContractSourceCode",
            "description": "Get Contract Source Code for Verified Contract Source Codes. (Replace the address with the actual contract address)"
          },
          {
            "label": "Get ERC-20 Token Total Supply",
            "name": "getErc20TokenSupply",
            "description": "Get ERC-20 Token Total Supply by Contract Address"
          },
          {
            "label": "Get ERC-20 Token Account Balance",
            "name": "getErc20TokenAccountBalance",
            "description": "Get ERC-20 Token Account Balance by Contract Address and Address"
          }
        ],
        "default": "getEthBalance"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "OptimismScan API Key",
            "name": "optimisticEtherscanApi"
          }
        ],
        "default": "optimisticEtherscanApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "show": {
          "actions.api": [
            "getEthBalance",
            "getNormalTransactions",
            "getErc20TokenTransfer",
            "getDeposit",
            "getWithdrawal",
            "getContractAbi",
            "getContractSourceCode",
            "getErc20TokenAccountBalance"
          ]
        }
      },
      {
        "label": "Addresses",
        "name": "addresses",
        "type": "array",
        "array": [
          {
            "label": "Address",
            "name": "address",
            "type": "string"
          }
        ],
        "show": {
          "actions.api": [
            "getEthBalanceMulti"
          ]
        }
      },
      {
        "label": "Tag",
        "name": "tag",
        "type": "options",
        "options": [
          {
            "label": "latest",
            "name": "latest"
          }
        ],
        "default": "latest",
        "show": {
          "actions.api": [
            "getEthBalance",
            "getEthBalanceMulti",
            "getErc20TokenAccountBalance"
          ]
        }
      },
      {
        "label": "Start Block",
        "name": "startBlock",
        "type": "number",
        "optional": true,
        "description": "the block number to start searching for transactions",
        "show": {
          "actions.api": [
            "getNormalTransactions",
            "getErc20TokenTransfer"
          ]
        },
        "default": 0
      },
      {
        "label": "End Block",
        "name": "endBlock",
        "type": "number",
        "optional": true,
        "description": "the block number to stop searching for transactions",
        "show": {
          "actions.api": [
            "getNormalTransactions",
            "getErc20TokenTransfer"
          ]
        }
      },
      {
        "label": "Page",
        "name": "page",
        "type": "number",
        "optional": true,
        "description": "the page number, if pagination is enabled",
        "show": {
          "actions.api": [
            "getNormalTransactions",
            "getErc20TokenTransfer"
          ]
        },
        "default": 1
      },
      {
        "label": "Offset",
        "name": "offset",
        "type": "number",
        "optional": true,
        "description": "the number of transactions displayed per page",
        "show": {
          "actions.api": [
            "getNormalTransactions",
            "getErc20TokenTransfer"
          ]
        },
        "default": 10
      },
      {
        "label": "Sort By",
        "name": "sortBy",
        "type": "options",
        "options": [
          {
            "label": "Desc",
            "name": "desc"
          },
          {
            "label": "Asc",
            "name": "asc"
          }
        ],
        "optional": true,
        "show": {
          "actions.api": [
            "getNormalTransactions",
            "getErc20TokenTransfer",
            "getDeposit"
          ]
        },
        "default": "desc"
      },
      {
        "label": "Contract Address [Optional]",
        "name": "contractAddressOptional",
        "type": "string",
        "description": "the contract address of the ERC-20 token",
        "optional": true,
        "show": {
          "actions.api": [
            "getErc20TokenTransfer"
          ]
        }
      },
      {
        "label": "Contract Address",
        "name": "contractAddress",
        "type": "string",
        "description": "the contract address of the ERC-20 token",
        "show": {
          "actions.api": [
            "getErc20TokenSupply",
            "getErc20TokenAccountBalance"
          ]
        }
      },
      {
        "label": "Token Address",
        "name": "tokenAddress",
        "type": "string",
        "description": "the contract address of the ERC-20 token",
        "optional": true,
        "show": {
          "actions.api": [
            "getDeposit"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/OptimismScan/OptimismScan.js"
  },
  {
    "loadMethods": {},
    "label": "PancakeSwap",
    "name": "pancakeSwap",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/PancakeSwap/pancakeswap.png",
    "type": "action",
    "category": "Decentralized Finance",
    "version": 1,
    "description": "Execute PancakeSwap operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Swap Tokens",
            "name": "swapTokens"
          },
          {
            "label": "Custom Query",
            "name": "customQuery",
            "description": "Custom subgraph query to retrieve more information. https://github.com/pancakeswap/pancake-subgraph"
          }
        ],
        "default": "swapTokens"
      },
      {
        "label": "Query Entity",
        "name": "queryEntity",
        "type": "options",
        "options": [
          {
            "label": "Blocks",
            "name": "https://api.thegraph.com/subgraphs/name/pancakeswap/blocks",
            "description": "Tracks all blocks on Binance Smart Chain."
          },
          {
            "label": "Exchange",
            "name": "https://bsc.streamingfast.io/subgraphs/name/pancakeswap/exchange-v2",
            "description": "Tracks all PancakeSwap Exchange data with price, volume, liquidity"
          },
          {
            "label": "Lottery",
            "name": "https://api.thegraph.com/subgraphs/name/pancakeswap/lottery",
            "description": "Tracks all PancakeSwap Lottery with rounds, draws and tickets."
          },
          {
            "label": "NFT Market (v1)",
            "name": "https://api.thegraph.com/subgraphs/name/pancakeswap/nft-market",
            "description": "Tracks all PancakeSwap NFT Market for ERC-721."
          },
          {
            "label": "Pairs",
            "name": "https://api.thegraph.com/subgraphs/name/pancakeswap/pairs",
            "description": "Tracks all PancakeSwap Pairs and Tokens."
          },
          {
            "label": "Pancake Squad",
            "name": "https://api.thegraph.com/subgraphs/name/pancakeswap/pancake-squad",
            "description": "Tracks all Pancake Squad metrics with Owners, Tokens (including metadata), and Transactions."
          },
          {
            "label": "Prediction (v1)",
            "name": "https://api.thegraph.com/subgraphs/name/pancakeswap/prediction",
            "description": "Tracks all PancakeSwap Prediction (v1) with market, rounds, and bets."
          },
          {
            "label": "Prediction (v2)",
            "name": "https://api.thegraph.com/subgraphs/name/pancakeswap/prediction-v2",
            "description": "Tracks all PancakeSwap Prediction (v2) with market, rounds, and bets."
          },
          {
            "label": "Profile",
            "name": "https://api.thegraph.com/subgraphs/name/pancakeswap/profile",
            "description": "Tracks all PancakeSwap Profile with teams, users, points and campaigns."
          },
          {
            "label": "SmartChef",
            "name": "https://api.thegraph.com/subgraphs/name/pancakeswap/smartchef",
            "description": "Tracks all PancakeSwap SmartChef (a.k.a. Syrup Pools) with tokens and rewards."
          },
          {
            "label": "Timelock",
            "name": "https://api.thegraph.com/subgraphs/name/pancakeswap/timelock",
            "description": "Tracks all PancakeSwap Timelock queued, executed, and cancelled transactions."
          },
          {
            "label": "MasterChef (v2)",
            "name": "https://api.thegraph.com/subgraphs/name/pancakeswap/masterchef-v2",
            "description": "Tracks data for MasterChefV2."
          }
        ],
        "default": "https://api.thegraph.com/subgraphs/name/pancakeswap/pairs",
        "show": {
          "actions.operation": [
            "customQuery"
          ]
        }
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc",
            "parentGroup": "Binance Smart Chain"
          }
        ],
        "default": "bsc",
        "show": {
          "actions.operation": [
            "customQuery",
            "swapTokens"
          ]
        }
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "options",
        "options": [
          {
            "label": "Binance",
            "name": "binance",
            "description": "Public Binance RPC/Websocket",
            "parentGroup": "Public Nodes"
          },
          {
            "label": "QuickNode",
            "name": "quicknode",
            "description": "QuickNode HTTP and WSS Endpoints",
            "parentGroup": "Private Nodes"
          },
          {
            "label": "Custom RPC Endpoint",
            "name": "customRPC",
            "description": "HTTP endpoint",
            "parentGroup": "Custom Nodes"
          },
          {
            "label": "Custom Websocket Endpoint",
            "name": "customWebsocket",
            "description": "WSS Endpoint",
            "parentGroup": "Custom Nodes"
          }
        ],
        "default": "binance",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ],
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ],
          "actions.operation": [
            "swapTokens"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "quicknode"
          ],
          "actions.operation": [
            "swapTokens"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "From Token",
        "name": "fromToken",
        "type": "asyncOptions",
        "description": "Contract address of the token you want to convert FROM.",
        "loadMethod": "getTokens",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "To Token",
        "name": "toToken",
        "type": "asyncOptions",
        "description": "Contract address of the token you want to convert TO.",
        "loadMethod": "getTokens",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Amount To Swap",
        "name": "amountToSwap",
        "type": "number",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet account to swap tokens.",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Query",
        "name": "query",
        "type": "string",
        "rows": 10,
        "show": {
          "actions.operation": [
            "customQuery"
          ]
        }
      },
      {
        "label": "Slippage Tolerance (%)",
        "name": "slippage",
        "type": "number",
        "default": 0.5,
        "optional": true,
        "description": "How large of a price movement to tolerate before trade will fail to execute. Default to 0.5%.",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Tx Deadline (mins)",
        "name": "deadlineMinutes",
        "type": "number",
        "default": 20,
        "optional": true,
        "description": "Minutes after which the transaction will fail. Default to 20 mins.",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Disable Multihops",
        "name": "disableMultihops",
        "type": "boolean",
        "default": false,
        "optional": true,
        "description": "Restricts swaps to direct pairs only. Default to false.",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/PancakeSwap/PancakeSwap.js"
  },
  {
    "label": "Pinata",
    "name": "pinata",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Pinata/pinata.svg",
    "type": "action",
    "category": "InterPlanetary File System",
    "version": 1,
    "description": "Pin your content to IPFS with Pinata",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Select Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "JSON",
            "name": "json"
          },
          {
            "label": "Multiple JSON",
            "name": "multipleJson",
            "description": "Wrap each json from an array into a json file (0.json, 1.json..) and store under a directory"
          },
          {
            "label": "File",
            "name": "file"
          },
          {
            "label": "Folder",
            "name": "folder"
          },
          {
            "label": "CID (Content Identifier)",
            "name": "CID"
          },
          {
            "label": "Raw Data (Base64)",
            "name": "base64",
            "description": "Wrap the raw data in base64 format into a file and store under a directory"
          },
          {
            "label": "Multiple Raw Data (Base64)",
            "name": "multipleBase64",
            "description": "Wrap each raw data in base64 format from an array into a file (0.png, 1.pdf..) and store under a directory"
          },
          {
            "label": "List Pin By CID Jobs",
            "name": "listPin"
          },
          {
            "label": "Update Metadata",
            "name": "updateMetadata"
          },
          {
            "label": "Remove Files (Unpin)",
            "name": "unpin"
          }
        ],
        "description": "Content type to be pinned"
      },
      {
        "label": "JSON Content",
        "name": "jsonContent",
        "type": "json",
        "placeholder": "{\"var1\": \"value1\"}",
        "description": "The content of JSON to be pinned.",
        "show": {
          "actions.operation": [
            "json"
          ]
        }
      },
      {
        "label": "JSON Content In Array",
        "name": "jsonContentArray",
        "type": "json",
        "placeholder": "[ {\"var1\": \"value1\"}, {\"var2\": \"value2\"} ]",
        "description": "An array with multiple json objects to be pinned.",
        "show": {
          "actions.operation": [
            "multipleJson"
          ]
        }
      },
      {
        "label": "Raw Data Content (Base64)",
        "name": "base64Content",
        "type": "string",
        "placeholder": "data:image/png;base64,<base64_string>",
        "description": "Raw data content in base64 format to be pinned. Commonly used with image, pdf",
        "show": {
          "actions.operation": [
            "base64"
          ]
        }
      },
      {
        "label": "Raw Data Content In Array (Base64)",
        "name": "base64ContentArray",
        "type": "json",
        "placeholder": "[ \"data:image/png;base64,<base64_string>\", \"data:application/pdf;base64,<base64_string>\" ]",
        "description": "An array with multiple raw data content in base64 format to be pinned. Commonly used with image, pdf",
        "show": {
          "actions.operation": [
            "multipleBase64"
          ]
        }
      },
      {
        "label": "File",
        "name": "fileContent",
        "type": "file",
        "description": "The path to a file to be pinned.",
        "show": {
          "actions.operation": [
            "file"
          ]
        }
      },
      {
        "label": "Folder",
        "name": "folderContent",
        "type": "folder",
        "description": "The path to a folder to be pinned.",
        "show": {
          "actions.operation": [
            "folder"
          ]
        }
      },
      {
        "label": "Hash To Pin (CID)",
        "name": "hashToPin",
        "type": "string",
        "description": "A CID (or content identifier) is a hash generated by the IPFS protocol and representative of a piece of content.",
        "show": {
          "actions.operation": [
            "CID"
          ]
        },
        "placeholder": "Qmc5TDt1jynbZGvLiGnJvLh9RqB4uxVUg4vgMAcPqwpEiy"
      },
      {
        "label": "IPFS Pin Hash (CID)",
        "name": "ipfsPinHash",
        "type": "string",
        "description": "A CID (or content identifier) is a hash generated by the IPFS protocol and representative of a piece of content.",
        "show": {
          "actions.operation": [
            "updateMetadata"
          ]
        },
        "placeholder": "Qmc5TDt1jynbZGvLiGnJvLh9RqB4uxVUg4vgMAcPqwpEiy"
      },
      {
        "label": "Pin To Delete (CID)",
        "name": "pinToDelete",
        "type": "string",
        "description": "A CID (or content identifier) is a hash generated by the IPFS protocol and representative of a piece of content.",
        "show": {
          "actions.operation": [
            "unpin"
          ]
        },
        "placeholder": "Qmc5TDt1jynbZGvLiGnJvLh9RqB4uxVUg4vgMAcPqwpEiy"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Pinata API Key",
            "name": "pinataApi"
          }
        ],
        "default": "pinataApi"
      }
    ],
    "inputParameters": [
      {
        "label": "CID Version",
        "name": "cidVersion",
        "type": "options",
        "options": [
          {
            "label": "0 (CIDv0)",
            "name": "0"
          },
          {
            "label": "1 (CIDv1)",
            "name": "1"
          }
        ],
        "optional": true,
        "description": "The CID Version IPFS will use when creating a hash for your content.",
        "show": {
          "actions.operation": [
            "json",
            "multipleJson",
            "base64",
            "multipleBase64",
            "file",
            "folder",
            "CID"
          ]
        }
      },
      {
        "label": "Wrap With Directory",
        "name": "wrapWithDirectory",
        "type": "boolean",
        "default": false,
        "optional": true,
        "description": "Wrap your content inside of a directory when adding to IPFS. This allows users to retrieve content via a filename instead of just a hash.",
        "show": {
          "actions.operation": [
            "json",
            "base64",
            "file",
            "folder",
            "CID"
          ]
        }
      },
      {
        "label": "Metadata Name",
        "name": "name",
        "type": "string",
        "default": "",
        "optional": true,
        "description": "A custom name. If you don't provide this value, it will automatically be populated by the original name of the file you've uploaded.",
        "show": {
          "actions.operation": [
            "json",
            "multipleJson",
            "base64",
            "multipleBase64",
            "file",
            "folder",
            "CID",
            "updateMetadata"
          ]
        }
      },
      {
        "label": "Metadata KeyValues",
        "name": "keyvalues",
        "type": "json",
        "placeholder": "{\"var1\": \"value1\"}",
        "optional": true,
        "description": "The key values object allows for users to provide any custom key / value pairs they want for the file being uploaded.",
        "show": {
          "actions.operation": [
            "json",
            "multipleJson",
            "base64",
            "multipleBase64",
            "file",
            "folder",
            "CID",
            "updateMetadata"
          ]
        }
      },
      {
        "label": "Host Nodes",
        "name": "hostNodes",
        "type": "json",
        "placeholder": "[\"0xa\", \"0xb\"]",
        "optional": true,
        "description": "Multiaddresses of nodes your content is already stored on. Max 5 nodes.",
        "show": {
          "actions.operation": [
            "CID"
          ]
        }
      },
      {
        "label": "Status",
        "name": "status",
        "type": "options",
        "options": [
          {
            "label": "Prechecking",
            "name": "prechecking",
            "description": "Pinata is running preliminary validations on your pin request."
          },
          {
            "label": "Searching",
            "name": "searching",
            "description": "Pinata is actively searching for your content on the IPFS network. This may take some time if your content is isolated."
          },
          {
            "label": "Retrieving",
            "name": "retrieving",
            "description": "Pinata has located your content and is now in the process of retrieving it."
          },
          {
            "label": "Expired",
            "name": "expired",
            "description": "Pinata wasn't able to find your content after a day of searching the IPFS network. Please make sure your content is hosted on the IPFS network before trying to pin again."
          },
          {
            "label": "Over Free Limit",
            "name": "over_free_limit",
            "description": "Pinning this object would put you over the free tier limit. Please add a credit card to continue pinning content."
          },
          {
            "label": "Over Max Size",
            "name": "over_max_size",
            "description": "This object is too large of an item to pin. If you're seeing this, please contact us for a more custom solution."
          },
          {
            "label": "Invalid Object",
            "name": "invalid_object",
            "description": "The object you're attempting to pin isn't readable by IPFS nodes. Please contact us if you receive this, as we'd like to better understand what you're attempting to pin."
          },
          {
            "label": "Bad Host Node",
            "name": "bad_host_node",
            "description": "You provided a host node that was either invalid or unreachable. Please make sure all provided host nodes are online and reachable."
          }
        ],
        "description": "Filter by the status of the job in the pinning queue.",
        "show": {
          "actions.operation": [
            "listPin"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Pinata/Pinata.js"
  },
  {
    "label": "PolygonScan",
    "name": "polygonscan",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/PolygonScan/polygonscan.png",
    "type": "action",
    "category": "Block Explorer",
    "version": 1,
    "description": "PolygonScan Public API",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "Get MATIC Balance",
            "name": "getMaticBalance",
            "description": "Returns the MATIC balance of a given address. The result is returned in wei."
          },
          {
            "label": "Get Historical MATIC Balance [PRO]",
            "name": "getHistoricalMaticBalance",
            "description": "Returns the historical MATIC balance of an address at a certain block height. The result is returned in wei"
          },
          {
            "label": "Get transactions",
            "name": "getTransactions",
            "description": "Returns the list of transactions performed by an address, with optional pagination."
          },
          {
            "label": "Get internal transactions",
            "name": "getInternalTransactions",
            "description": "Returns the list of internal transactions performed by an address, with optional pagination."
          },
          {
            "label": "Get internal transactions by hash",
            "name": "getInternalTransactionsByHash",
            "description": "Returns the list of internal transactions performed within a transaction."
          },
          {
            "label": "Get internal transactions by block",
            "name": "getInternalTransactionsByBlock",
            "description": "Returns the list of internal transactions performed within a block range, with optional pagination."
          },
          {
            "label": "Get list of Blocks Validated by Address",
            "name": "getBlocksValidated",
            "description": "Returns the list of blocks validated by an address."
          },
          {
            "label": "Get Contract ABI",
            "name": "getAbi",
            "description": "Returns the contract Application Binary Interface ( ABI ) of a verified smart contract."
          },
          {
            "label": "Get Contract Source Code",
            "name": "getContractSourceCode",
            "description": "Returns the Solidity source code of a verified smart contract."
          },
          {
            "label": "Check Transaction Receipt Status",
            "name": "getTransactionReceiptStatus",
            "description": "Returns the status code of a transaction execution."
          },
          {
            "label": "Get ERC20 Token Supply",
            "name": "getErc20TokenSupply",
            "description": "Returns the total supply of a ERC-20 token. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get ERC20 Token Balance",
            "name": "getErc20TokenBalance",
            "description": "Returns the current balance of a ERC-20 token of an address. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get Historical ERC-20 Token TotalSupply by ContractAddress & BlockNo [PRO]",
            "name": "getHistoricalErc20TokenSupply",
            "description": "Returns the historical amount of a ERC-20 token in circulation at a certain block height. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get Historical ERC-20 Token Account Balance by ContractAddress & BlockNo [PRO]",
            "name": "getHistoricalErc20TokenBalance",
            "description": "Returns the balance of a ERC-20 token of an address at a certain block height. The result is returned in the token's smallest decimal representation.\n                        Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398"
          },
          {
            "label": "Get Token Info [PRO]",
            "name": "getTokenInfo",
            "description": "Returns project information and social media links of an ERC-20/ERC-721 token."
          },
          {
            "label": "Get MATIC Price",
            "name": "getMaticPrice",
            "description": "Returns the latest price of 1 MATIC."
          },
          {
            "label": "Get Historical MATIC Price [PRO]",
            "name": "getHistoricalMaticPrice",
            "description": "Returns the historical price of 1 MATIC."
          }
        ],
        "default": "getMaticBalance"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "description": "Network to execute API: Test or Real",
        "options": [
          {
            "label": "Polygon Testnet",
            "name": "testnet"
          },
          {
            "label": "Polygon Mainnet",
            "name": "mainnet"
          }
        ],
        "default": "testnet"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "PolygonScan API Key",
            "name": "polygonscanApi"
          }
        ],
        "default": "polygonscanApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Polygon Address",
        "name": "address",
        "type": "string",
        "show": {
          "actions.api": [
            "getMaticBalance",
            "getHistoricalMaticBalance",
            "getTransactions",
            "getInternalTransactions",
            "getBlocksValidated",
            "getAbi",
            "getContractSourceCode",
            "getErc20TokenBalance",
            "getHistoricalErc20TokenBalance"
          ]
        }
      },
      {
        "label": "Block Number",
        "name": "blockno",
        "type": "number",
        "description": "the block number to check balance for eg. 2000000",
        "show": {
          "actions.api": [
            "getHistoricalMaticBalance",
            "getHistoricalErc20TokenSupply",
            "getHistoricalErc20TokenBalance"
          ]
        }
      },
      {
        "label": "Start Block",
        "name": "startBlock",
        "type": "number",
        "optional": true,
        "description": "the block number to start searching for transactions",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        },
        "default": 0
      },
      {
        "label": "End Block",
        "name": "endBlock",
        "type": "number",
        "optional": true,
        "description": "the block number to stop searching for transactions",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        }
      },
      {
        "label": "Page",
        "name": "page",
        "type": "number",
        "optional": true,
        "description": "the page number, if pagination is enabled",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock",
            "getBlocksValidated"
          ]
        },
        "default": 1
      },
      {
        "label": "Offset",
        "name": "offset",
        "type": "number",
        "optional": true,
        "description": "the number of transactions displayed per page",
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock",
            "getBlocksValidated"
          ]
        },
        "default": 10
      },
      {
        "label": "Sort By",
        "name": "sortBy",
        "type": "options",
        "optional": true,
        "options": [
          {
            "label": "Desc",
            "name": "desc"
          },
          {
            "label": "Asc",
            "name": "asc"
          }
        ],
        "show": {
          "actions.api": [
            "getTransactions",
            "getInternalTransactions",
            "getInternalTransactionsByBlock"
          ]
        },
        "default": "desc"
      },
      {
        "label": "Transaction Hash",
        "name": "txhash",
        "type": "string",
        "description": "the string representing the transaction hash to check for internal transactions",
        "show": {
          "actions.api": [
            "getInternalTransactionsByHash",
            "getTransactionReceiptStatus"
          ]
        }
      },
      {
        "label": "Block Type",
        "name": "blockType",
        "type": "options",
        "options": [
          {
            "label": "blocks",
            "name": "blocks"
          }
        ],
        "default": "blocks",
        "show": {
          "actions.api": [
            "getBlocksValidated"
          ]
        }
      },
      {
        "label": "Contract Address",
        "name": "contractAddress",
        "type": "string",
        "description": "the contract address of the ERC-20 token",
        "show": {
          "actions.api": [
            "getErc20TokenSupply",
            "getErc20TokenBalance",
            "getHistoricalErc20TokenSupply",
            "getHistoricalErc20TokenBalance",
            "getTokenInfo"
          ]
        }
      },
      {
        "label": "Tag",
        "name": "tag",
        "type": "options",
        "options": [
          {
            "label": "latest",
            "name": "latest"
          }
        ],
        "default": "latest",
        "show": {
          "actions.api": [
            "getErc20TokenBalance"
          ]
        }
      },
      {
        "label": "Start Time",
        "name": "startTime",
        "type": "date",
        "optional": true,
        "show": {
          "actions.api": [
            "getHistoricalMaticPrice"
          ]
        }
      },
      {
        "label": "End Time",
        "name": "endTime",
        "type": "date",
        "optional": true,
        "show": {
          "actions.api": [
            "getHistoricalMaticPrice"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/PolygonScan/PolygonScan.js"
  },
  {
    "loadMethods": {},
    "label": "QuickNode",
    "name": "quickNode",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/QuickNode/quicknode.svg",
    "type": "action",
    "category": "Network Provider",
    "version": 1,
    "description": "Perform QuickNode onchain operations",
    "incoming": 1,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead"
          },
          {
            "label": "Goerli",
            "name": "goerli"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum"
          },
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli"
          },
          {
            "label": "Arbitrum Nova",
            "name": "arbitrum-nova"
          },
          {
            "label": "Avalanche Mainnet",
            "name": "avalanche"
          },
          {
            "label": "Avalanche Testnet",
            "name": "avalanche-testnet"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli"
          },
          {
            "label": "Fantom Mainnet",
            "name": "fantom"
          },
          {
            "label": "Celo Mainnet",
            "name": "celo"
          },
          {
            "label": "Gnosis Mainnet",
            "name": "gnosis"
          },
          {
            "label": "Solana Mainnet",
            "name": "solana"
          },
          {
            "label": "Solana Devnet",
            "name": "solana-devnet"
          },
          {
            "label": "Solana Testnet",
            "name": "solana-testnet"
          }
        ]
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints"
          }
        ],
        "default": "quickNodeEndpoints"
      }
    ],
    "inputParameters": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "EVM Chain API",
            "name": "chainAPI",
            "description": "API for fetching standard onchain data using QuickNode supported calls",
            "show": {
              "networks.network": [
                "homestead",
                "goerli",
                "matic",
                "maticmum",
                "optimism",
                "optimism-goerli",
                "arbitrum",
                "arbitrum-goerli",
                "avalanche",
                "avalanche-testnet",
                "arbitrum-nova",
                "gnosis",
                "bsc",
                "bsc-testnet",
                "fantom",
                "celo"
              ]
            }
          },
          {
            "label": "NFT API",
            "name": "nftAPI",
            "description": "API for fetching cross-chain NFT data using QuickNode supported calls",
            "show": {
              "networks.network": [
                "homestead",
                "goerli",
                "bsc",
                "bsc-testnet",
                "solana",
                "solana-devnet",
                "solana-testnet"
              ]
            }
          },
          {
            "label": "Token API",
            "name": "tokenAPI",
            "description": "API to look up ERC-20 tokens by wallet, token transfers, and token details instantly",
            "show": {
              "networks.network": [
                "homestead",
                "goerli",
                "bsc",
                "bsc-testnet"
              ]
            }
          },
          {
            "label": "Debug API",
            "name": "debugAPI",
            "description": "API for fetching debug traces using QuickNode supported calls (Trace Mode required)",
            "show": {
              "networks.network": [
                "homestead",
                "goerli",
                "matic",
                "maticmum",
                "optimism",
                "optimism-goerli",
                "arbitrum",
                "arbitrum-goerli",
                "avalanche",
                "avalanche-testnet",
                "arbitrum-nova",
                "bsc",
                "bsc-testnet",
                "celo"
              ]
            }
          },
          {
            "label": "Trace API",
            "name": "traceAPI",
            "description": "API for fetching traces using QuickNode supported calls (Trace Mode required and supported only on OpenEthereum & Erigon)",
            "show": {
              "networks.network": [
                "homestead",
                "goerli",
                "gnosis",
                "bsc",
                "bsc-testnet",
                "fantom",
                "arbitrum",
                "arbitrum-goerli"
              ]
            }
          },
          {
            "label": "Avalanche API",
            "name": "avaxAPI",
            "description": "API for fetching Avalanche on-chain data using QuickNode supported calls",
            "show": {
              "networks.network": [
                "avalanche",
                "avalanche-testnet"
              ]
            }
          },
          {
            "label": "Platform API",
            "name": "platformAPI",
            "description": "API for fetching Avalanche Platform data using QuickNode supported calls",
            "show": {
              "networks.network": [
                "avalanche",
                "avalanche-testnet"
              ]
            }
          },
          {
            "label": "Fantom API",
            "name": "fantomAPI",
            "description": "API for fetching Fantom on-chain data using QuickNode supported calls",
            "show": {
              "networks.network": [
                "fantom"
              ]
            }
          },
          {
            "label": "Solana API",
            "name": "solanaAPI",
            "description": "API for fetching Solana on-chain data using QuickNode supported calls",
            "show": {
              "networks.network": [
                "solana",
                "solana-devnet",
                "solana-testnet"
              ]
            }
          }
        ],
        "default": "chainAPI"
      },
      {
        "label": "Chain Category",
        "name": "chainCategory",
        "type": "options",
        "options": [
          {
            "label": "Retrieving Blocks",
            "name": "retrievingBlocks",
            "description": "Retrieve onchain blocks data"
          },
          {
            "label": "EVM/Smart Contract Execution",
            "name": "evmExecution",
            "description": "Execute or submit transaction onto blockchain"
          },
          {
            "label": "Reading Transactions",
            "name": "readingTransactions",
            "description": "Read onchain transactions data"
          },
          {
            "label": "Account Information",
            "name": "accountInformation",
            "description": "Retrieve onchain account information"
          },
          {
            "label": "Event Logs",
            "name": "eventLogs",
            "description": "Fetch onchain logs"
          },
          {
            "label": "Chain Information",
            "name": "chainInformation",
            "description": "Get general selected blockchain information"
          },
          {
            "label": "Retrieving Uncles",
            "name": "retrievingUncles",
            "description": "Retrieve onchain uncles blocks data"
          },
          {
            "label": "Filters",
            "name": "filters",
            "description": "Get block filters and logs, or create new filter"
          }
        ],
        "show": {
          "inputParameters.api": [
            "chainAPI"
          ]
        }
      },
      {
        "label": "Chain Category",
        "name": "chainCategory",
        "type": "options",
        "options": [
          {
            "label": "Reading & Writing Transactions",
            "name": "readWriteTransactions",
            "description": "Read and Write transactins onto Solana chain"
          },
          {
            "label": "Getting Blocks",
            "name": "gettingBlocks",
            "description": "Get Solana blocks data"
          },
          {
            "label": "Account Information",
            "name": "accountInformation",
            "description": "Retrieve Solana onchain account information"
          },
          {
            "label": "Network Information",
            "name": "networkInformation",
            "description": "Get Solana network onchain information"
          },
          {
            "label": "Slot Information",
            "name": "slotInformation",
            "description": "Fetch Solana slot information"
          },
          {
            "label": "Node Information",
            "name": "nodeInformation",
            "description": "Retrieve Solana node onchain information"
          },
          {
            "label": "Token Information",
            "name": "tokenInformation",
            "description": "Fetch Solana onchain token information"
          },
          {
            "label": "Network Inflation",
            "name": "networkInflation",
            "description": "Retrieve Solana network inflation onchain data"
          }
        ],
        "show": {
          "inputParameters.api": [
            "solanaAPI"
          ]
        }
      },
      {
        "label": "Operation",
        "name": "operation",
        "type": "asyncOptions",
        "loadMethod": "getOperations"
      },
      {
        "label": "Parameters",
        "name": "parameters",
        "type": "json",
        "placeholder": "[\n  \"param1\",\n  \"param2\"\n]",
        "optional": true,
        "description": "Operation parameters in array. Ex: [\"param1\", \"param2\"]",
        "show": {
          "inputParameters.api": [
            "chainAPI",
            "tokenAPI",
            "traceAPI",
            "debugAPI",
            "fantomAPI"
          ]
        }
      },
      {
        "label": "Parameters",
        "name": "parameters",
        "type": "json",
        "placeholder": "{\n  \"param1\": \"value1\"\n}",
        "optional": true,
        "description": "Operation parameters in JSON. Ex: {\"param1\": \"value1\"}",
        "show": {
          "inputParameters.api": [
            "nftAPI",
            "avaxAPI",
            "platformAPI"
          ]
        },
        "hide": {
          "inputParameters.operation": [
            "qn_verifyNFTsOwner",
            "qn_fetchNFTsByCreator",
            "requestAirdrop"
          ]
        }
      },
      {
        "label": "Parameters",
        "name": "parameters",
        "type": "json",
        "placeholder": "[\n  \"param1\",\n  \"param2\"\n]",
        "optional": true,
        "description": "Operation parameters in array. Ex: [\"param1\", \"param2\"]",
        "show": {
          "inputParameters.operation": [
            "qn_verifyNFTsOwner",
            "qn_fetchNFTsByCreator",
            "requestAirdrop"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/QuickNode/QuickNode.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "QuickNode Trigger",
    "name": "quickNodeTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/QuickNode/quicknode.svg",
    "type": "trigger",
    "category": "Network Provider",
    "version": 1,
    "description": "Start workflow whenever subscribed event happened",
    "incoming": 0,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead"
          },
          {
            "label": "Goerli",
            "name": "goerli"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum"
          },
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli"
          },
          {
            "label": "Arbitrum Nova",
            "name": "arbitrum-nova"
          },
          {
            "label": "Avalanche Mainnet",
            "name": "avalanche"
          },
          {
            "label": "Avalanche Testnet",
            "name": "avalanche-testnet"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli"
          },
          {
            "label": "Fantom Mainnet",
            "name": "fantom"
          },
          {
            "label": "Celo Mainnet",
            "name": "celo"
          },
          {
            "label": "Gnosis Mainnet",
            "name": "gnosis"
          },
          {
            "label": "Solana Mainnet",
            "name": "solana"
          },
          {
            "label": "Solana Devnet",
            "name": "solana-devnet"
          },
          {
            "label": "Solana Testnet",
            "name": "solana-testnet"
          }
        ]
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints"
          }
        ],
        "default": "quickNodeEndpoints"
      }
    ],
    "inputParameters": [
      {
        "label": "Subscribe Operation",
        "name": "subscribeOperation",
        "type": "asyncOptions",
        "loadMethod": "getSubscribeOperations"
      },
      {
        "label": "Parameters",
        "name": "parameters",
        "type": "json",
        "placeholder": "[\n  \"param1\",\n  \"param2\"\n]",
        "optional": true,
        "description": "Operation parameters in array. Ex: [\"param1\", \"param2\"]"
      },
      {
        "label": "Unsubscribe Operation",
        "name": "unsubscribeOperation",
        "type": "asyncOptions",
        "loadMethod": "getUnsubscribeOperations"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/QuickNode/QuickNodeTrigger.js"
  },
  {
    "loadMethods": {},
    "label": "Request Finance",
    "name": "requestFinance",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/RequestFinance/requestFinance.svg",
    "type": "action",
    "category": "Accounting",
    "version": 1,
    "description": "Issue invoices and accept payments in cryptocurrency using RequestFinance API",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Get Invoice",
            "name": "getSingleInvoice",
            "description": "Returns single invoice from RequestFinance account."
          },
          {
            "label": "Create Invoice",
            "name": "createInvoice",
            "description": "Creates a new payable invoice."
          },
          {
            "label": "Create Salary Payment",
            "name": "createSalaryPayment",
            "description": "Creates a new payable salary payment."
          }
        ]
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "RequestFinance API Key",
            "name": "requestFinanceApi"
          }
        ],
        "default": "requestFinanceApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Invoice",
        "name": "invoiceId",
        "type": "asyncOptions",
        "loadMethod": "getInvoices",
        "show": {
          "actions.operation": [
            "getSingleInvoice"
          ]
        }
      },
      {
        "label": "Salary Currency",
        "name": "salaryCurrency",
        "description": "Currency in which the salary will be issued in.",
        "type": "asyncOptions",
        "loadMethod": "getInvoiceCurrency",
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Salary Amount",
        "name": "salaryAmount",
        "description": "Amount of salary to be paid",
        "type": "number",
        "placeholder": "1000",
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "How do you want to pay?",
        "name": "salaryPaymentCurrency",
        "type": "asyncOptions",
        "loadMethod": "getPaymentCurrency",
        "description": "Currency in which the employer would like to pay in.",
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Employee Type",
        "name": "employeeType",
        "type": "options",
        "options": [
          {
            "label": "Existing",
            "name": "existing"
          },
          {
            "label": "New",
            "name": "new"
          }
        ],
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Employee",
        "name": "existingEmployee",
        "type": "asyncOptions",
        "loadMethod": "getEmployees",
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ],
          "inputParameters.employeeType": [
            "existing"
          ]
        }
      },
      {
        "label": "Employee Email",
        "name": "employeeEmail",
        "type": "string",
        "description": "Email of the employee",
        "default": "",
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ],
          "inputParameters.employeeType": [
            "new"
          ]
        }
      },
      {
        "label": "Employee Wallet Address",
        "name": "employeePaymentAddress",
        "type": "string",
        "description": "Wallet address of the employee to receive salary",
        "default": "",
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ],
          "inputParameters.employeeType": [
            "new"
          ]
        }
      },
      {
        "label": "Employee First Name",
        "name": "employeeFirstName",
        "type": "string",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ],
          "inputParameters.employeeType": [
            "new"
          ]
        }
      },
      {
        "label": "Employee Last Name",
        "name": "employeeLastName",
        "type": "string",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ],
          "inputParameters.employeeType": [
            "new"
          ]
        }
      },
      {
        "label": "Owner Email",
        "name": "companyEmail",
        "type": "string",
        "description": "Email of the owner that issues salary payment. Refer to <a target=\"_blank\" href=\"https://app.request.finance/account/profile\">Account page</a>",
        "default": "",
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Owner First Name",
        "name": "companyFirstName",
        "description": "First name of the owner that issues salary payment. Refer to <a target=\"_blank\" href=\"https://app.request.finance/account/profile\">Account page</a>",
        "type": "string",
        "default": "",
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Company Last Name",
        "name": "companyLastName",
        "description": "Last name of the owner that issues salary payment. Refer to <a target=\"_blank\" href=\"https://app.request.finance/account/profile\">Account page</a>",
        "type": "string",
        "default": "",
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Company Business Name",
        "name": "companyBusinessName",
        "type": "string",
        "description": "Business name of the company. Refer to <a target=\"_blank\" href=\"https://app.request.finance/account/profile\">Account page</a>",
        "optional": true,
        "default": "",
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Company Address Line 1",
        "name": "companyStreetAddress",
        "type": "string",
        "description": "Street, house, apartment of the company.",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Company Address Line 2",
        "name": "companyExtendedAddress",
        "type": "string",
        "description": "Street, house, apartment of the company.",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Company Postal Code",
        "name": "companyPostalCode",
        "type": "string",
        "description": "Post code of the company.",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Company State",
        "name": "companyRegion",
        "type": "string",
        "description": "Region of the company (e.g. “California”).",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Company Country",
        "name": "companyCountry",
        "description": "Country of the company (e.g. US).",
        "type": "asyncOptions",
        "loadMethod": "getCountry",
        "optional": true,
        "show": {
          "actions.operation": [
            "createSalaryPayment"
          ]
        }
      },
      {
        "label": "Invoice Currency",
        "name": "invoiceCurrency",
        "description": "Currency in which the invoice is denominated. For example, invoices can be denominated in USD, but buyers can pay in crypto.",
        "type": "asyncOptions",
        "loadMethod": "getInvoiceCurrency",
        "show": {
          "actions.operation": [
            "createInvoice"
          ]
        }
      },
      {
        "label": "Invoice Items",
        "name": "invoiceItems",
        "type": "array",
        "array": [
          {
            "label": "Name",
            "name": "name",
            "type": "string",
            "description": "Name of the product/service for which the invoice is created.",
            "default": ""
          },
          {
            "label": "Unit Price",
            "name": "unitPrice",
            "description": "Price of the product/service, excl. taxes. Max 2 decimal places",
            "type": "number"
          },
          {
            "label": "Quantity",
            "name": "quantity",
            "description": "Quantity of the product/service that was provided.",
            "type": "number"
          },
          {
            "label": "Tax Type",
            "name": "taxType",
            "description": "Currency code in which the invoice is denominated. For example, invoices can be denominated in USD, but buyers can pay in crypto.",
            "type": "options",
            "options": [
              {
                "label": "Fixed",
                "name": "fixed"
              },
              {
                "label": "Percentage",
                "name": "percentage"
              }
            ],
            "optional": true
          },
          {
            "label": "Tax Amount",
            "name": "taxAmount",
            "description": "Amount of the tax.",
            "type": "number",
            "show": {
              "inputParameters.invoiceItems[$index].taxType": [
                "fixed",
                "percentage"
              ]
            }
          }
        ],
        "show": {
          "actions.operation": [
            "createInvoice"
          ]
        }
      },
      {
        "label": "Payment Address",
        "name": "paymentAddress",
        "type": "string",
        "description": "Address which will receive the payment.",
        "default": "",
        "placeholder": "0xE597E474889537A3A9120d1B5793cdFAEf6B6c10",
        "show": {
          "actions.operation": [
            "createInvoice"
          ]
        }
      },
      {
        "label": "Payment Currency",
        "name": "paymentCurrency",
        "description": "Currency in which the invoice can be paid.",
        "type": "asyncOptions",
        "loadMethod": "getPaymentCurrency",
        "show": {
          "actions.operation": [
            "createInvoice"
          ]
        }
      },
      {
        "label": "Payment Due Date",
        "name": "paymentDueDate",
        "description": "Due date of the invoice. Last date the buyer can pay.",
        "type": "date",
        "optional": true,
        "show": {
          "actions.operation": [
            "createInvoice"
          ]
        }
      },
      {
        "label": "Client Type",
        "name": "clientType",
        "type": "options",
        "options": [
          {
            "label": "Existing",
            "name": "existing"
          },
          {
            "label": "New",
            "name": "new"
          }
        ],
        "show": {
          "actions.operation": [
            "createInvoice"
          ]
        }
      },
      {
        "label": "Client",
        "name": "existingClient",
        "type": "asyncOptions",
        "loadMethod": "getClients",
        "show": {
          "actions.operation": [
            "createInvoice"
          ],
          "inputParameters.clientType": [
            "existing"
          ]
        }
      },
      {
        "label": "Client Email",
        "name": "buyerInfoEmail",
        "type": "string",
        "description": "Email of the buyer/customer/client",
        "default": "",
        "show": {
          "actions.operation": [
            "createInvoice"
          ],
          "inputParameters.clientType": [
            "new"
          ]
        }
      },
      {
        "label": "Client Business Name",
        "name": "buyerInfoBusinessName",
        "type": "string",
        "description": "Business name of the buyer/customer/client",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createInvoice"
          ],
          "inputParameters.clientType": [
            "new"
          ]
        }
      },
      {
        "label": "Client First Name",
        "name": "buyerInfoFirstName",
        "type": "string",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createInvoice"
          ],
          "inputParameters.clientType": [
            "new"
          ]
        }
      },
      {
        "label": "Client Last Name",
        "name": "buyerInfoLastName",
        "type": "string",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createInvoice"
          ],
          "inputParameters.clientType": [
            "new"
          ]
        }
      },
      {
        "label": "Client Address Line 1",
        "name": "buyerInfoStreetAddress",
        "type": "string",
        "description": "Street, house, apartment of the buyer.",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createInvoice"
          ],
          "inputParameters.clientType": [
            "new"
          ]
        }
      },
      {
        "label": "Client Address Line 2",
        "name": "buyerInfoExtendedAddress",
        "type": "string",
        "description": "Street, house, apartment of the buyer.",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createInvoice"
          ],
          "inputParameters.clientType": [
            "new"
          ]
        }
      },
      {
        "label": "Client Postal Code",
        "name": "buyerInfoPostalCode",
        "type": "string",
        "description": "Post code of the buyer.",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createInvoice"
          ],
          "inputParameters.clientType": [
            "new"
          ]
        }
      },
      {
        "label": "Client State",
        "name": "buyerInfoRegion",
        "type": "string",
        "description": "Region of the buyer (e.g. “California”).",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createInvoice"
          ],
          "inputParameters.clientType": [
            "new"
          ]
        }
      },
      {
        "label": "Client Country",
        "name": "buyerInfoCountry",
        "description": "Country of the buyer (e.g. US).",
        "type": "asyncOptions",
        "loadMethod": "getCountry",
        "optional": true,
        "show": {
          "actions.operation": [
            "createInvoice"
          ],
          "inputParameters.clientType": [
            "new"
          ]
        }
      },
      {
        "label": "Client Tax Registration",
        "name": "buyerInfoTaxRegistration",
        "type": "string",
        "description": "Tax registration number of the buyer.",
        "default": "",
        "optional": true,
        "show": {
          "actions.operation": [
            "createInvoice"
          ],
          "inputParameters.clientType": [
            "new"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/RequestFinance/RequestFinance.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "Request Finance Trigger",
    "name": "requestFinanceTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/RequestFinance/requestFinance.svg",
    "type": "trigger",
    "category": "Accounting",
    "version": 1,
    "description": "Start workflow whenever receive new invoice or invoice status has changed",
    "incoming": 0,
    "outgoing": 1,
    "actions": [
      {
        "label": "Invoice Status",
        "name": "invoiceStatus",
        "type": "options",
        "options": [
          {
            "label": "New",
            "name": "new",
            "description": "Trigger workflow when new invoice received"
          },
          {
            "label": "Accepted",
            "name": "accepted",
            "description": "The invoice has been approved by the buyer."
          },
          {
            "label": "Declared Paid",
            "name": "declaredPaid",
            "description": "The buyer declared the invoice as paid. The seller has to confirm before the invoice can move into the paid status. This is necessary for currencies, where the Request Network does not yet support payment detection."
          },
          {
            "label": "Paid",
            "name": "paid",
            "description": "Seller has confirmed and marked the invoice as paid, i.e: the buyer paid the invoice."
          },
          {
            "label": "Canceled",
            "name": "canceled",
            "description": "The seller canceled the invoice."
          },
          {
            "label": "Rejected",
            "name": "rejected",
            "description": "The buyer rejected the invoice."
          }
        ],
        "default": "",
        "description": "Status of an invoice"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "RequestFinance API Key",
            "name": "requestFinanceApi"
          }
        ],
        "default": "requestFinanceApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Select Invoice",
        "name": "invoiceType",
        "type": "options",
        "options": [
          {
            "label": "Retrieve from existing invoices",
            "name": "existingInvoice"
          },
          {
            "label": "Custom invoice ID",
            "name": "customInvoice"
          }
        ],
        "hide": {
          "actions.invoiceStatus": [
            "new"
          ]
        }
      },
      {
        "label": "Invoice ID",
        "name": "invoiceId",
        "type": "string",
        "placeholder": "63e2c662d24445b79ada9c3d",
        "hide": {
          "actions.invoiceStatus": [
            "new"
          ]
        },
        "show": {
          "inputParameters.invoiceType": [
            "customInvoice"
          ]
        }
      },
      {
        "label": "Invoice",
        "name": "invoiceId",
        "type": "asyncOptions",
        "loadMethod": "getInvoices",
        "hide": {
          "actions.invoiceStatus": [
            "new"
          ]
        },
        "show": {
          "inputParameters.invoiceType": [
            "existingInvoice"
          ]
        }
      },
      {
        "label": "Polling Time",
        "name": "pollTime",
        "type": "options",
        "description": "How often should we keep checking the invoice status",
        "options": [
          {
            "label": "Every 15 secs",
            "name": "15s"
          },
          {
            "label": "Every 30 secs",
            "name": "30s"
          },
          {
            "label": "Every 1 min",
            "name": "1min"
          },
          {
            "label": "Every 5 min",
            "name": "5min"
          },
          {
            "label": "Every 10 min",
            "name": "10min"
          }
        ],
        "default": "30s"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/RequestFinance/RequestFinanceTrigger.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "label": "Scheduler",
    "name": "scheduler",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Scheduler/scheduler.svg",
    "type": "scheduler",
    "category": "Utilities",
    "version": 1.1,
    "description": "Start workflow at scheduled times",
    "incoming": 0,
    "outgoing": 1,
    "inputParameters": [
      {
        "label": "Pattern",
        "name": "pattern",
        "type": "options",
        "options": [
          {
            "label": "Repetitive",
            "name": "repetitive",
            "description": "Workflow will be triggered repetitively every X"
          },
          {
            "label": "Once",
            "name": "once",
            "description": "Workflow will be triggered only once at specific time"
          }
        ],
        "default": "repetitive"
      },
      {
        "label": "Date Time",
        "name": "specificDateTime",
        "type": "date",
        "description": "Choose a specific date time to trigger the workflow once",
        "show": {
          "inputParameters.pattern": [
            "once"
          ]
        }
      },
      {
        "label": "Schedules",
        "name": "scheduleTimes",
        "type": "array",
        "show": {
          "inputParameters.pattern": [
            "repetitive"
          ]
        },
        "array": [
          {
            "label": "Mode",
            "name": "mode",
            "type": "options",
            "options": [
              {
                "label": "Every Day",
                "name": "everyDay"
              },
              {
                "label": "Every Week",
                "name": "everyWeek"
              },
              {
                "label": "Every Month",
                "name": "everyMonth"
              },
              {
                "label": "Every X",
                "name": "everyX"
              },
              {
                "label": "Every Specific Time",
                "name": "specific"
              }
            ],
            "default": "everyDay"
          },
          {
            "label": "Specific Date Time",
            "name": "specificDateTime",
            "type": "date",
            "description": "Choose a specific date time to trigger the workflow",
            "show": {
              "inputParameters.scheduleTimes[$index].mode": [
                "specific"
              ]
            }
          },
          {
            "label": "Hour",
            "name": "hour",
            "type": "number",
            "hide": {
              "inputParameters.scheduleTimes[$index].mode": [
                "everyX",
                "specific"
              ]
            },
            "default": 21,
            "description": "[24H Format] Scheduled hour to trigger workflow"
          },
          {
            "label": "Minute",
            "name": "minute",
            "type": "number",
            "hide": {
              "inputParameters.scheduleTimes[$index].mode": [
                "everyX",
                "specific"
              ]
            },
            "default": 35,
            "description": "[0 - 59] Scheduled minute to trigger workflow"
          },
          {
            "label": "Day of Month",
            "name": "dayOfMonth",
            "type": "number",
            "show": {
              "inputParameters.scheduleTimes[$index].mode": [
                "everyMonth"
              ]
            },
            "default": 6,
            "description": "[1 - 31] Scheduled day to trigger workflow"
          },
          {
            "label": "Weekday",
            "name": "weekday",
            "type": "options",
            "show": {
              "inputParameters.scheduleTimes[$index].mode": [
                "everyWeek"
              ]
            },
            "options": [
              {
                "label": "Monday",
                "name": "1"
              },
              {
                "label": "Tuesday",
                "name": "2"
              },
              {
                "label": "Wednesday",
                "name": "3"
              },
              {
                "label": "Thursday",
                "name": "4"
              },
              {
                "label": "Friday",
                "name": "5"
              },
              {
                "label": "Saturday",
                "name": "6"
              },
              {
                "label": "Sunday",
                "name": "0"
              }
            ],
            "default": "3",
            "description": "Scheduled weekday to trigger workflow"
          },
          {
            "label": "Value",
            "name": "value",
            "type": "number",
            "show": {
              "inputParameters.scheduleTimes[$index].mode": [
                "everyX"
              ]
            },
            "default": 1,
            "description": "Scheduled X seconds/minutes/hours to trigger workflow"
          },
          {
            "label": "Unit",
            "name": "unit",
            "type": "options",
            "show": {
              "inputParameters.scheduleTimes[$index].mode": [
                "everyX"
              ]
            },
            "options": [
              {
                "label": "Seconds",
                "name": "seconds"
              },
              {
                "label": "Minutes",
                "name": "minutes"
              },
              {
                "label": "Hours",
                "name": "hours"
              }
            ],
            "default": "hours",
            "description": "Units of scheduled X seconds / minutes / hours"
          }
        ]
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Scheduler/Scheduler.js"
  },
  {
    "label": "Slack",
    "name": "slack",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Slack/slack.svg",
    "type": "action",
    "category": "Communication",
    "version": 1,
    "description": "Post message in Slack channel",
    "incoming": 1,
    "outgoing": 1,
    "inputParameters": [
      {
        "label": "Webhook URL",
        "name": "webhookUrl",
        "type": "string",
        "default": "",
        "description": "Webhook URL for the channel. Learn more: https://api.slack.com/messaging/webhooks"
      },
      {
        "label": "Message",
        "description": "Message contents",
        "name": "text",
        "type": "string",
        "default": ""
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Slack/Slack.js"
  },
  {
    "label": "SnowTrace",
    "name": "snowtrace",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/SnowTrace/snowtrace.svg",
    "type": "action",
    "category": "Block Explorer",
    "version": 1,
    "description": "Perform SnowTrace operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "Get AVAX Balance for a Single Address",
            "name": "getAvaxBalance",
            "description": "Returns the AVAX balance of a given address."
          },
          {
            "label": "Get AVAX Balance for Multiple Addresses",
            "name": "getAvaxMultipleBalance",
            "description": "Returns the AVAX balance of given addresses."
          },
          {
            "label": "Get a list of \"Normal\" Transactions By Address",
            "name": "getNormalTransactions",
            "description": "Returns a list of \"Normal\" transaction by address."
          },
          {
            "label": "Get a list of \"Internal\" Transactions by Address",
            "name": "getInternalTransactions",
            "description": "Returns a list of \"Internal\" transaction by address."
          },
          {
            "label": "Get \"Internal Transactions\" by Transaction Hash",
            "name": "getInternalTransactionsByHash",
            "description": "Returns \"Internal Transactions\" by hash."
          },
          {
            "label": "Get \"Internal Transactions\" by Block Range",
            "name": "getInternalTransactionsByBlockRange",
            "description": "Returns \"Internal Transactions\" transaction by block range."
          },
          {
            "label": "Get a list of \"ERC20 - Token Transfer Events\" by Address",
            "name": "getErc20TokenTransferEvents",
            "description": "Returns a list of \"ERC20 - Token Transfer Events\" by address."
          },
          {
            "label": "Get a list of \"ERC721 - Token Transfer Events\" by Address",
            "name": "getErc721TokenTransferEvents",
            "description": "Returns a list of \"ERC721 - Token Transfer Events\" by address."
          },
          {
            "label": "Get list of Blocks Validated by Address",
            "name": "getBlocksValidated",
            "description": "Returns a list of blocks validated by address."
          },
          {
            "label": "Get Contract ABI for Verified Contract Source Codes",
            "name": "getContractABI",
            "description": "Returns the contract ABI for verified contract source codes."
          }
        ],
        "default": "getAvaxBalance"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Avalanche Mainnet",
            "name": "avalanche"
          },
          {
            "label": "Avalanche Testnet",
            "name": "avalanche-testnet"
          }
        ],
        "default": "avalanche"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "SnowTrace API Key",
            "name": "snowtraceApi"
          }
        ],
        "default": "snowtraceApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Address",
        "name": "address",
        "type": "string",
        "description": "The address to check for balance",
        "show": {
          "actions.api": [
            "getAvaxBalance",
            "getNormalTransactions",
            "getInternalTransactions",
            "getErc20TokenTransferEvents",
            "getErc721TokenTransferEvents",
            "getBlocksValidated",
            "getContractABI"
          ]
        }
      },
      {
        "label": "Addresses",
        "name": "addresses",
        "type": "json",
        "placeholder": "[\n  '0x0000000000000000000000000000000000001004',\n  '0x0000000000000000000000000000000000001000'\n]",
        "description": "The addresses to check for balance",
        "show": {
          "actions.api": [
            "getAvaxMultipleBalance"
          ]
        }
      },
      {
        "label": "Transaction Hash",
        "name": "hash",
        "type": "string",
        "placeholder": "0x4d74a6fc84d57f18b8e1dfa07ee517c4feb296d16a8353ee41adc03669982028",
        "description": "The hash of the transaction",
        "show": {
          "actions.api": [
            "getInternalTransactionsByHash"
          ]
        }
      },
      {
        "label": "Start Block",
        "name": "startBlock",
        "type": "number",
        "placeholder": "0",
        "description": "The starting block to check for internal transactions",
        "show": {
          "actions.api": [
            "getInternalTransactionsByBlockRange"
          ]
        }
      },
      {
        "label": "End Block",
        "name": "endBlock",
        "type": "number",
        "placeholder": "2702578",
        "description": "The ending block to check for internal transactions",
        "show": {
          "actions.api": [
            "getInternalTransactionsByBlockRange"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/SnowTrace/SnowTrace.js"
  },
  {
    "loadMethods": {},
    "label": "Solidity",
    "name": "solidity",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Solidity/solidity.svg",
    "type": "action",
    "category": "Smart Contract",
    "version": 1,
    "description": "Compile and Deploy Solidity Code",
    "incoming": 1,
    "outgoing": 1,
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Polygon Mainnet",
            "name": "matic",
            "parentGroup": "Polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "maticmum",
            "parentGroup": "Polygon"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli",
            "parentGroup": "Arbitrum"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism",
            "parentGroup": "Optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli",
            "parentGroup": "Optimism"
          },
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "bsc",
            "parentGroup": "Binance Smart Chain"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "bsc-testnet",
            "parentGroup": "Binance Smart Chain"
          }
        ],
        "default": "goerli"
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "Solidity Code",
        "name": "code",
        "type": "code",
        "placeholder": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MyToken is ERC20 {\n    constructor() ERC20(\"MyToken\", \"MTK\") {}\n}",
        "description": "Custom Solidity code to compile and deploy"
      },
      {
        "label": "Contract Name",
        "name": "contractName",
        "description": "Contract Name to deploy the Solidity Code",
        "type": "string",
        "default": "",
        "placeholder": "MyContract"
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet account to deploy Solidity code",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets"
      },
      {
        "label": "Constructor Parameters",
        "name": "parameters",
        "type": "json",
        "placeholder": "[ \"param1\", \"param2\" ]",
        "description": "Input parameters for constructor",
        "optional": true
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Solidity/Solidity.js"
  },
  {
    "label": "Solscan",
    "name": "solscan",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Solscan/solscan.png",
    "type": "action",
    "category": "Block Explorer",
    "version": 1,
    "description": "Solscan Public API",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "description": "Choose the API to execute",
        "options": [
          {
            "label": "Get token balances",
            "name": "getTokenBalances",
            "description": "Get tokens balances of the given address"
          },
          {
            "label": "Get transactions",
            "name": "getTransactions",
            "description": "Get list of transactions of the given account. MaxLimit 50 records per request"
          },
          {
            "label": "Get staking accounts",
            "name": "getStakingAccounts",
            "description": "Get staking accounts of the given account"
          },
          {
            "label": "Get token transfers",
            "name": "getTokenTransfers",
            "description": "Get list of transactions make tokenBalance changes. MaxLimit 50 records per request"
          },
          {
            "label": "Get Solana transfers",
            "name": "getSolTransfers",
            "description": "Get list of SOL transfers. MaxLimit 50 records per request"
          },
          {
            "label": "Get account info",
            "name": "getAccountInfo",
            "description": "Get overall account information, including program account, NFT metadata information"
          },
          {
            "label": "Get last transactions",
            "name": "getLastTransactions",
            "description": "Get last [limit] transactions"
          },
          {
            "label": "Get transaction info",
            "name": "getTransactionInfo",
            "description": "Detail information of given transaction signature"
          },
          {
            "label": "Get token holder",
            "name": "getTokenHolder",
            "description": "Get token holders list"
          },
          {
            "label": "Get token info",
            "name": "getTokenInfo",
            "description": "Get metadata of given token"
          },
          {
            "label": "Get token list",
            "name": "getTokens",
            "description": "Get list of tokens. MaxLimit 50 records per request"
          },
          {
            "label": "Get token market info",
            "name": "getMarketTokenInfo",
            "description": "Get market information of the given token"
          },
          {
            "label": "Get chain info",
            "name": "getChainInfo",
            "description": "Blockchain overall information"
          }
        ],
        "default": "getTokenBalances"
      }
    ],
    "inputParameters": [
      {
        "label": "Solana Address",
        "name": "address",
        "type": "string",
        "description": "The Solana address",
        "show": {
          "actions.api": [
            "getTokenBalances",
            "getTransactions",
            "getStakingAccounts",
            "getTokenTransfers",
            "getSolTransfers",
            "getAccountInfo"
          ]
        }
      },
      {
        "label": "Limit",
        "name": "limit",
        "type": "number",
        "default": 10,
        "optional": true,
        "show": {
          "actions.api": [
            "getTokenHolder",
            "getLastTransactions"
          ]
        }
      },
      {
        "label": "Offset",
        "name": "offset",
        "type": "number",
        "default": 0,
        "optional": true,
        "show": {
          "actions.api": [
            "getTokenHolder",
            "getTokens"
          ]
        }
      },
      {
        "label": "Transaction Signature",
        "name": "signature",
        "type": "string",
        "show": {
          "actions.api": [
            "getTransactionInfo"
          ]
        }
      },
      {
        "label": "Token Address",
        "name": "tokenAddress",
        "type": "string",
        "show": {
          "actions.api": [
            "getTokenHolder",
            "getTokenInfo",
            "getMarketTokenInfo"
          ]
        }
      },
      {
        "label": "Sort By",
        "name": "sortBy",
        "type": "options",
        "optional": true,
        "options": [
          {
            "label": "Market cap",
            "name": "market_cap"
          },
          {
            "label": "Volume",
            "name": "volume"
          },
          {
            "label": "Holder",
            "name": "holder"
          },
          {
            "label": "Price",
            "name": "price"
          },
          {
            "label": "Price change 24 h",
            "name": "price_change_24h"
          },
          {
            "label": "Price change 7 d",
            "name": "price_change_7d"
          },
          {
            "label": "Price change 14 d",
            "name": "price_change_14d"
          },
          {
            "label": "Price change 30 d",
            "name": "price_change_30d"
          },
          {
            "label": "Price change 60 d",
            "name": "price_change_60d"
          },
          {
            "label": "Price change 200 d",
            "name": "price_change_200d"
          },
          {
            "label": "Price change 1 y",
            "name": "price_change_1y"
          }
        ],
        "show": {
          "actions.api": [
            "getTokens"
          ]
        }
      },
      {
        "label": "Sort Direction",
        "name": "direction",
        "optional": true,
        "type": "options",
        "options": [
          {
            "label": "Desc",
            "name": "desc"
          },
          {
            "label": "Asc",
            "name": "asc"
          }
        ],
        "show": {
          "actions.api": [
            "getTokens"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Solscan/Solscan.js"
  },
  {
    "label": "Teams",
    "name": "teams",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Teams/teams.svg",
    "type": "action",
    "category": "Communication",
    "version": 1,
    "description": "Post message in Teams channel",
    "incoming": 1,
    "outgoing": 1,
    "inputParameters": [
      {
        "label": "Webhook URL",
        "name": "webhookUrl",
        "type": "string",
        "default": "",
        "description": "Webhook URL for the channel. Learn more: https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-incoming-webhook"
      },
      {
        "label": "Message",
        "description": "Message contents",
        "name": "text",
        "type": "string",
        "default": ""
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Teams/Teams.js"
  },
  {
    "label": "Telegram",
    "name": "telegram",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Telegram/telegram.svg",
    "type": "action",
    "category": "Communication",
    "version": 1,
    "description": "Perform Telegram operations",
    "incoming": 1,
    "outgoing": 1,
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Telegram Bot Token",
            "name": "telegramApi"
          }
        ],
        "placeholder": "eg: 1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHI",
        "default": ""
      }
    ],
    "inputParameters": [
      {
        "label": "Channel ID",
        "name": "channelID",
        "type": "string",
        "placeholder": "eg: MyAwesomeChannel",
        "default": "",
        "description": "Your channel ID. <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=gk_tPOY1TDM\">See how to how to add bot in your channel.</a>",
        "optional": true
      },
      {
        "label": "Content",
        "description": "Message contents (up to 2000 characters)",
        "name": "content",
        "type": "string",
        "default": ""
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Telegram/Telegram.js"
  },
  {
    "loadMethods": {},
    "label": "ThirdWeb",
    "name": "thirdWeb",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ThirdWeb/thirdweb.svg",
    "type": "action",
    "category": "Development",
    "version": 2,
    "description": "Execute ThirdWeb SDK code snippet",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Read data from contracts",
            "name": "read"
          },
          {
            "label": "Execute transactions on contracts",
            "name": "execute"
          },
          {
            "label": "Deploy new contract",
            "name": "deploy"
          }
        ],
        "default": "read"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "mainnet"
          },
          {
            "label": "Goerli",
            "name": "goerli"
          },
          {
            "label": "Polygon Mainnet",
            "name": "polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "mumbai"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli"
          },
          {
            "label": "Avalanche Mainnet",
            "name": "avalanche"
          },
          {
            "label": "Avalanche Testnet",
            "name": "avalanche-testnet"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli"
          },
          {
            "label": "Fantom Mainnet",
            "name": "fantom"
          },
          {
            "label": "Fantom Testnet",
            "name": "fantom-testnet"
          },
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "binance"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "binance-testnet"
          }
        ],
        "default": "mainnet"
      }
    ],
    "inputParameters": [
      {
        "label": "Contract Address",
        "name": "contract",
        "type": "string",
        "description": "Navigate to ThirdWeb -> Code -> Getting started -> Javascript, copy the address used in the code section",
        "placeholder": "0x6a8c7F715D5f044437dA5b0576eD1289eC9b7eB6",
        "show": {
          "actions.operation": [
            "read",
            "execute"
          ]
        }
      },
      {
        "label": "Prebuilt Contract Type",
        "name": "contractType",
        "type": "options",
        "description": "Navigate to ThirdWeb -> Code -> Getting started -> Javascript, select the prebuilt contract used in the code section. Ex: await sdk.getContract(\"0x...\", \"nft-drop\")",
        "options": [
          {
            "label": "Edition",
            "name": "edition",
            "description": "Create editions of ERC1155 tokens"
          },
          {
            "label": "Edition Drop",
            "name": "edition-drop",
            "description": "Release ERC1155 tokens for a set price."
          },
          {
            "label": "Marketplace",
            "name": "marketplace",
            "description": "Buy and sell ERC721/ERC1155 tokens"
          },
          {
            "label": "Multiwrap",
            "name": "multiwrap",
            "description": "Bundle multiple ERC721/ERC1155/ERC20 tokens into a single ERC721."
          },
          {
            "label": "NFT Collection",
            "name": "nft-collection",
            "description": "Create collection of unique NFTs."
          },
          {
            "label": "NFT Drop",
            "name": "nft-drop",
            "description": "Release collection of unique NFTs for a set price"
          },
          {
            "label": "Pack",
            "name": "pack",
            "description": "Pack multiple tokens into ERC1155 NFTs that act as randomized loot boxes"
          },
          {
            "label": "Signature Drop",
            "name": "signature-drop",
            "description": "Signature based minting of ERC721 tokens."
          },
          {
            "label": "Split",
            "name": "split",
            "description": "Distribute funds among multiple recipients"
          },
          {
            "label": "Token",
            "name": "token",
            "description": "Create cryptocurrency compliant with ERC20 standard"
          },
          {
            "label": "Token Drop",
            "name": "token-drop",
            "description": "Release new ERC20 tokens for a set price"
          },
          {
            "label": "Vote",
            "name": "vote",
            "description": "Create and vote on proposals"
          }
        ]
      },
      {
        "label": "Code",
        "name": "code",
        "type": "code",
        "placeholder": "const ethers = require('ethers');\n\n//Get NFT Balance\nconst walletAddress = \"0xE597E574889537A3A9120d1B5793cdFAEf6B6c10\";\nconst balance = await contract.balanceOf(walletAddress);\nreturn ethers.utils.formatEther(balance);",
        "description": "Custom code to run",
        "show": {
          "actions.operation": [
            "read",
            "execute"
          ]
        }
      },
      {
        "label": "External Modules",
        "name": "external",
        "type": "json",
        "placeholder": "[\"ethers\"]",
        "description": "Import installed dependencies within Outerbridge and use it within code. Ex: const ethers = require('ethers');",
        "optional": true,
        "show": {
          "actions.operation": [
            "read",
            "execute"
          ]
        }
      },
      {
        "label": "Wallet Account",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet account to execute transaction or deploy contract.",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.operation": [
            "execute",
            "deploy"
          ]
        }
      },
      {
        "label": "Name",
        "name": "name",
        "description": "Name of the contract",
        "type": "string",
        "placeholder": "MyNFT",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ]
        }
      },
      {
        "label": "Image Type",
        "name": "imageType",
        "type": "options",
        "options": [
          {
            "label": "Base64",
            "name": "base64",
            "description": "Base64 (raw) image"
          },
          {
            "label": "URL",
            "name": "url",
            "description": "URL path of the image"
          }
        ],
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ]
        }
      },
      {
        "label": "Image URL",
        "name": "imageURL",
        "description": "URL path of the image",
        "type": "string",
        "placeholder": "ipfs://QmSYJ5PJ6SriDWyXtzA62NDfCCMpZt5FWqh9Y5xmhXsWhS/SquirrelV1.png",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ],
          "inputParameters.imageType": [
            "url"
          ]
        }
      },
      {
        "label": "Image Base64",
        "name": "imageBase64",
        "description": "Base64 (raw) image",
        "type": "string",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ],
          "inputParameters.imageType": [
            "base64"
          ]
        }
      },
      {
        "label": "Description",
        "name": "description",
        "description": "Description of the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ]
        }
      },
      {
        "label": "Symbol",
        "name": "symbol",
        "description": "Symbol for the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ]
        }
      },
      {
        "label": "Primary Sale Recipient Address",
        "name": "primary_sale_recipient",
        "description": "The address that will receive the proceeds from primary sales",
        "type": "string",
        "placeholder": "0xE597E474889537A3A9120d1B5793cdFAEf6B6c10",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ]
        }
      },
      {
        "label": "Royalties Recipient Address",
        "name": "fee_recipient",
        "description": "The address that will receive the proceeds from secondary sales",
        "type": "string",
        "placeholder": "0xE597E474889537A3A9120d1B5793cdFAEf6B6c10",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ]
        }
      },
      {
        "label": "Royalties Percentage",
        "name": "seller_fee_basis_points",
        "description": "The percentage (in basis points) of royalties for secondary sales. Eg: 50 = 0.5%",
        "type": "number",
        "placeholder": "100",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.fee_recipient": "(.|\\s)*\\S(.|\\s)*",
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ]
        }
      },
      {
        "label": "Platform Fee Recipient Address",
        "name": "platform_fee_recipient",
        "description": "The address that will receive the proceeds from platform fees",
        "type": "string",
        "placeholder": "0xE597E474889537A3A9120d1B5793cdFAEf6B6c10",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ]
        }
      },
      {
        "label": "Platform Fee Percentage",
        "name": "platform_fee_basis_points",
        "description": "The percentage (in basis points) of platform fees. Eg: 50 = 0.5%",
        "type": "number",
        "placeholder": "100",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.platform_fee_recipient": "(.|\\s)*\\S(.|\\s)*",
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ]
        }
      },
      {
        "label": "External Link",
        "name": "external_link",
        "description": "Url for the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ]
        }
      },
      {
        "label": "Trusted Forwarders",
        "name": "trusted_forwarders",
        "description": "Custom gasless trusted forwarder addresses",
        "type": "json",
        "optional": true,
        "placeholder": "[\"0x359B1408130241E115EE2285bA2635ebFC2109C6\", \"0xE597E474889537A3A9120d1B5793cdFAEf6B6c10\"]",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "nft-drop",
            "nft-collection",
            "edition",
            "edition-drop",
            "pack",
            "signature-drop"
          ]
        }
      },
      {
        "label": "Name",
        "name": "name",
        "description": "Name of the contract",
        "type": "string",
        "placeholder": "MyMarketplace",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "marketplace"
          ]
        }
      },
      {
        "label": "Image Type",
        "name": "imageType",
        "type": "options",
        "options": [
          {
            "label": "Base64",
            "name": "base64",
            "description": "Base64 (raw) image"
          },
          {
            "label": "URL",
            "name": "url",
            "description": "URL path of the image"
          }
        ],
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "marketplace"
          ]
        }
      },
      {
        "label": "Image URL",
        "name": "imageURL",
        "description": "URL path of the image",
        "type": "string",
        "placeholder": "ipfs://QmSYJ5PJ6SriDWyXtzA62NDfCCMpZt5FWqh9Y5xmhXsWhS/SquirrelV1.png",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "marketplace"
          ],
          "inputParameters.imageType": [
            "url"
          ]
        }
      },
      {
        "label": "Image Base64",
        "name": "imageBase64",
        "description": "Base64 (raw) image",
        "type": "string",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "marketplace"
          ],
          "inputParameters.imageType": [
            "base64"
          ]
        }
      },
      {
        "label": "Description",
        "name": "description",
        "description": "Description of the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "marketplace"
          ]
        }
      },
      {
        "label": "Platform Fee Recipient Address",
        "name": "platform_fee_recipient",
        "description": "The address that will receive the proceeds from platform fees",
        "type": "string",
        "placeholder": "0xE597E474889537A3A9120d1B5793cdFAEf6B6c10",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "marketplace"
          ]
        }
      },
      {
        "label": "Platform Fee Percentage",
        "name": "platform_fee_basis_points",
        "description": "The percentage (in basis points) of platform fees. Eg: 50 = 0.5%",
        "type": "number",
        "placeholder": "100",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.platform_fee_recipient": "(.|\\s)*\\S(.|\\s)*",
          "inputParameters.contractType": [
            "marketplace"
          ]
        }
      },
      {
        "label": "External Link",
        "name": "external_link",
        "description": "Url for the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "marketplace"
          ]
        }
      },
      {
        "label": "Trusted Forwarders",
        "name": "trusted_forwarders",
        "description": "Custom gasless trusted forwarder addresses",
        "type": "json",
        "optional": true,
        "placeholder": "[\"0x359B1408130241E115EE2285bA2635ebFC2109C6\", \"0xE597E474889537A3A9120d1B5793cdFAEf6B6c10\"]",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "marketplace"
          ]
        }
      },
      {
        "label": "Name",
        "name": "name",
        "description": "Name of the contract",
        "type": "string",
        "placeholder": "MyMultiWrap",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "multiwrap"
          ]
        }
      },
      {
        "label": "Image Type",
        "name": "imageType",
        "type": "options",
        "options": [
          {
            "label": "Base64",
            "name": "base64",
            "description": "Base64 (raw) image"
          },
          {
            "label": "URL",
            "name": "url",
            "description": "URL path of the image"
          }
        ],
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "multiwrap"
          ]
        }
      },
      {
        "label": "Image URL",
        "name": "imageURL",
        "description": "URL path of the image",
        "type": "string",
        "placeholder": "ipfs://QmSYJ5PJ6SriDWyXtzA62NDfCCMpZt5FWqh9Y5xmhXsWhS/SquirrelV1.png",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "multiwrap"
          ],
          "inputParameters.imageType": [
            "url"
          ]
        }
      },
      {
        "label": "Image Base64",
        "name": "imageBase64",
        "description": "Base64 (raw) image",
        "type": "string",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "multiwrap"
          ],
          "inputParameters.imageType": [
            "base64"
          ]
        }
      },
      {
        "label": "Description",
        "name": "description",
        "description": "Description of the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "multiwrap"
          ]
        }
      },
      {
        "label": "Symbol",
        "name": "symbol",
        "description": "Symbol for the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "multiwrap"
          ]
        }
      },
      {
        "label": "Royalties Recipient Address",
        "name": "fee_recipient",
        "description": "The address that will receive the proceeds from secondary sales",
        "type": "string",
        "placeholder": "0xE597E474889537A3A9120d1B5793cdFAEf6B6c10",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "multiwrap"
          ]
        }
      },
      {
        "label": "Royalties Percentage",
        "name": "seller_fee_basis_points",
        "description": "The percentage (in basis points) of royalties for secondary sales. Eg: 50 = 0.5%",
        "type": "number",
        "placeholder": "100",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.fee_recipient": "(.|\\s)*\\S(.|\\s)*",
          "inputParameters.contractType": [
            "multiwrap"
          ]
        }
      },
      {
        "label": "External Link",
        "name": "external_link",
        "description": "Url for the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "multiwrap"
          ]
        }
      },
      {
        "label": "Trusted Forwarders",
        "name": "trusted_forwarders",
        "description": "Custom gasless trusted forwarder addresses",
        "type": "json",
        "optional": true,
        "placeholder": "[\"0x359B1408130241E115EE2285bA2635ebFC2109C6\", \"0xE597E474889537A3A9120d1B5793cdFAEf6B6c10\"]",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "multiwrap"
          ]
        }
      },
      {
        "label": "Name",
        "name": "name",
        "description": "Name of the contract",
        "type": "string",
        "placeholder": "MySplit",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "split"
          ]
        }
      },
      {
        "label": "Image Type",
        "name": "imageType",
        "type": "options",
        "options": [
          {
            "label": "Base64",
            "name": "base64",
            "description": "Base64 (raw) image"
          },
          {
            "label": "URL",
            "name": "url",
            "description": "URL path of the image"
          }
        ],
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "split"
          ]
        }
      },
      {
        "label": "Image URL",
        "name": "imageURL",
        "description": "URL path of the image",
        "type": "string",
        "placeholder": "ipfs://QmSYJ5PJ6SriDWyXtzA62NDfCCMpZt5FWqh9Y5xmhXsWhS/SquirrelV1.png",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "split"
          ],
          "inputParameters.imageType": [
            "url"
          ]
        }
      },
      {
        "label": "Image Base64",
        "name": "imageBase64",
        "description": "Base64 (raw) image",
        "type": "string",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "split"
          ],
          "inputParameters.imageType": [
            "base64"
          ]
        }
      },
      {
        "label": "Description",
        "name": "description",
        "description": "Description of the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "split"
          ]
        }
      },
      {
        "label": "Recipients",
        "name": "recipients",
        "description": "The list of recipients and their share of the split",
        "type": "json",
        "placeholder": "[\n    {\n        \"address\": '0x359B1408130241E115EE2285bA2635ebFC2109C6', // The recipient address\n        \"sharesBps\": 500, // The shares in basis point (5% = 500)\n    },\n    {\n        \"address\": '0xE597E474889537A3A9120d1B5793cdFAEf6B6c10',\n        \"sharesBps\": 400,\n    }\n]\n        ",
        "default": "[\n    {\n        \"address\": \"your-address\",\n        \"sharesBps\": 8000\n    },\n    {\n        \"address\": \"another-address\",\n        \"sharesBps\": 2000\n    }\n]",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "split"
          ]
        }
      },
      {
        "label": "External Link",
        "name": "external_link",
        "description": "Url for the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "split"
          ]
        }
      },
      {
        "label": "Trusted Forwarders",
        "name": "trusted_forwarders",
        "description": "Custom gasless trusted forwarder addresses",
        "type": "json",
        "optional": true,
        "placeholder": "[\"0x359B1408130241E115EE2285bA2635ebFC2109C6\", \"0xE597E474889537A3A9120d1B5793cdFAEf6B6c10\"]",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "split"
          ]
        }
      },
      {
        "label": "Name",
        "name": "name",
        "description": "Name of the contract",
        "type": "string",
        "placeholder": "MyToken",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "token-drop",
            "token"
          ]
        }
      },
      {
        "label": "Image Type",
        "name": "imageType",
        "type": "options",
        "options": [
          {
            "label": "Base64",
            "name": "base64",
            "description": "Base64 (raw) image"
          },
          {
            "label": "URL",
            "name": "url",
            "description": "URL path of the image"
          }
        ],
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "token-drop",
            "token"
          ]
        }
      },
      {
        "label": "Image URL",
        "name": "imageURL",
        "description": "URL path of the image",
        "type": "string",
        "placeholder": "ipfs://QmSYJ5PJ6SriDWyXtzA62NDfCCMpZt5FWqh9Y5xmhXsWhS/SquirrelV1.png",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "token-drop",
            "token"
          ],
          "inputParameters.imageType": [
            "url"
          ]
        }
      },
      {
        "label": "Image Base64",
        "name": "imageBase64",
        "description": "Base64 (raw) image",
        "type": "string",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "token-drop",
            "token"
          ],
          "inputParameters.imageType": [
            "base64"
          ]
        }
      },
      {
        "label": "Description",
        "name": "description",
        "description": "Description of the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "token-drop",
            "token"
          ]
        }
      },
      {
        "label": "Symbol",
        "name": "symbol",
        "description": "Symbol for the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "token-drop",
            "token"
          ]
        }
      },
      {
        "label": "Primary Sale Recipient Address",
        "name": "primary_sale_recipient",
        "description": "The address that will receive the proceeds from primary sales",
        "type": "string",
        "placeholder": "0xE597E474889537A3A9120d1B5793cdFAEf6B6c10",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "token-drop",
            "token"
          ]
        }
      },
      {
        "label": "Platform Fee Recipient Address",
        "name": "platform_fee_recipient",
        "description": "The address that will receive the proceeds from platform fees",
        "type": "string",
        "placeholder": "0xE597E474889537A3A9120d1B5793cdFAEf6B6c10",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "token-drop",
            "token"
          ]
        }
      },
      {
        "label": "Platform Fee Percentage",
        "name": "platform_fee_basis_points",
        "description": "The percentage (in basis points) of platform fees. Eg: 50 = 0.5%",
        "type": "number",
        "placeholder": "100",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.platform_fee_recipient": "(.|\\s)*\\S(.|\\s)*",
          "inputParameters.contractType": [
            "token-drop",
            "token"
          ]
        }
      },
      {
        "label": "External Link",
        "name": "external_link",
        "description": "Url for the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "token-drop",
            "token"
          ]
        }
      },
      {
        "label": "Trusted Forwarders",
        "name": "trusted_forwarders",
        "description": "Custom gasless trusted forwarder addresses",
        "type": "json",
        "optional": true,
        "placeholder": "[\"0x359B1408130241E115EE2285bA2635ebFC2109C6\", \"0xE597E474889537A3A9120d1B5793cdFAEf6B6c10\"]",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "token-drop",
            "token"
          ]
        }
      },
      {
        "label": "Name",
        "name": "name",
        "description": "Name of the contract",
        "type": "string",
        "placeholder": "MyVoteDAO",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ]
        }
      },
      {
        "label": "Image Type",
        "name": "imageType",
        "type": "options",
        "options": [
          {
            "label": "Base64",
            "name": "base64",
            "description": "Base64 (raw) image"
          },
          {
            "label": "URL",
            "name": "url",
            "description": "URL path of the image"
          }
        ],
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ]
        }
      },
      {
        "label": "Image URL",
        "name": "imageURL",
        "description": "URL path of the image",
        "type": "string",
        "placeholder": "ipfs://QmSYJ5PJ6SriDWyXtzA62NDfCCMpZt5FWqh9Y5xmhXsWhS/SquirrelV1.png",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ],
          "inputParameters.imageType": [
            "url"
          ]
        }
      },
      {
        "label": "Image Base64",
        "name": "imageBase64",
        "description": "Base64 (raw) image",
        "type": "string",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ],
          "inputParameters.imageType": [
            "base64"
          ]
        }
      },
      {
        "label": "Description",
        "name": "description",
        "description": "Description of the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ]
        }
      },
      {
        "label": "Voting Token Address",
        "name": "voting_token_address",
        "description": "The address of the governance token contract representing votes",
        "type": "string",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ]
        }
      },
      {
        "label": "Proposal Token Threshold",
        "name": "proposal_token_threshold",
        "description": "The minimum amount in governance token owned to be able to create a proposal",
        "type": "number",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ]
        }
      },
      {
        "label": "Voting Delay in Blocks",
        "name": "voting_delay_in_blocks",
        "description": "The delay in blocks before voting can begin on proposals Specified in number of blocks. Assuming block time of around 13.14 seconds, 1 day = 6570 blocks, 1 week = 45992 blocks.",
        "type": "number",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ]
        }
      },
      {
        "label": "Voting Period in Blocks",
        "name": "voting_period_in_blocks",
        "description": "The duration in blocks of the open voting window Specified in number of blocks. Assuming block time of around 13.14 seconds, 1 day = 6570 blocks, 1 week = 45992 blocks.",
        "type": "number",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ]
        }
      },
      {
        "label": "Voting Quorum Fraction",
        "name": "voting_quorum_fraction",
        "description": "The minimum fraction to be met to pass a proposal",
        "type": "number",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ]
        }
      },
      {
        "label": "External Link",
        "name": "external_link",
        "description": "Url for the contract",
        "type": "string",
        "optional": true,
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ]
        }
      },
      {
        "label": "Trusted Forwarders",
        "name": "trusted_forwarders",
        "description": "Custom gasless trusted forwarder addresses",
        "type": "json",
        "optional": true,
        "placeholder": "[\"0x359B1408130241E115EE2285bA2635ebFC2109C6\", \"0xE597E474889537A3A9120d1B5793cdFAEf6B6c10\"]",
        "show": {
          "actions.operation": [
            "deploy"
          ],
          "inputParameters.contractType": [
            "vote"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ThirdWeb/ThirdWeb.js"
  },
  {
    "_events": {},
    "_eventsCount": 0,
    "loadMethods": {},
    "label": "ThirdWeb Event Trigger",
    "name": "thirdWebEventTrigger",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/ThirdWeb/thirdweb.svg",
    "type": "trigger",
    "category": "Development",
    "version": 1,
    "description": "Start workflow whenever a ThirdWeb event happened",
    "incoming": 0,
    "outgoing": 1,
    "actions": [
      {
        "label": "Contract Address",
        "name": "contract",
        "type": "string",
        "description": "Navigate to ThirdWeb -> Code -> Getting started -> Javascript, copy the address used in the code section",
        "placeholder": "0x6a8c7F715D5f044437dA5b0576eD1289eC9b7eB6"
      },
      {
        "label": "Prebuilt Contract Type",
        "name": "contractType",
        "type": "options",
        "description": "Navigate to ThirdWeb -> Code -> Getting started -> Javascript, select the prebuilt contract used in the code section. Ex: await sdk.getContract(\"0x...\", \"nft-drop\")",
        "options": [
          {
            "label": "Edition",
            "name": "edition",
            "description": "Create editions of ERC1155 tokens"
          },
          {
            "label": "Edition Drop",
            "name": "edition-drop",
            "description": "Release ERC1155 tokens for a set price."
          },
          {
            "label": "Marketplace",
            "name": "marketplace",
            "description": "Buy and sell ERC721/ERC1155 tokens"
          },
          {
            "label": "Multiwrap",
            "name": "multiwrap",
            "description": "Bundle multiple ERC721/ERC1155/ERC20 tokens into a single ERC721."
          },
          {
            "label": "NFT Collection",
            "name": "nft-collection",
            "description": "Create collection of unique NFTs."
          },
          {
            "label": "NFT Drop",
            "name": "nft-drop",
            "description": "Release collection of unique NFTs for a set price"
          },
          {
            "label": "Pack",
            "name": "pack",
            "description": "Pack multiple tokens into ERC1155 NFTs that act as randomized loot boxes"
          },
          {
            "label": "Signature Drop",
            "name": "signature-drop",
            "description": "Signature based minting of ERC721 tokens."
          },
          {
            "label": "Split",
            "name": "split",
            "description": "Distribute funds among multiple recipients"
          },
          {
            "label": "Token",
            "name": "token",
            "description": "Create cryptocurrency compliant with ERC20 standard"
          },
          {
            "label": "Token Drop",
            "name": "token-drop",
            "description": "Release new ERC20 tokens for a set price"
          },
          {
            "label": "Vote",
            "name": "vote",
            "description": "Create and vote on proposals"
          }
        ]
      },
      {
        "label": "Event",
        "name": "event",
        "type": "asyncOptions",
        "loadMethod": "getEvents"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "mainnet"
          },
          {
            "label": "Goerli",
            "name": "goerli"
          },
          {
            "label": "Polygon Mainnet",
            "name": "polygon"
          },
          {
            "label": "Polygon Mumbai",
            "name": "mumbai"
          },
          {
            "label": "Arbitrum Mainnet",
            "name": "arbitrum"
          },
          {
            "label": "Arbitrum Goerli",
            "name": "arbitrum-goerli"
          },
          {
            "label": "Avalanche Mainnet",
            "name": "avalanche"
          },
          {
            "label": "Avalanche Testnet",
            "name": "avalanche-testnet"
          },
          {
            "label": "Optimism Mainnet",
            "name": "optimism"
          },
          {
            "label": "Optimism Goerli",
            "name": "optimism-goerli"
          },
          {
            "label": "Fantom Mainnet",
            "name": "fantom"
          },
          {
            "label": "Fantom Testnet",
            "name": "fantom-testnet"
          },
          {
            "label": "Binance Smart Chain Mainnet",
            "name": "binance"
          },
          {
            "label": "Binance Smart Chain Testnet",
            "name": "binance-testnet"
          }
        ],
        "default": "mainnet"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/ThirdWeb/ThirdWebTrigger.js"
  },
  {
    "label": "Twitter",
    "name": "twitter",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Twitter/Twitter-Logo.png",
    "type": "action",
    "category": "Communication",
    "description": "Search Twitter User's tweets by keyword",
    "version": 1,
    "incoming": 1,
    "outgoing": 1,
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Twitter Bearer Token",
            "name": "twitterApi"
          }
        ],
        "default": "twitterApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Twitter ID",
        "name": "TwitterId",
        "type": "string",
        "default": "",
        "description": ""
      },
      {
        "label": "Keyword",
        "name": "Keyword",
        "type": "string",
        "default": "",
        "description": "Message contents (up to 512 characters long)"
      },
      {
        "label": "From",
        "name": "fromDate",
        "type": "options",
        "description": "Date of start search",
        "options": [
          {
            "label": "From Today UTC",
            "name": "fromTodayUTC"
          }
        ],
        "default": "fromTodayUTC"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Twitter/Twitter.js"
  },
  {
    "label": "Typeform",
    "name": "typeform",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Typeform/typeform-icon.svg",
    "type": "action",
    "category": "Communication",
    "version": 1,
    "description": "Perform Typeform operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "API",
        "name": "api",
        "type": "options",
        "options": [
          {
            "label": "Get all forms",
            "name": "getAllForms",
            "description": "Returns all the forms associated with your account"
          },
          {
            "label": "Get Typeform Responses",
            "name": "getTypeformResponses",
            "description": "Returns the submissions for your typeforms in JSON format"
          },
          {
            "label": "Create Typeform ",
            "name": "createTypeform",
            "description": "Creates a typeform for you"
          }
        ],
        "default": "getAllForms"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Typeform API Key",
            "name": "typeformApi"
          }
        ],
        "default": "typeformApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Form Id",
        "name": "formId",
        "type": "string",
        "description": "The form id to retrieve all the responses to your typeform",
        "show": {
          "actions.api": [
            "getTypeformResponses"
          ]
        }
      },
      {
        "label": "Request Body",
        "name": "requestBody",
        "type": "json",
        "description": "The json object to create or update your typeform",
        "show": {
          "actions.api": [
            "createTypeform"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Typeform/Typeform.js"
  },
  {
    "webhookMethods": {},
    "label": "Typeform Webhook",
    "name": "typeformWebhook",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/TypeformWebhook/typeform-webhook.svg",
    "type": "webhook",
    "category": "Communication",
    "version": 1,
    "description": "Start workflow whenever Typeform webhook event happened",
    "incoming": 0,
    "outgoing": 1,
    "actions": [
      {
        "label": "Event",
        "name": "webhook_type",
        "type": "options",
        "options": [
          {
            "label": "Typeform Submission",
            "name": "typeformSubmission",
            "description": "Triggered anytime form typeform submit a response sent through typeform webhook."
          }
        ],
        "default": "typeformSubmission"
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Typeform Access Token",
            "name": "typeformApi"
          }
        ],
        "default": "typeformApi"
      }
    ],
    "inputParameters": [
      {
        "label": "Form Id",
        "name": "formId",
        "type": "string",
        "description": "Unique ID for the form. Find in your form URL. For example, in the URL \"https://mysite.typeform.com/to/u6nXL7\" the form_id is u6nXL7",
        "show": {
          "actions.webhook_type": [
            "typeformSubmission"
          ]
        }
      },
      {
        "label": "Webhook Tag",
        "name": "tag",
        "type": "string",
        "placeholder": "mywebhook",
        "description": "The name you want to use for your webhook",
        "show": {
          "actions.webhook_type": [
            "typeformSubmission"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/TypeformWebhook/TypeformWebhook.js"
  },
  {
    "loadMethods": {},
    "label": "Uniswap",
    "name": "uniswap",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Uniswap/uniswap.png",
    "type": "action",
    "category": "Decentralized Finance",
    "version": 1,
    "description": "Execute Uniswap operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Swap Tokens",
            "name": "swapTokens",
            "description": "Supports uniswap v2 and v3 prices together and returns the best price for swapping."
          },
          {
            "label": "Get Pairs",
            "name": "getPairs",
            "description": "Get most liquid pairs"
          },
          {
            "label": "Custom Query",
            "name": "customQuery",
            "description": "Custom subgraph query to retrieve more information. https://docs.uniswap.org/protocol/V2/reference/API/queries"
          }
        ],
        "default": "swapTokens"
      }
    ],
    "networks": [
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          }
        ],
        "default": "homestead",
        "show": {
          "actions.operation": [
            "getPairs",
            "customQuery"
          ]
        }
      },
      {
        "label": "Network",
        "name": "network",
        "type": "options",
        "options": [
          {
            "label": "Mainnet",
            "name": "homestead",
            "parentGroup": "Ethereum"
          },
          {
            "label": "Goerli",
            "name": "goerli",
            "parentGroup": "Ethereum"
          }
        ],
        "default": "homestead",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Network Provider",
        "name": "networkProvider",
        "type": "asyncOptions",
        "loadMethod": "getNetworkProviders"
      },
      {
        "label": "RPC Endpoint",
        "name": "jsonRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customRPC"
          ],
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Websocket Endpoint",
        "name": "websocketRPC",
        "type": "string",
        "default": "",
        "show": {
          "networks.networkProvider": [
            "customWebsocket"
          ],
          "actions.operation": [
            "swapTokens"
          ]
        }
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Alchemy API Key",
            "name": "alchemyApi",
            "show": {
              "networks.networkProvider": [
                "alchemy"
              ]
            }
          },
          {
            "label": "Infura API Key",
            "name": "infuraApi",
            "show": {
              "networks.networkProvider": [
                "infura"
              ]
            }
          },
          {
            "label": "QuickNode Endpoints",
            "name": "quickNodeEndpoints",
            "show": {
              "networks.networkProvider": [
                "quicknode"
              ]
            }
          }
        ],
        "default": "",
        "show": {
          "networks.networkProvider": [
            "alchemy",
            "infura",
            "quicknode"
          ],
          "actions.operation": [
            "swapTokens"
          ]
        }
      }
    ],
    "inputParameters": [
      {
        "label": "From Token",
        "name": "fromToken",
        "type": "asyncOptions",
        "description": "Contract address of the token you want to convert FROM.",
        "loadMethod": "getTokens",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "To Token",
        "name": "toToken",
        "type": "asyncOptions",
        "description": "Contract address of the token you want to convert TO.",
        "loadMethod": "getTokens",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Amount To Swap",
        "name": "amountToSwap",
        "type": "number",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Select Wallet",
        "name": "wallet",
        "type": "asyncOptions",
        "description": "Wallet account to swap tokens.",
        "loadFromDbCollections": [
          "Wallet"
        ],
        "loadMethod": "getWallets",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Query",
        "name": "query",
        "type": "string",
        "rows": 10,
        "show": {
          "actions.operation": [
            "customQuery"
          ]
        }
      },
      {
        "label": "Slippage Tolerance (%)",
        "name": "slippage",
        "type": "number",
        "default": 0.5,
        "optional": true,
        "description": "How large of a price movement to tolerate before trade will fail to execute. Default to 0.5%.",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Tx Deadline (mins)",
        "name": "deadlineMinutes",
        "type": "number",
        "default": 20,
        "optional": true,
        "description": "Minutes after which the transaction will fail. Default to 20 mins.",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      },
      {
        "label": "Disable Multihops",
        "name": "disableMultihops",
        "type": "boolean",
        "default": false,
        "optional": true,
        "description": "Restricts swaps to direct pairs only. Default to false.",
        "show": {
          "actions.operation": [
            "swapTokens"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Uniswap/Uniswap.js"
  },
  {
    "label": "Wait",
    "name": "wait",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Wait/wait.svg",
    "type": "action",
    "category": "Utilities",
    "version": 1,
    "description": "Wait before continuing with the execution",
    "incoming": 1,
    "outgoing": 1,
    "inputParameters": [
      {
        "label": "Unit",
        "name": "unit",
        "type": "options",
        "options": [
          {
            "label": "Seconds",
            "name": "seconds"
          },
          {
            "label": "Minutes",
            "name": "minutes"
          },
          {
            "label": "Hours",
            "name": "hours"
          },
          {
            "label": "Days",
            "name": "days"
          }
        ],
        "default": "seconds",
        "description": "The time unit of the duration to wait"
      },
      {
        "label": "Duration",
        "name": "duration",
        "type": "number",
        "default": 10,
        "description": "Duration to wait before continuing with the execution"
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Wait/Wait.js"
  },
  {
    "loadMethods": {},
    "label": "Webhook",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Webhook/webhook.svg",
    "name": "webhook",
    "type": "webhook",
    "category": "Utilities",
    "version": 2,
    "description": "Start workflow when webhook is called",
    "incoming": 0,
    "outgoing": 1,
    "inputParameters": [
      {
        "label": "HTTP Method",
        "name": "httpMethod",
        "type": "options",
        "options": [
          {
            "label": "GET",
            "name": "GET"
          },
          {
            "label": "POST",
            "name": "POST"
          }
        ],
        "default": "GET",
        "description": "The HTTP method to listen to."
      },
      {
        "label": "Authorization",
        "name": "authorization",
        "type": "options",
        "options": [
          {
            "label": "API",
            "name": "headerAuth",
            "description": "Webhook header must contains \"X-API-KEY\" with matching key"
          },
          {
            "label": "None",
            "name": "none"
          }
        ],
        "default": "none",
        "description": "The way to authorize incoming webhook."
      },
      {
        "label": "API key",
        "name": "apiKey",
        "type": "asyncOptions",
        "loadMethod": "getAPIKeys",
        "description": "Incoming call must consists header \"x-api-key\" with matching API key. You can create new key from the dashboard",
        "show": {
          "inputParameters.authorization": [
            "headerAuth"
          ]
        }
      },
      {
        "label": "Response Code",
        "name": "responseCode",
        "type": "number",
        "default": 200,
        "description": "The HTTP response code to return when a HTTP request is made to this endpoint URL. Valid range: 1XX - 5XX"
      },
      {
        "label": "What/How to Return",
        "name": "returnType",
        "type": "options",
        "options": [
          {
            "label": "Immediate Reponse",
            "name": "immediateResponse",
            "description": "Returns response immediately once webhook is called"
          },
          {
            "label": "When Last Node Finishes",
            "name": "lastNodeResponse",
            "description": "Returns output response of the last executed node"
          }
        ],
        "default": "immediateResponse",
        "description": "What data or message, and how should Webhook node return upon successful calling"
      },
      {
        "label": "Response Data",
        "name": "responseData",
        "type": "string",
        "default": "",
        "description": "Custom response data to return when a HTTP request is made to this webhook endpoint URL. If not provided, default to: Webhook received!",
        "optional": true,
        "show": {
          "inputParameters.returnType": [
            "immediateResponse"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Webhook/Webhook.js"
  },
  {
    "loadMethods": {},
    "label": "Xero",
    "name": "xero",
    "icon": "https://raw.githubusercontent.com/Outerbridgeio/Outerbridge/master/packages/components/nodes/Xero/xero.svg",
    "type": "action",
    "category": "Accounting",
    "version": 1,
    "description": "Perform Xero operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
      {
        "label": "Operation",
        "name": "operation",
        "type": "options",
        "options": [
          {
            "label": "Get all invoices",
            "name": "getAllInvoices",
            "description": "Returns all the invoices from Xero account."
          },
          {
            "label": "Get single invoice",
            "name": "getSingleInvoice",
            "description": "Returns single invoice from Xero account."
          },
          {
            "label": "Create Invoice",
            "name": "createInvoice",
            "description": "Creates a new draft invoice."
          },
          {
            "label": "Send email",
            "name": "sendToEmail",
            "description": "Send email with invoice to primary email."
          }
        ]
      }
    ],
    "credentials": [
      {
        "label": "Credential Method",
        "name": "credentialMethod",
        "type": "options",
        "options": [
          {
            "label": "Xero OAuth2",
            "name": "xeroOAuth2Api"
          }
        ],
        "default": "xeroOAuth2Api"
      }
    ],
    "inputParameters": [
      {
        "label": "Tenant",
        "name": "tenant",
        "type": "asyncOptions",
        "loadMethod": "getTenants"
      },
      {
        "label": "Invoice",
        "name": "invoice",
        "type": "asyncOptions",
        "loadMethod": "getInvoices",
        "show": {
          "actions.operation": [
            "getSingleInvoice",
            "sendToEmail"
          ]
        }
      },
      {
        "label": "Who do you want to bill?",
        "name": "contactName",
        "type": "asyncOptions",
        "loadMethod": "getContacts",
        "show": {
          "actions.operation": [
            "createInvoice"
          ]
        }
      },
      {
        "label": "Type of invoice",
        "name": "invoiceType",
        "type": "options",
        "description": "Which type of invoice? (ACCPAY or ACCREC)",
        "options": [
          {
            "label": "ACCPAY - Accounts Payable",
            "name": "ACCPAY"
          },
          {
            "label": "ACCREC - Accounts Receivable",
            "name": "ACCREC"
          }
        ],
        "show": {
          "actions.operation": [
            "createInvoice"
          ]
        }
      },
      {
        "label": "Description",
        "name": "lineItem",
        "type": "string",
        "description": "Service or product to be billed.",
        "placeholder": "What service / product is to be billed?",
        "show": {
          "actions.operation": [
            "createInvoice"
          ]
        }
      },
      {
        "label": "Cost",
        "name": "unitAmount",
        "type": "number",
        "description": "Cost of product / service",
        "show": {
          "actions.operation": [
            "createInvoice"
          ]
        }
      },
      {
        "label": "Quantity",
        "name": "unitQuantity",
        "type": "number",
        "description": "Quantity of product / service",
        "show": {
          "actions.operation": [
            "createInvoice"
          ]
        }
      }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Xero/xero.js"
  },
  {
    "loadMethods": {},
    "label": "Redis",
    "name": "redis",
    "icon": "https://www.svgrepo.com/show/303460/redis-logo.svg",
    "type": "action",
    "category": "Database",
    "version": 1,
    "description": "Execute Redis operations",
    "incoming": 1,
    "outgoing": 1,
    "actions": [
        {
            "label": "Operation",
            "name": "operation",
            "type": "options",
            "options": [
                {
                    "label": "Delete",
                    "name": "delete",
                    "description": "Delete a key from Redis"
                },
                {
                    "label": "Get",
                    "name": "get",
                    "description": "Get the value of a key from Redis"
                },
                {
                    "label": "Set",
                    "name": "set",
                    "description": "Set the value of a key in Redis"
                },
                {
                    "label": "Increment",
                    "name": "incr",
                    "description": "Atomically increment a key by 1. Creates the key if it does not exist."
                },
                {
                    "label": "Keys",
                    "name": "keys",
                    "description": "Returns all keys matching a pattern"
                },
                {
                    "label": "Publish",
                    "name": "publish",
                    "description": "Publish a message to a Redis channel"
                },
                {
                    "label": "Push",
                    "name": "push",
                    "description": "Push data to a Redis list"
                },
                {
                    "label": "Pop",
                    "name": "pop",
                    "description": "Pop data from a Redis list"
                }
            ],
            "default": "get"
        }
    ],
    "networks": [],
    "credentials": [
        {
            "label": "Redis Credentials",
            "name": "redisCredentials",
            "type": "object",
            "properties": [
                {
                    "label": "Host",
                    "name": "host",
                    "type": "string",
                    "default": "localhost",
                    "required": true
                },
                {
                    "label": "Port",
                    "name": "port",
                    "type": "number",
                    "default": 6379,
                    "required": true
                },
                {
                    "label": "Password",
                    "name": "password",
                    "type": "string",
                    "default": "",
                    "required": false
                }
            ]
        }
    ],
    "inputParameters": [
        {
            "label": "Key",
            "name": "key",
            "type": "string",
            "required": true,
            "show": {
                "actions.operation": ["delete", "get", "set", "incr"]
            }
        },
        {
            "label": "Value",
            "name": "value",
            "type": "string",
            "required": true,
            "show": {
                "actions.operation": ["set"]
            }
        },
        {
            "label": "Key Pattern",
            "name": "keyPattern",
            "type": "string",
            "required": true,
            "show": {
                "actions.operation": ["keys"]
            }
        },
        {
            "label": "Channel",
            "name": "channel",
            "type": "string",
            "required": true,
            "show": {
                "actions.operation": ["publish"]
            }
        },
        {
            "label": "Message Data",
            "name": "messageData",
            "type": "string",
            "required": true,
            "show": {
                "actions.operation": ["publish", "push"]
            }
        },
        {
            "label": "List",
            "name": "list",
            "type": "string",
            "required": true,
            "show": {
                "actions.operation": ["push", "pop"]
            }
        },
        {
            "label": "Tail",
            "name": "tail",
            "type": "boolean",
            "default": false,
            "show": {
                "actions.operation": ["push", "pop"]
            }
        },
        {
            "label": "Property Name",
            "name": "propertyName",
            "type": "string",
            "default": "propertyName",
            "show": {
                "actions.operation": ["get", "pop"]
            }
        },
        {
            "label": "Expire",
            "name": "expire",
            "type": "boolean",
            "default": false,
            "show": {
                "actions.operation": ["incr"]
            }
        },
        {
            "label": "TTL",
            "name": "ttl",
            "type": "number",
            "default": 60,
            "show": {
                "actions.operation": ["incr"],
                "inputParameters.expire": [true]
            }
        }
    ],
    "filePath": "https://raw.githubusercontent.com/fruitbox12/nodes/main/nodes/Redis/redis.js"
}
]
